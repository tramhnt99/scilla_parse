// Generated from scilla.g4 by ANTLR 4.9
// jshint ignore: start
import antlr4 from 'antlr4';
import scillaListener from './scillaListener.js';

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003@\u02e0\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u0003\u0002\u0005\u0002h\n\u0002\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003v\n\u0003",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u0081\n\u0004\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u008d\n\u0005",
    "\u0003\u0006\u0003\u0006\u0006\u0006\u0091\n\u0006\r\u0006\u000e\u0006",
    "\u0092\u0003\u0006\u0005\u0006\u0096\n\u0006\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0007\u0007\u00a2\n\u0007\f\u0007\u000e\u0007",
    "\u00a5\u000b\u0007\u0007\u0007\u00a7\n\u0007\f\u0007\u000e\u0007\u00aa",
    "\u000b\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0005\u0007\u00b8\n\u0007\u0003\b\u0003\b\u0003\b\u0007",
    "\b\u00bd\n\b\f\b\u000e\b\u00c0\u000b\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0005\b\u00d0\n\b\u0003\b\u0003\b\u0003\b\u0007\b\u00d5\n",
    "\b\f\b\u000e\b\u00d8\u000b\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00e5\n\t\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0005\f\u00f2\n\f\u0003\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0006\f\u0104\n\f\r\f\u000e\f\u0105\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0005\f\u010c\n\f\u0003\f\u0003\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0007\f\u0114\n\f\f\f\u000e\f\u0117\u000b\f",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u011f\n\f\f",
    "\f\u000e\f\u0122\u000b\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0128",
    "\n\f\u0003\f\u0007\f\u012b\n\f\f\f\u000e\f\u012e\u000b\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0006\f\u0137\n\f\r\f\u000e",
    "\f\u0138\u0005\f\u013b\n\f\u0003\r\u0003\r\u0005\r\u013f\n\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0005\u000e\u014a\n\u000e\u0003\u000f\u0003",
    "\u000f\u0007\u000f\u014e\n\u000f\f\u000f\u000e\u000f\u0151\u000b\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u015d\n",
    "\u0011\f\u0011\u000e\u0011\u0160\u000b\u0011\u0005\u0011\u0162\n\u0011",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0005\u0012\u016b\n\u0012\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u017a",
    "\n\u0014\u0003\u0015\u0006\u0015\u017d\n\u0015\r\u0015\u000e\u0015\u017e",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u0183\n\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u0193\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u019d\n\u001a\u0003\u001b\u0003\u001b\u0005\u001b\u01a1\n\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0006\u001e\u01bf\n\u001e",
    "\r\u001e\u000e\u001e\u01c0\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0006\u001e\u01c8\n\u001e\r\u001e\u000e\u001e\u01c9",
    "\u0003\u001e\u0003\u001e\u0006\u001e\u01ce\n\u001e\r\u001e\u000e\u001e",
    "\u01cf\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0006\u001e\u01d8\n\u001e\r\u001e\u000e\u001e\u01d9\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0005\u001e\u01e3\n\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0006\u001e\u01e9\n\u001e\r\u001e\u000e\u001e\u01ea\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u01f1\n\u001e\f\u001e",
    "\u000e\u001e\u01f4\u000b\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u01fa\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0006\u001f\u0211\n\u001f\r\u001f\u000e\u001f\u0212\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0006\u001f\u021d\n\u001f\r\u001f\u000e\u001f\u021e\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0005\u001f\u0228\n\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0007 \u0230\n \f \u000e \u0233\u000b \u0007 \u0235\n \f \u000e \u0238",
    "\u000b \u0003!\u0003!\u0003!\u0007!\u023d\n!\f!\u000e!\u0240\u000b!",
    "\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0005$\u0249\n",
    "$\u0003%\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003\'\u0003\'\u0005\'\u0257\n\'\u0003(\u0003(\u0003(\u0003(\u0007",
    "(\u025d\n(\f(\u000e(\u0260\u000b(\u0007(\u0262\n(\f(\u000e(\u0265\u000b",
    "(\u0003(\u0003(\u0003)\u0005)\u026a\n)\u0003)\u0003)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0007,\u027d\n,\f,\u000e,\u0280\u000b,\u0007,\u0282",
    "\n,\f,\u000e,\u0285\u000b,\u0003,\u0003,\u0005,\u0289\n,\u0003,\u0007",
    ",\u028c\n,\f,\u000e,\u028f\u000b,\u0003,\u0007,\u0292\n,\f,\u000e,\u0295",
    "\u000b,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0006-\u029d\n-\r",
    "-\u000e-\u029e\u0005-\u02a1\n-\u0003.\u0003.\u0003.\u0005.\u02a6\n.",
    "\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0006",
    ".\u02b1\n.\r.\u000e.\u02b2\u0005.\u02b5\n.\u0003/\u0003/\u0003/\u0007",
    "/\u02ba\n/\f/\u000e/\u02bd\u000b/\u00030\u00030\u00030\u00050\u02c2",
    "\n0\u00030\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00051\u02cc",
    "\n1\u00032\u00032\u00072\u02d0\n2\f2\u000e2\u02d3\u000b2\u00033\u0003",
    "3\u00033\u00053\u02d8\n3\u00033\u00053\u02db\n3\u00033\u00033\u0003",
    "3\u00033\u0002\u0003\u000e4\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bd\u0002\u0002\u0002\u0321\u0002g\u0003\u0002\u0002\u0002\u0004",
    "u\u0003\u0002\u0002\u0002\u0006\u0080\u0003\u0002\u0002\u0002\b\u008c",
    "\u0003\u0002\u0002\u0002\n\u0095\u0003\u0002\u0002\u0002\f\u00b7\u0003",
    "\u0002\u0002\u0002\u000e\u00cf\u0003\u0002\u0002\u0002\u0010\u00e4\u0003",
    "\u0002\u0002\u0002\u0012\u00e6\u0003\u0002\u0002\u0002\u0014\u00eb\u0003",
    "\u0002\u0002\u0002\u0016\u013a\u0003\u0002\u0002\u0002\u0018\u013e\u0003",
    "\u0002\u0002\u0002\u001a\u0149\u0003\u0002\u0002\u0002\u001c\u014b\u0003",
    "\u0002\u0002\u0002\u001e\u0154\u0003\u0002\u0002\u0002 \u0161\u0003",
    "\u0002\u0002\u0002\"\u016a\u0003\u0002\u0002\u0002$\u016c\u0003\u0002",
    "\u0002\u0002&\u0179\u0003\u0002\u0002\u0002(\u0182\u0003\u0002\u0002",
    "\u0002*\u0184\u0003\u0002\u0002\u0002,\u0187\u0003\u0002\u0002\u0002",
    ".\u018a\u0003\u0002\u0002\u00020\u0192\u0003\u0002\u0002\u00022\u019c",
    "\u0003\u0002\u0002\u00024\u01a0\u0003\u0002\u0002\u00026\u01a2\u0003",
    "\u0002\u0002\u00028\u01a5\u0003\u0002\u0002\u0002:\u01f9\u0003\u0002",
    "\u0002\u0002<\u0227\u0003\u0002\u0002\u0002>\u0229\u0003\u0002\u0002",
    "\u0002@\u0239\u0003\u0002\u0002\u0002B\u0241\u0003\u0002\u0002\u0002",
    "D\u0244\u0003\u0002\u0002\u0002F\u0248\u0003\u0002\u0002\u0002H\u024a",
    "\u0003\u0002\u0002\u0002J\u024f\u0003\u0002\u0002\u0002L\u0256\u0003",
    "\u0002\u0002\u0002N\u0258\u0003\u0002\u0002\u0002P\u0269\u0003\u0002",
    "\u0002\u0002R\u026d\u0003\u0002\u0002\u0002T\u0272\u0003\u0002\u0002",
    "\u0002V\u0276\u0003\u0002\u0002\u0002X\u02a0\u0003\u0002\u0002\u0002",
    "Z\u02b4\u0003\u0002\u0002\u0002\\\u02b6\u0003\u0002\u0002\u0002^\u02be",
    "\u0003\u0002\u0002\u0002`\u02cb\u0003\u0002\u0002\u0002b\u02cd\u0003",
    "\u0002\u0002\u0002d\u02d4\u0003\u0002\u0002\u0002fh\u0007\u0003\u0002",
    "\u0002gf\u0003\u0002\u0002\u0002gh\u0003\u0002\u0002\u0002hi\u0003\u0002",
    "\u0002\u0002ij\u00075\u0002\u0002j\u0003\u0003\u0002\u0002\u0002kv\u0005",
    "2\u001a\u0002lm\u0007\'\u0002\u0002mn\u00052\u001a\u0002no\u0007(\u0002",
    "\u0002ov\u0003\u0002\u0002\u0002pq\u0007\'\u0002\u0002qr\u0005\f\u0007",
    "\u0002rs\u0007(\u0002\u0002sv\u0003\u0002\u0002\u0002tv\u0005\f\u0007",
    "\u0002uk\u0003\u0002\u0002\u0002ul\u0003\u0002\u0002\u0002up\u0003\u0002",
    "\u0002\u0002ut\u0003\u0002\u0002\u0002v\u0005\u0003\u0002\u0002\u0002",
    "wx\u0007\'\u0002\u0002xy\u0005\n\u0006\u0002yz\u0007(\u0002\u0002z\u0081",
    "\u0003\u0002\u0002\u0002{\u0081\u00052\u001a\u0002|}\u0007\u0018\u0002",
    "\u0002}~\u0005\u0004\u0003\u0002~\u007f\u0005\b\u0005\u0002\u007f\u0081",
    "\u0003\u0002\u0002\u0002\u0080w\u0003\u0002\u0002\u0002\u0080{\u0003",
    "\u0002\u0002\u0002\u0080|\u0003\u0002\u0002\u0002\u0081\u0007\u0003",
    "\u0002\u0002\u0002\u0082\u008d\u00052\u001a\u0002\u0083\u0084\u0007",
    "\u0018\u0002\u0002\u0084\u0085\u0005\u0004\u0003\u0002\u0085\u0086\u0005",
    "\b\u0005\u0002\u0086\u008d\u0003\u0002\u0002\u0002\u0087\u0088\u0007",
    "\'\u0002\u0002\u0088\u0089\u0005\n\u0006\u0002\u0089\u008a\u0007(\u0002",
    "\u0002\u008a\u008d\u0003\u0002\u0002\u0002\u008b\u008d\u0005\f\u0007",
    "\u0002\u008c\u0082\u0003\u0002\u0002\u0002\u008c\u0083\u0003\u0002\u0002",
    "\u0002\u008c\u0087\u0003\u0002\u0002\u0002\u008c\u008b\u0003\u0002\u0002",
    "\u0002\u008d\t\u0003\u0002\u0002\u0002\u008e\u0090\u00052\u001a\u0002",
    "\u008f\u0091\u0005\u0006\u0004\u0002\u0090\u008f\u0003\u0002\u0002\u0002",
    "\u0091\u0092\u0003\u0002\u0002\u0002\u0092\u0090\u0003\u0002\u0002\u0002",
    "\u0092\u0093\u0003\u0002\u0002\u0002\u0093\u0096\u0003\u0002\u0002\u0002",
    "\u0094\u0096\u0005\b\u0005\u0002\u0095\u008e\u0003\u0002\u0002\u0002",
    "\u0095\u0094\u0003\u0002\u0002\u0002\u0096\u000b\u0003\u0002\u0002\u0002",
    "\u0097\u0098\u00054\u001b\u0002\u0098\u0099\u0007\u000b\u0002\u0002",
    "\u0099\u009a\u0007\f\u0002\u0002\u009a\u00b8\u0003\u0002\u0002\u0002",
    "\u009b\u009c\u00054\u001b\u0002\u009c\u009d\u0007\u000b\u0002\u0002",
    "\u009d\u00a8\u0007\u000f\u0002\u0002\u009e\u00a3\u0005\u0012\n\u0002",
    "\u009f\u00a0\u0007+\u0002\u0002\u00a0\u00a2\u0005\u0012\n\u0002\u00a1",
    "\u009f\u0003\u0002\u0002\u0002\u00a2\u00a5\u0003\u0002\u0002\u0002\u00a3",
    "\u00a1\u0003\u0002\u0002\u0002\u00a3\u00a4\u0003\u0002\u0002\u0002\u00a4",
    "\u00a7\u0003\u0002\u0002\u0002\u00a5\u00a3\u0003\u0002\u0002\u0002\u00a6",
    "\u009e\u0003\u0002\u0002\u0002\u00a7\u00aa\u0003\u0002\u0002\u0002\u00a8",
    "\u00a6\u0003\u0002\u0002\u0002\u00a8\u00a9\u0003\u0002\u0002\u0002\u00a9",
    "\u00ab\u0003\u0002\u0002\u0002\u00aa\u00a8\u0003\u0002\u0002\u0002\u00ab",
    "\u00ac\u0007\f\u0002\u0002\u00ac\u00b8\u0003\u0002\u0002\u0002\u00ad",
    "\u00ae\u00054\u001b\u0002\u00ae\u00af\u0007\u000b\u0002\u0002\u00af",
    "\u00b0\u0007\u0006\u0002\u0002\u00b0\u00b1\u0007\f\u0002\u0002\u00b1",
    "\u00b8\u0003\u0002\u0002\u0002\u00b2\u00b3\u00054\u001b\u0002\u00b3",
    "\u00b4\u0007\u000b\u0002\u0002\u00b4\u00b5\u0007>\u0002\u0002\u00b5",
    "\u00b6\u0007\f\u0002\u0002\u00b6\u00b8\u0003\u0002\u0002\u0002\u00b7",
    "\u0097\u0003\u0002\u0002\u0002\u00b7\u009b\u0003\u0002\u0002\u0002\u00b7",
    "\u00ad\u0003\u0002\u0002\u0002\u00b7\u00b2\u0003\u0002\u0002\u0002\u00b8",
    "\r\u0003\u0002\u0002\u0002\u00b9\u00ba\b\b\u0001\u0002\u00ba\u00be\u0005",
    "2\u001a\u0002\u00bb\u00bd\u0005\u0010\t\u0002\u00bc\u00bb\u0003\u0002",
    "\u0002\u0002\u00bd\u00c0\u0003\u0002\u0002\u0002\u00be\u00bc\u0003\u0002",
    "\u0002\u0002\u00be\u00bf\u0003\u0002\u0002\u0002\u00bf\u00d0\u0003\u0002",
    "\u0002\u0002\u00c0\u00be\u0003\u0002\u0002\u0002\u00c1\u00c2\u0007\u0018",
    "\u0002\u0002\u00c2\u00c3\u0005\u0004\u0003\u0002\u00c3\u00c4\u0005\b",
    "\u0005\u0002\u00c4\u00d0\u0003\u0002\u0002\u0002\u00c5\u00c6\u0007\'",
    "\u0002\u0002\u00c6\u00c7\u0005\u000e\b\u0002\u00c7\u00c8\u0007(\u0002",
    "\u0002\u00c8\u00d0\u0003\u0002\u0002\u0002\u00c9\u00d0\u0005\f\u0007",
    "\u0002\u00ca\u00cb\u0007\u0004\u0002\u0002\u00cb\u00cc\u0007@\u0002",
    "\u0002\u00cc\u00cd\u0007#\u0002\u0002\u00cd\u00d0\u0005\u000e\b\u0004",
    "\u00ce\u00d0\u0007@\u0002\u0002\u00cf\u00b9\u0003\u0002\u0002\u0002",
    "\u00cf\u00c1\u0003\u0002\u0002\u0002\u00cf\u00c5\u0003\u0002\u0002\u0002",
    "\u00cf\u00c9\u0003\u0002\u0002\u0002\u00cf\u00ca\u0003\u0002\u0002\u0002",
    "\u00cf\u00ce\u0003\u0002\u0002\u0002\u00d0\u00d6\u0003\u0002\u0002\u0002",
    "\u00d1\u00d2\f\u0007\u0002\u0002\u00d2\u00d3\u0007-\u0002\u0002\u00d3",
    "\u00d5\u0005\u000e\b\b\u00d4\u00d1\u0003\u0002\u0002\u0002\u00d5\u00d8",
    "\u0003\u0002\u0002\u0002\u00d6\u00d4\u0003\u0002\u0002\u0002\u00d6\u00d7",
    "\u0003\u0002\u0002\u0002\u00d7\u000f\u0003\u0002\u0002\u0002\u00d8\u00d6",
    "\u0003\u0002\u0002\u0002\u00d9\u00da\u0007\'\u0002\u0002\u00da\u00db",
    "\u0005\u000e\b\u0002\u00db\u00dc\u0007(\u0002\u0002\u00dc\u00e5\u0003",
    "\u0002\u0002\u0002\u00dd\u00e5\u00052\u001a\u0002\u00de\u00e5\u0007",
    "@\u0002\u0002\u00df\u00e5\u0005\f\u0007\u0002\u00e0\u00e1\u0007\u0018",
    "\u0002\u0002\u00e1\u00e2\u0005\u0004\u0003\u0002\u00e2\u00e3\u0005\b",
    "\u0005\u0002\u00e3\u00e5\u0003\u0002\u0002\u0002\u00e4\u00d9\u0003\u0002",
    "\u0002\u0002\u00e4\u00dd\u0003\u0002\u0002\u0002\u00e4\u00de\u0003\u0002",
    "\u0002\u0002\u00e4\u00df\u0003\u0002\u0002\u0002\u00e4\u00e0\u0003\u0002",
    "\u0002\u0002\u00e5\u0011\u0003\u0002\u0002\u0002\u00e6\u00e7\u0007\u0013",
    "\u0002\u0002\u00e7\u00e8\u0005.\u0018\u0002\u00e8\u00e9\u0007\"\u0002",
    "\u0002\u00e9\u00ea\u0005\u000e\b\u0002\u00ea\u0013\u0003\u0002\u0002",
    "\u0002\u00eb\u00ec\u0005\u0016\f\u0002\u00ec\u0015\u0003\u0002\u0002",
    "\u0002\u00ed\u00ee\u0007\b\u0002\u0002\u00ee\u00f1\u0005.\u0018\u0002",
    "\u00ef\u00f0\u0007\"\u0002\u0002\u00f0\u00f2\u0005\u000e\b\u0002\u00f1",
    "\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2\u0003\u0002\u0002\u0002\u00f2",
    "\u00f3\u0003\u0002\u0002\u0002\u00f3\u00f4\u0007.\u0002\u0002\u00f4",
    "\u00f5\u0005\u0016\f\u0002\u00f5\u00f6\u0007\t\u0002\u0002\u00f6\u00f7",
    "\u0005\u0014\u000b\u0002\u00f7\u013b\u0003\u0002\u0002\u0002\u00f8\u00f9",
    "\u0007\r\u0002\u0002\u00f9\u00fa\u0007\'\u0002\u0002\u00fa\u00fb\u0005",
    ".\u0018\u0002\u00fb\u00fc\u0007\"\u0002\u0002\u00fc\u00fd\u0005\u000e",
    "\b\u0002\u00fd\u00fe\u0007(\u0002\u0002\u00fe\u00ff\u0007,\u0002\u0002",
    "\u00ff\u0100\u0005\u0014\u000b\u0002\u0100\u013b\u0003\u0002\u0002\u0002",
    "\u0101\u0103\u00050\u0019\u0002\u0102\u0104\u00050\u0019\u0002\u0103",
    "\u0102\u0003\u0002\u0002\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0105",
    "\u0103\u0003\u0002\u0002\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106",
    "\u013b\u0003\u0002\u0002\u0002\u0107\u013b\u0005\u0018\r\u0002\u0108",
    "\u0109\u0007\u0005\u0002\u0002\u0109\u010b\u0005.\u0018\u0002\u010a",
    "\u010c\u0005\u001c\u000f\u0002\u010b\u010a\u0003\u0002\u0002\u0002\u010b",
    "\u010c\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002\u0002\u010d",
    "\u010e\u0005(\u0015\u0002\u010e\u013b\u0003\u0002\u0002\u0002\u010f",
    "\u0110\u0007)\u0002\u0002\u0110\u0115\u0005&\u0014\u0002\u0111\u0112",
    "\u0007!\u0002\u0002\u0112\u0114\u0005&\u0014\u0002\u0113\u0111\u0003",
    "\u0002\u0002\u0002\u0114\u0117\u0003\u0002\u0002\u0002\u0115\u0113\u0003",
    "\u0002\u0002\u0002\u0115\u0116\u0003\u0002\u0002\u0002\u0116\u0118\u0003",
    "\u0002\u0002\u0002\u0117\u0115\u0003\u0002\u0002\u0002\u0118\u0119\u0007",
    "*\u0002\u0002\u0119\u013b\u0003\u0002\u0002\u0002\u011a\u011b\u0007",
    "\n\u0002\u0002\u011b\u011c\u00050\u0019\u0002\u011c\u0120\u0007\u000b",
    "\u0002\u0002\u011d\u011f\u0005$\u0013\u0002\u011e\u011d\u0003\u0002",
    "\u0002\u0002\u011f\u0122\u0003\u0002\u0002\u0002\u0120\u011e\u0003\u0002",
    "\u0002\u0002\u0120\u0121\u0003\u0002\u0002\u0002\u0121\u0123\u0003\u0002",
    "\u0002\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0123\u0124\u0007\f",
    "\u0002\u0002\u0124\u013b\u0003\u0002\u0002\u0002\u0125\u0127\u00052",
    "\u001a\u0002\u0126\u0128\u0005\u001c\u000f\u0002\u0127\u0126\u0003\u0002",
    "\u0002\u0002\u0127\u0128\u0003\u0002\u0002\u0002\u0128\u012c\u0003\u0002",
    "\u0002\u0002\u0129\u012b\u00050\u0019\u0002\u012a\u0129\u0003\u0002",
    "\u0002\u0002\u012b\u012e\u0003\u0002\u0002\u0002\u012c\u012a\u0003\u0002",
    "\u0002\u0002\u012c\u012d\u0003\u0002\u0002\u0002\u012d\u013b\u0003\u0002",
    "\u0002\u0002\u012e\u012c\u0003\u0002\u0002\u0002\u012f\u0130\u0007\u000e",
    "\u0002\u0002\u0130\u0131\u0007@\u0002\u0002\u0131\u0132\u0007,\u0002",
    "\u0002\u0132\u013b\u0005\u0014\u000b\u0002\u0133\u0134\u00072\u0002",
    "\u0002\u0134\u0136\u00050\u0019\u0002\u0135\u0137\u0005\u0010\t\u0002",
    "\u0136\u0135\u0003\u0002\u0002\u0002\u0137\u0138\u0003\u0002\u0002\u0002",
    "\u0138\u0136\u0003\u0002\u0002\u0002\u0138\u0139\u0003\u0002\u0002\u0002",
    "\u0139\u013b\u0003\u0002\u0002\u0002\u013a\u00ed\u0003\u0002\u0002\u0002",
    "\u013a\u00f8\u0003\u0002\u0002\u0002\u013a\u0101\u0003\u0002\u0002\u0002",
    "\u013a\u0107\u0003\u0002\u0002\u0002\u013a\u0108\u0003\u0002\u0002\u0002",
    "\u013a\u010f\u0003\u0002\u0002\u0002\u013a\u011a\u0003\u0002\u0002\u0002",
    "\u013a\u0125\u0003\u0002\u0002\u0002\u013a\u012f\u0003\u0002\u0002\u0002",
    "\u013a\u0133\u0003\u0002\u0002\u0002\u013b\u0017\u0003\u0002\u0002\u0002",
    "\u013c\u013f\u00050\u0019\u0002\u013d\u013f\u0005\u001a\u000e\u0002",
    "\u013e\u013c\u0003\u0002\u0002\u0002\u013e\u013d\u0003\u0002\u0002\u0002",
    "\u013f\u0019\u0003\u0002\u0002\u0002\u0140\u0141\u00054\u001b\u0002",
    "\u0141\u0142\u0005\u0002\u0002\u0002\u0142\u014a\u0003\u0002\u0002\u0002",
    "\u0143\u014a\u00078\u0002\u0002\u0144\u014a\u00076\u0002\u0002\u0145",
    "\u0146\u0007\u0017\u0002\u0002\u0146\u0147\u0005\u0004\u0003\u0002\u0147",
    "\u0148\u0005\b\u0005\u0002\u0148\u014a\u0003\u0002\u0002\u0002\u0149",
    "\u0140\u0003\u0002\u0002\u0002\u0149\u0143\u0003\u0002\u0002\u0002\u0149",
    "\u0144\u0003\u0002\u0002\u0002\u0149\u0145\u0003\u0002\u0002\u0002\u014a",
    "\u001b\u0003\u0002\u0002\u0002\u014b\u014f\u0007)\u0002\u0002\u014c",
    "\u014e\u0005\u0010\t\u0002\u014d\u014c\u0003\u0002\u0002\u0002\u014e",
    "\u0151\u0003\u0002\u0002\u0002\u014f\u014d\u0003\u0002\u0002\u0002\u014f",
    "\u0150\u0003\u0002\u0002\u0002\u0150\u0152\u0003\u0002\u0002\u0002\u0151",
    "\u014f\u0003\u0002\u0002\u0002\u0152\u0153\u0007*\u0002\u0002\u0153",
    "\u001d\u0003\u0002\u0002\u0002\u0154\u0155\u0007%\u0002\u0002\u0155",
    "\u0156\u00050\u0019\u0002\u0156\u0157\u0007&\u0002\u0002\u0157\u001f",
    "\u0003\u0002\u0002\u0002\u0158\u0162\u00073\u0002\u0002\u0159\u0162",
    "\u0005.\u0018\u0002\u015a\u015e\u00052\u001a\u0002\u015b\u015d\u0005",
    "\"\u0012\u0002\u015c\u015b\u0003\u0002\u0002\u0002\u015d\u0160\u0003",
    "\u0002\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003",
    "\u0002\u0002\u0002\u015f\u0162\u0003\u0002\u0002\u0002\u0160\u015e\u0003",
    "\u0002\u0002\u0002\u0161\u0158\u0003\u0002\u0002\u0002\u0161\u0159\u0003",
    "\u0002\u0002\u0002\u0161\u015a\u0003\u0002\u0002\u0002\u0162!\u0003",
    "\u0002\u0002\u0002\u0163\u016b\u00073\u0002\u0002\u0164\u016b\u0005",
    ".\u0018\u0002\u0165\u016b\u00052\u001a\u0002\u0166\u0167\u0007\'\u0002",
    "\u0002\u0167\u0168\u0005 \u0011\u0002\u0168\u0169\u0007(\u0002\u0002",
    "\u0169\u016b\u0003\u0002\u0002\u0002\u016a\u0163\u0003\u0002\u0002\u0002",
    "\u016a\u0164\u0003\u0002\u0002\u0002\u016a\u0165\u0003\u0002\u0002\u0002",
    "\u016a\u0166\u0003\u0002\u0002\u0002\u016b#\u0003\u0002\u0002\u0002",
    "\u016c\u016d\u0007$\u0002\u0002\u016d\u016e\u0005 \u0011\u0002\u016e",
    "\u016f\u0007,\u0002\u0002\u016f\u0170\u0005\u0014\u000b\u0002\u0170",
    "%\u0003\u0002\u0002\u0002\u0171\u0172\u00050\u0019\u0002\u0172\u0173",
    "\u0007\"\u0002\u0002\u0173\u0174\u0005\u001a\u000e\u0002\u0174\u017a",
    "\u0003\u0002\u0002\u0002\u0175\u0176\u00050\u0019\u0002\u0176\u0177",
    "\u0007\"\u0002\u0002\u0177\u0178\u00050\u0019\u0002\u0178\u017a\u0003",
    "\u0002\u0002\u0002\u0179\u0171\u0003\u0002\u0002\u0002\u0179\u0175\u0003",
    "\u0002\u0002\u0002\u017a\'\u0003\u0002\u0002\u0002\u017b\u017d\u0005",
    "0\u0019\u0002\u017c\u017b\u0003\u0002\u0002\u0002\u017d\u017e\u0003",
    "\u0002\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003",
    "\u0002\u0002\u0002\u017f\u0183\u0003\u0002\u0002\u0002\u0180\u0181\u0007",
    "\'\u0002\u0002\u0181\u0183\u0007(\u0002\u0002\u0182\u017c\u0003\u0002",
    "\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0183)\u0003\u0002",
    "\u0002\u0002\u0184\u0185\u0005\u0014\u000b\u0002\u0185\u0186\u0007\u0002",
    "\u0002\u0003\u0186+\u0003\u0002\u0002\u0002\u0187\u0188\u0005\u000e",
    "\b\u0002\u0188\u0189\u0007\u0002\u0002\u0003\u0189-\u0003\u0002\u0002",
    "\u0002\u018a\u018b\u0007=\u0002\u0002\u018b/\u0003\u0002\u0002\u0002",
    "\u018c\u0193\u0005.\u0018\u0002\u018d\u0193\u0007>\u0002\u0002\u018e",
    "\u018f\u00054\u001b\u0002\u018f\u0190\u0007#\u0002\u0002\u0190\u0191",
    "\u0005.\u0018\u0002\u0191\u0193\u0003\u0002\u0002\u0002\u0192\u018c",
    "\u0003\u0002\u0002\u0002\u0192\u018d\u0003\u0002\u0002\u0002\u0192\u018e",
    "\u0003\u0002\u0002\u0002\u01931\u0003\u0002\u0002\u0002\u0194\u019d",
    "\u00054\u001b\u0002\u0195\u0196\u00054\u001b\u0002\u0196\u0197\u0007",
    "#\u0002\u0002\u0197\u0198\u00054\u001b\u0002\u0198\u019d\u0003\u0002",
    "\u0002\u0002\u0199\u019a\u00078\u0002\u0002\u019a\u019b\u0007#\u0002",
    "\u0002\u019b\u019d\u00054\u001b\u0002\u019c\u0194\u0003\u0002\u0002",
    "\u0002\u019c\u0195\u0003\u0002\u0002\u0002\u019c\u0199\u0003\u0002\u0002",
    "\u0002\u019d3\u0003\u0002\u0002\u0002\u019e\u01a1\u0007?\u0002\u0002",
    "\u019f\u01a1\u00079\u0002\u0002\u01a0\u019e\u0003\u0002\u0002\u0002",
    "\u01a0\u019f\u0003\u0002\u0002\u0002\u01a15\u0003\u0002\u0002\u0002",
    "\u01a2\u01a3\u0007\"\u0002\u0002\u01a3\u01a4\u0005\u000e\b\u0002\u01a4",
    "7\u0003\u0002\u0002\u0002\u01a5\u01a6\u0005.\u0018\u0002\u01a6\u01a7",
    "\u00056\u001c\u0002\u01a79\u0003\u0002\u0002\u0002\u01a8\u01a9\u0005",
    ".\u0018\u0002\u01a9\u01aa\u00070\u0002\u0002\u01aa\u01ab\u00050\u0019",
    "\u0002\u01ab\u01fa\u0003\u0002\u0002\u0002\u01ac\u01fa\u0005<\u001f",
    "\u0002\u01ad\u01ae\u0005.\u0018\u0002\u01ae\u01af\u00071\u0002\u0002",
    "\u01af\u01b0\u00050\u0019\u0002\u01b0\u01fa\u0003\u0002\u0002\u0002",
    "\u01b1\u01b2\u0005.\u0018\u0002\u01b2\u01b3\u0007.\u0002\u0002\u01b3",
    "\u01b4\u0005\u0014\u000b\u0002\u01b4\u01fa\u0003\u0002\u0002\u0002\u01b5",
    "\u01b6\u0005.\u0018\u0002\u01b6\u01b7\u00070\u0002\u0002\u01b7\u01b8",
    "\u0007/\u0002\u0002\u01b8\u01b9\u00054\u001b\u0002\u01b9\u01fa\u0003",
    "\u0002\u0002\u0002\u01ba\u01bb\u0005.\u0018\u0002\u01bb\u01bc\u0007",
    "0\u0002\u0002\u01bc\u01be\u0005.\u0018\u0002\u01bd\u01bf\u0005\u001e",
    "\u0010\u0002\u01be\u01bd\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003\u0002",
    "\u0002\u0002\u01c0\u01be\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002",
    "\u0002\u0002\u01c1\u01fa\u0003\u0002\u0002\u0002\u01c2\u01c3\u0005.",
    "\u0018\u0002\u01c3\u01c4\u00070\u0002\u0002\u01c4\u01c5\u0007\u0015",
    "\u0002\u0002\u01c5\u01c7\u0005.\u0018\u0002\u01c6\u01c8\u0005\u001e",
    "\u0010\u0002\u01c7\u01c6\u0003\u0002\u0002\u0002\u01c8\u01c9\u0003\u0002",
    "\u0002\u0002\u01c9\u01c7\u0003\u0002\u0002\u0002\u01c9\u01ca\u0003\u0002",
    "\u0002\u0002\u01ca\u01fa\u0003\u0002\u0002\u0002\u01cb\u01cd\u0005.",
    "\u0018\u0002\u01cc\u01ce\u0005\u001e\u0010\u0002\u01cd\u01cc\u0003\u0002",
    "\u0002\u0002\u01ce\u01cf\u0003\u0002\u0002\u0002\u01cf\u01cd\u0003\u0002",
    "\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002",
    "\u0002\u0002\u01d1\u01d2\u00071\u0002\u0002\u01d2\u01d3\u00050\u0019",
    "\u0002\u01d3\u01fa\u0003\u0002\u0002\u0002\u01d4\u01d5\u0007\u0016\u0002",
    "\u0002\u01d5\u01d7\u0005.\u0018\u0002\u01d6\u01d8\u0005\u001e\u0010",
    "\u0002\u01d7\u01d6\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002",
    "\u0002\u01d9\u01d7\u0003\u0002\u0002\u0002\u01d9\u01da\u0003\u0002\u0002",
    "\u0002\u01da\u01fa\u0003\u0002\u0002\u0002\u01db\u01fa\u0007\u0014\u0002",
    "\u0002\u01dc\u01dd\u0007\u0011\u0002\u0002\u01dd\u01fa\u00050\u0019",
    "\u0002\u01de\u01df\u0007\u0012\u0002\u0002\u01df\u01fa\u00050\u0019",
    "\u0002\u01e0\u01e2\u0007 \u0002\u0002\u01e1\u01e3\u00050\u0019\u0002",
    "\u01e2\u01e1\u0003\u0002\u0002\u0002\u01e2\u01e3\u0003\u0002\u0002\u0002",
    "\u01e3\u01fa\u0003\u0002\u0002\u0002\u01e4\u01e5\u0007\n\u0002\u0002",
    "\u01e5\u01e6\u00050\u0019\u0002\u01e6\u01e8\u0007\u000b\u0002\u0002",
    "\u01e7\u01e9\u0005> \u0002\u01e8\u01e7\u0003\u0002\u0002\u0002\u01e9",
    "\u01ea\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003\u0002\u0002\u0002\u01ea",
    "\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003\u0002\u0002\u0002\u01ec",
    "\u01ed\u0007\f\u0002\u0002\u01ed\u01fa\u0003\u0002\u0002\u0002\u01ee",
    "\u01f2\u0005L\'\u0002\u01ef\u01f1\u00050\u0019\u0002\u01f0\u01ef\u0003",
    "\u0002\u0002\u0002\u01f1\u01f4\u0003\u0002\u0002\u0002\u01f2\u01f0\u0003",
    "\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002\u01f3\u01fa\u0003",
    "\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f5\u01f6\u0007",
    "\u0004\u0002\u0002\u01f6\u01f7\u00050\u0019\u0002\u01f7\u01f8\u0005",
    "L\'\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9\u01a8\u0003\u0002",
    "\u0002\u0002\u01f9\u01ac\u0003\u0002\u0002\u0002\u01f9\u01ad\u0003\u0002",
    "\u0002\u0002\u01f9\u01b1\u0003\u0002\u0002\u0002\u01f9\u01b5\u0003\u0002",
    "\u0002\u0002\u01f9\u01ba\u0003\u0002\u0002\u0002\u01f9\u01c2\u0003\u0002",
    "\u0002\u0002\u01f9\u01cb\u0003\u0002\u0002\u0002\u01f9\u01d4\u0003\u0002",
    "\u0002\u0002\u01f9\u01db\u0003\u0002\u0002\u0002\u01f9\u01dc\u0003\u0002",
    "\u0002\u0002\u01f9\u01de\u0003\u0002\u0002\u0002\u01f9\u01e0\u0003\u0002",
    "\u0002\u0002\u01f9\u01e4\u0003\u0002\u0002\u0002\u01f9\u01ee\u0003\u0002",
    "\u0002\u0002\u01f9\u01f5\u0003\u0002\u0002\u0002\u01fa;\u0003\u0002",
    "\u0002\u0002\u01fb\u01fc\u0005.\u0018\u0002\u01fc\u01fd\u00070\u0002",
    "\u0002\u01fd\u01fe\u0007/\u0002\u0002\u01fe\u01ff\u0005.\u0018\u0002",
    "\u01ff\u0200\u0007#\u0002\u0002\u0200\u0201\u00050\u0019\u0002\u0201",
    "\u0228\u0003\u0002\u0002\u0002\u0202\u0203\u0005.\u0018\u0002\u0203",
    "\u0204\u00070\u0002\u0002\u0204\u0205\u0007/\u0002\u0002\u0205\u0206",
    "\u0007>\u0002\u0002\u0206\u0207\u0007#\u0002\u0002\u0207\u0208\u0007",
    ">\u0002\u0002\u0208\u0228\u0003\u0002\u0002\u0002\u0209\u020a\u0005",
    ".\u0018\u0002\u020a\u020b\u00070\u0002\u0002\u020b\u020c\u0007/\u0002",
    "\u0002\u020c\u020d\u0005.\u0018\u0002\u020d\u020e\u0007#\u0002\u0002",
    "\u020e\u0210\u0005.\u0018\u0002\u020f\u0211\u0005\u001e\u0010\u0002",
    "\u0210\u020f\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002",
    "\u0212\u0210\u0003\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002",
    "\u0213\u0228\u0003\u0002\u0002\u0002\u0214\u0215\u0005.\u0018\u0002",
    "\u0215\u0216\u00070\u0002\u0002\u0216\u0217\u0007/\u0002\u0002\u0217",
    "\u0218\u0007\u0015\u0002\u0002\u0218\u0219\u0005.\u0018\u0002\u0219",
    "\u021a\u0007#\u0002\u0002\u021a\u021c\u0005.\u0018\u0002\u021b\u021d",
    "\u0005\u001e\u0010\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021d\u021e",
    "\u0003\u0002\u0002\u0002\u021e\u021c\u0003\u0002\u0002\u0002\u021e\u021f",
    "\u0003\u0002\u0002\u0002\u021f\u0228\u0003\u0002\u0002\u0002\u0220\u0221",
    "\u0005.\u0018\u0002\u0221\u0222\u00070\u0002\u0002\u0222\u0223\u0007",
    "/\u0002\u0002\u0223\u0224\u00050\u0019\u0002\u0224\u0225\u0007\u001e",
    "\u0002\u0002\u0225\u0226\u0005\f\u0007\u0002\u0226\u0228\u0003\u0002",
    "\u0002\u0002\u0227\u01fb\u0003\u0002\u0002\u0002\u0227\u0202\u0003\u0002",
    "\u0002\u0002\u0227\u0209\u0003\u0002\u0002\u0002\u0227\u0214\u0003\u0002",
    "\u0002\u0002\u0227\u0220\u0003\u0002\u0002\u0002\u0228=\u0003\u0002",
    "\u0002\u0002\u0229\u022a\u0007$\u0002\u0002\u022a\u022b\u0005 \u0011",
    "\u0002\u022b\u0236\u0007,\u0002\u0002\u022c\u0231\u0005:\u001e\u0002",
    "\u022d\u022e\u0007!\u0002\u0002\u022e\u0230\u0005:\u001e\u0002\u022f",
    "\u022d\u0003\u0002\u0002\u0002\u0230\u0233\u0003\u0002\u0002\u0002\u0231",
    "\u022f\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232",
    "\u0235\u0003\u0002\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234",
    "\u022c\u0003\u0002\u0002\u0002\u0235\u0238\u0003\u0002\u0002\u0002\u0236",
    "\u0234\u0003\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237",
    "?\u0003\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002\u0239",
    "\u023e\u0005:\u001e\u0002\u023a\u023b\u0007!\u0002\u0002\u023b\u023d",
    "\u0005:\u001e\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023d\u0240",
    "\u0003\u0002\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023f",
    "\u0003\u0002\u0002\u0002\u023fA\u0003\u0002\u0002\u0002\u0240\u023e",
    "\u0003\u0002\u0002\u0002\u0241\u0242\u0005@!\u0002\u0242\u0243\u0007",
    "\u0002\u0002\u0003\u0243C\u0003\u0002\u0002\u0002\u0244\u0245\u0005",
    "8\u001d\u0002\u0245E\u0003\u0002\u0002\u0002\u0246\u0249\u0005J&\u0002",
    "\u0247\u0249\u0005H%\u0002\u0248\u0246\u0003\u0002\u0002\u0002\u0248",
    "\u0247\u0003\u0002\u0002\u0002\u0249G\u0003\u0002\u0002\u0002\u024a",
    "\u024b\u0007\u001f\u0002\u0002\u024b\u024c\u0005L\'\u0002\u024c\u024d",
    "\u0005N(\u0002\u024d\u024e\u0005P)\u0002\u024eI\u0003\u0002\u0002\u0002",
    "\u024f\u0250\u0007\u0010\u0002\u0002\u0250\u0251\u0005L\'\u0002\u0251",
    "\u0252\u0005N(\u0002\u0252\u0253\u0005P)\u0002\u0253K\u0003\u0002\u0002",
    "\u0002\u0254\u0257\u00054\u001b\u0002\u0255\u0257\u0005.\u0018\u0002",
    "\u0256\u0254\u0003\u0002\u0002\u0002\u0256\u0255\u0003\u0002\u0002\u0002",
    "\u0257M\u0003\u0002\u0002\u0002\u0258\u0263\u0007\'\u0002\u0002\u0259",
    "\u025e\u0005D#\u0002\u025a\u025b\u0007+\u0002\u0002\u025b\u025d\u0005",
    "D#\u0002\u025c\u025a\u0003\u0002\u0002\u0002\u025d\u0260\u0003\u0002",
    "\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002",
    "\u0002\u0002\u025f\u0262\u0003\u0002\u0002\u0002\u0260\u025e\u0003\u0002",
    "\u0002\u0002\u0261\u0259\u0003\u0002\u0002\u0002\u0262\u0265\u0003\u0002",
    "\u0002\u0002\u0263\u0261\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002",
    "\u0002\u0002\u0264\u0266\u0003\u0002\u0002\u0002\u0265\u0263\u0003\u0002",
    "\u0002\u0002\u0266\u0267\u0007(\u0002\u0002\u0267O\u0003\u0002\u0002",
    "\u0002\u0268\u026a\u0005@!\u0002\u0269\u0268\u0003\u0002\u0002\u0002",
    "\u0269\u026a\u0003\u0002\u0002\u0002\u026a\u026b\u0003\u0002\u0002\u0002",
    "\u026b\u026c\u0007\f\u0002\u0002\u026cQ\u0003\u0002\u0002\u0002\u026d",
    "\u026e\u0007\u0013\u0002\u0002\u026e\u026f\u00058\u001d\u0002\u026f",
    "\u0270\u0007.\u0002\u0002\u0270\u0271\u0005\u0014\u000b\u0002\u0271",
    "S\u0003\u0002\u0002\u0002\u0272\u0273\u0007\u000b\u0002\u0002\u0273",
    "\u0274\u0005\u0014\u000b\u0002\u0274\u0275\u0007,\u0002\u0002\u0275",
    "U\u0003\u0002\u0002\u0002\u0276\u0277\u0007\u000f\u0002\u0002\u0277",
    "\u0278\u00054\u001b\u0002\u0278\u0283\u0007\'\u0002\u0002\u0279\u027e",
    "\u0005D#\u0002\u027a\u027b\u0007+\u0002\u0002\u027b\u027d\u0005D#\u0002",
    "\u027c\u027a\u0003\u0002\u0002\u0002\u027d\u0280\u0003\u0002\u0002\u0002",
    "\u027e\u027c\u0003\u0002\u0002\u0002\u027e\u027f\u0003\u0002\u0002\u0002",
    "\u027f\u0282\u0003\u0002\u0002\u0002\u0280\u027e\u0003\u0002\u0002\u0002",
    "\u0281\u0279\u0003\u0002\u0002\u0002\u0282\u0285\u0003\u0002\u0002\u0002",
    "\u0283\u0281\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002\u0002\u0002",
    "\u0284\u0286\u0003\u0002\u0002\u0002\u0285\u0283\u0003\u0002\u0002\u0002",
    "\u0286\u0288\u0007(\u0002\u0002\u0287\u0289\u0005T+\u0002\u0288\u0287",
    "\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002\u0289\u028d",
    "\u0003\u0002\u0002\u0002\u028a\u028c\u0005R*\u0002\u028b\u028a\u0003",
    "\u0002\u0002\u0002\u028c\u028f\u0003\u0002\u0002\u0002\u028d\u028b\u0003",
    "\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002\u028e\u0293\u0003",
    "\u0002\u0002\u0002\u028f\u028d\u0003\u0002\u0002\u0002\u0290\u0292\u0005",
    "F$\u0002\u0291\u0290\u0003\u0002\u0002\u0002\u0292\u0295\u0003\u0002",
    "\u0002\u0002\u0293\u0291\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002",
    "\u0002\u0002\u0294W\u0003\u0002\u0002\u0002\u0295\u0293\u0003\u0002",
    "\u0002\u0002\u0296\u0297\u0007$\u0002\u0002\u0297\u02a1\u00054\u001b",
    "\u0002\u0298\u0299\u0007$\u0002\u0002\u0299\u029a\u00054\u001b\u0002",
    "\u029a\u029c\u0007\u001b\u0002\u0002\u029b\u029d\u0005\u0010\t\u0002",
    "\u029c\u029b\u0003\u0002\u0002\u0002\u029d\u029e\u0003\u0002\u0002\u0002",
    "\u029e\u029c\u0003\u0002\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002",
    "\u029f\u02a1\u0003\u0002\u0002\u0002\u02a0\u0296\u0003\u0002\u0002\u0002",
    "\u02a0\u0298\u0003\u0002\u0002\u0002\u02a1Y\u0003\u0002\u0002\u0002",
    "\u02a2\u02a3\u0007\b\u0002\u0002\u02a3\u02a5\u0005.\u0018\u0002\u02a4",
    "\u02a6\u00056\u001c\u0002\u02a5\u02a4\u0003\u0002\u0002\u0002\u02a5",
    "\u02a6\u0003\u0002\u0002\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7",
    "\u02a8\u0007.\u0002\u0002\u02a8\u02a9\u0005\u0014\u000b\u0002\u02a9",
    "\u02b5\u0003\u0002\u0002\u0002\u02aa\u02ab\u0007\u001a\u0002\u0002\u02ab",
    "\u02b5\u00054\u001b\u0002\u02ac\u02ad\u0007\u001a\u0002\u0002\u02ad",
    "\u02ae\u00054\u001b\u0002\u02ae\u02b0\u0007.\u0002\u0002\u02af\u02b1",
    "\u0005X-\u0002\u02b0\u02af\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003",
    "\u0002\u0002\u0002\u02b2\u02b0\u0003\u0002\u0002\u0002\u02b2\u02b3\u0003",
    "\u0002\u0002\u0002\u02b3\u02b5\u0003\u0002\u0002\u0002\u02b4\u02a2\u0003",
    "\u0002\u0002\u0002\u02b4\u02aa\u0003\u0002\u0002\u0002\u02b4\u02ac\u0003",
    "\u0002\u0002\u0002\u02b5[\u0003\u0002\u0002\u0002\u02b6\u02b7\u0007",
    "\u0006\u0002\u0002\u02b7\u02bb\u00054\u001b\u0002\u02b8\u02ba\u0005",
    "Z.\u0002\u02b9\u02b8\u0003\u0002\u0002\u0002\u02ba\u02bd\u0003\u0002",
    "\u0002\u0002\u02bb\u02b9\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002",
    "\u0002\u0002\u02bc]\u0003\u0002\u0002\u0002\u02bd\u02bb\u0003\u0002",
    "\u0002\u0002\u02be\u02bf\u0007\u0019\u0002\u0002\u02bf\u02c1\u00075",
    "\u0002\u0002\u02c0\u02c2\u0005b2\u0002\u02c1\u02c0\u0003\u0002\u0002",
    "\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002",
    "\u0002\u02c3\u02c4\u0005\\/\u0002\u02c4\u02c5\u0007\u0002\u0002\u0003",
    "\u02c5_\u0003\u0002\u0002\u0002\u02c6\u02cc\u00054\u001b\u0002\u02c7",
    "\u02c8\u00054\u001b\u0002\u02c8\u02c9\u0007\u001e\u0002\u0002\u02c9",
    "\u02ca\u00054\u001b\u0002\u02ca\u02cc\u0003\u0002\u0002\u0002\u02cb",
    "\u02c6\u0003\u0002\u0002\u0002\u02cb\u02c7\u0003\u0002\u0002\u0002\u02cc",
    "a\u0003\u0002\u0002\u0002\u02cd\u02d1\u0007\u0007\u0002\u0002\u02ce",
    "\u02d0\u0005`1\u0002\u02cf\u02ce\u0003\u0002\u0002\u0002\u02d0\u02d3",
    "\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002\u0002\u0002\u02d1\u02d2",
    "\u0003\u0002\u0002\u0002\u02d2c\u0003\u0002\u0002\u0002\u02d3\u02d1",
    "\u0003\u0002\u0002\u0002\u02d4\u02d5\u0007\u0019\u0002\u0002\u02d5\u02d7",
    "\u00075\u0002\u0002\u02d6\u02d8\u0005b2\u0002\u02d7\u02d6\u0003\u0002",
    "\u0002\u0002\u02d7\u02d8\u0003\u0002\u0002\u0002\u02d8\u02da\u0003\u0002",
    "\u0002\u0002\u02d9\u02db\u0005\\/\u0002\u02da\u02d9\u0003\u0002\u0002",
    "\u0002\u02da\u02db\u0003\u0002\u0002\u0002\u02db\u02dc\u0003\u0002\u0002",
    "\u0002\u02dc\u02dd\u0005V,\u0002\u02dd\u02de\u0007\u0002\u0002\u0003",
    "\u02dee\u0003\u0002\u0002\u0002Ggu\u0080\u008c\u0092\u0095\u00a3\u00a8",
    "\u00b7\u00be\u00cf\u00d6\u00e4\u00f1\u0105\u010b\u0115\u0120\u0127\u012c",
    "\u0138\u013a\u013e\u0149\u014f\u015e\u0161\u016a\u0179\u017e\u0182\u0192",
    "\u019c\u01a0\u01c0\u01c9\u01cf\u01d9\u01e2\u01ea\u01f2\u01f9\u0212\u021e",
    "\u0227\u0231\u0236\u023e\u0248\u0256\u025e\u0263\u0269\u027e\u0283\u0288",
    "\u028d\u0293\u029e\u02a0\u02a5\u02b2\u02b4\u02bb\u02c1\u02cb\u02d1\u02d7",
    "\u02da"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class scillaParser extends antlr4.Parser {

    static grammarFileName = "scilla.g4";
    static literalNames = [ null, "'-'", "'forall'", "'builtin'", "'library'", 
                            "'import'", "'let'", "'in'", "'match'", "'with'", 
                            "'end'", "'fun'", "'tfun'", "'contract'", "'transition'", 
                            "'send'", "'event'", "'field'", "'accept'", 
                            "'exists'", "'delete'", "'Emp'", "'Map'", "'scilla_version'", 
                            "'type'", "'of'", "'try'", "'catch'", "'as'", 
                            "'procedure'", "'throw'", "';'", "':'", "'.'", 
                            "'|'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
                            "','", "'=>'", "'->'", "'='", "'&'", "'<-'", 
                            "':='", "'@'", "'_'", null, null, null, null, 
                            null, null, "'Event'" ];
    static symbolicNames = [ null, null, "FORALL", "BUILTIN", "LIBRARY", 
                             "IMPORT", "LET", "IN", "MATCH", "WITH", "END", 
                             "FUN", "TFUN", "CONTRACT", "TRANSITION", "SEND", 
                             "EVENT", "FIELD", "ACCEPT", "EXISTS", "DELETE", 
                             "EMP", "MAP", "SCILLA_VERSION", "TYPE", "OF", 
                             "TRY", "CATCH", "AS", "PROCEDURE", "THROW", 
                             "SEMICOLON", "COLON", "PERIOD", "BAR", "LSQB", 
                             "RSQB", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                             "COMMA", "ARROW", "TARROW", "EQ", "AND", "FETCH", 
                             "ASSIGN", "AT", "UNDERSCORE", "BlockComment", 
                             "NUMBER", "STRING", "FLOAT", "HEX", "BYSTR", 
                             "EVENT_TY", "WS", "TOSKIP", "ID", "SPID", "CID", 
                             "TID" ];
    static ruleNames = [ "int_", "t_map_key", "t_map_value_args", "t_map_value", 
                         "t_map_value_allow_targs", "address_typ", "typ", 
                         "targ", "address_type_field", "exp", "simple_exp", 
                         "atomic_exp", "lit", "ctargs", "map_access", "pattern", 
                         "arg_pattern", "exp_pm_clause", "msg_entry", "builtin_args", 
                         "exp_term", "type_term", "identifier", "sid", "scid", 
                         "cid", "type_annot", "id_with_typ", "stmt", "remote_fetch_stmt", 
                         "stmt_pm_clause", "stmts", "stmts_term", "param_pair", 
                         "component", "procedure", "transition", "component_id", 
                         "component_params", "component_body", "field", 
                         "with_constraint", "contract", "tconstr", "libentry", 
                         "library", "lmodule", "importname", "imports", 
                         "cmodule" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = scillaParser.ruleNames;
        this.literalNames = scillaParser.literalNames;
        this.symbolicNames = scillaParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 6:
    	    		return this.typ_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    typ_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 5);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	int_() {
	    let localctx = new Int_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, scillaParser.RULE_int_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===scillaParser.T__0) {
	            this.state = 100;
	            this.match(scillaParser.T__0);
	        }

	        this.state = 103;
	        this.match(scillaParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_key() {
	    let localctx = new T_map_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, scillaParser.RULE_t_map_key);
	    try {
	        this.state = 115;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 105;
	            localctx.kt_to_map = this.scid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 106;
	            this.match(scillaParser.LPAREN);
	            this.state = 107;
	            localctx.kt_to_map = this.scid();
	            this.state = 108;
	            this.match(scillaParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 110;
	            this.match(scillaParser.LPAREN);
	            this.state = 111;
	            localctx.kt = this.address_typ();
	            this.state = 112;
	            this.match(scillaParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 114;
	            localctx.kt = this.address_typ();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_value_args() {
	    let localctx = new T_map_value_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, scillaParser.RULE_t_map_value_args);
	    try {
	        this.state = 126;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.LPAREN:
	            localctx = new TMP3Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 117;
	            this.match(scillaParser.LPAREN);
	            this.state = 118;
	            localctx.t = this.t_map_value_allow_targs();
	            this.state = 119;
	            this.match(scillaParser.RPAREN);
	            break;
	        case scillaParser.HEX:
	        case scillaParser.BYSTR:
	        case scillaParser.CID:
	            localctx = new TMP4Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 121;
	            localctx.d = this.scid();
	            break;
	        case scillaParser.MAP:
	            localctx = new TMP5Context(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 122;
	            this.match(scillaParser.MAP);
	            this.state = 123;
	            localctx.k = this.t_map_key();
	            this.state = 124;
	            localctx.v = this.t_map_value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_value() {
	    let localctx = new T_map_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, scillaParser.RULE_t_map_value);
	    try {
	        this.state = 138;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TMPScidContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 128;
	            localctx.d = this.scid();
	            break;

	        case 2:
	            localctx = new TMPMapContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 129;
	            this.match(scillaParser.MAP);
	            this.state = 130;
	            localctx.k = this.t_map_key();
	            this.state = 131;
	            localctx.v = this.t_map_value();
	            break;

	        case 3:
	            localctx = new TMPParenContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 133;
	            this.match(scillaParser.LPAREN);
	            this.state = 134;
	            localctx.t = this.t_map_value_allow_targs();
	            this.state = 135;
	            this.match(scillaParser.RPAREN);
	            break;

	        case 4:
	            localctx = new TMPAddrContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 137;
	            localctx.vt = this.address_typ();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_value_allow_targs() {
	    let localctx = new T_map_value_allow_targsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, scillaParser.RULE_t_map_value_allow_targs);
	    var _la = 0; // Token type
	    try {
	        this.state = 147;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TMP1Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 140;
	            localctx.d = this.scid();
	            this.state = 142; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 141;
	                localctx._t_map_value_args = this.t_map_value_args();
	                localctx.t_args.push(localctx._t_map_value_args);
	                this.state = 144; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.MAP || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (scillaParser.LPAREN - 37)) | (1 << (scillaParser.HEX - 37)) | (1 << (scillaParser.BYSTR - 37)) | (1 << (scillaParser.CID - 37)))) !== 0));
	            break;

	        case 2:
	            localctx = new TMP2Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 146;
	            this.t_map_value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	address_typ() {
	    let localctx = new Address_typContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, scillaParser.RULE_address_typ);
	    var _la = 0; // Token type
	    try {
	        this.state = 181;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AnyAdressContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 149;
	            localctx.d = this.cid();
	            this.state = 150;
	            this.match(scillaParser.WITH);
	            this.state = 151;
	            this.match(scillaParser.END);
	            break;

	        case 2:
	            localctx = new ContrAddrContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 153;
	            localctx.d = this.cid();
	            this.state = 154;
	            this.match(scillaParser.WITH);
	            this.state = 155;
	            this.match(scillaParser.CONTRACT);
	            this.state = 166;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===scillaParser.FIELD) {
	                this.state = 156;
	                localctx._address_type_field = this.address_type_field();
	                localctx.fs.push(localctx._address_type_field);
	                this.state = 161;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===scillaParser.COMMA) {
	                    this.state = 157;
	                    this.match(scillaParser.COMMA);
	                    this.state = 158;
	                    localctx._address_type_field = this.address_type_field();
	                    localctx.fs.push(localctx._address_type_field);
	                    this.state = 163;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 168;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 169;
	            this.match(scillaParser.END);
	            break;

	        case 3:
	            localctx = new LibAddrContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 171;
	            localctx.d = this.cid();
	            this.state = 172;
	            this.match(scillaParser.WITH);
	            this.state = 173;
	            this.match(scillaParser.LIBRARY);
	            this.state = 174;
	            this.match(scillaParser.END);
	            break;

	        case 4:
	            localctx = new CodeAddrContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 176;
	            localctx.d = this.cid();
	            this.state = 177;
	            this.match(scillaParser.WITH);
	            this.state = 178;
	            localctx.c = this.match(scillaParser.SPID);
	            this.state = 179;
	            this.match(scillaParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typ(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 12;
	    this.enterRecursionRule(localctx, 12, scillaParser.RULE_typ, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 205;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PrimorADTTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 184;
	            localctx.d = this.scid();
	            this.state = 188;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 185;
	                    localctx._targ = this.targ();
	                    localctx.targs.push(localctx._targ); 
	                }
	                this.state = 190;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new MapTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 191;
	            this.match(scillaParser.MAP);
	            this.state = 192;
	            localctx.k = this.t_map_key();
	            this.state = 193;
	            localctx.v = this.t_map_value();
	            break;

	        case 3:
	            localctx = new ParenTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 195;
	            this.match(scillaParser.LPAREN);
	            this.state = 196;
	            localctx.t = this.typ(0);
	            this.state = 197;
	            this.match(scillaParser.RPAREN);
	            break;

	        case 4:
	            localctx = new AddrTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 199;
	            localctx.t_to_map = this.address_typ();
	            break;

	        case 5:
	            localctx = new PolyFunTyContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 200;
	            this.match(scillaParser.FORALL);
	            this.state = 201;
	            localctx.tv = this.match(scillaParser.TID);
	            this.state = 202;
	            this.match(scillaParser.PERIOD);
	            this.state = 203;
	            localctx.t = this.typ(2);
	            break;

	        case 6:
	            localctx = new TypeVarTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 204;
	            localctx.t_var = this.match(scillaParser.TID);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 212;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new FunTypeContext(this, new TypContext(this, _parentctx, _parentState));
	                localctx.t1 = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, scillaParser.RULE_typ);
	                this.state = 207;
	                if (!( this.precpred(this._ctx, 5))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                }
	                this.state = 208;
	                this.match(scillaParser.TARROW);
	                this.state = 209;
	                localctx.t2 = this.typ(6); 
	            }
	            this.state = 214;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	targ() {
	    let localctx = new TargContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, scillaParser.RULE_targ);
	    try {
	        this.state = 226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TypTargContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 215;
	            this.match(scillaParser.LPAREN);
	            this.state = 216;
	            localctx.t = this.typ(0);
	            this.state = 217;
	            this.match(scillaParser.RPAREN);
	            break;

	        case 2:
	            localctx = new ScidTargContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 219;
	            localctx.d = this.scid();
	            break;

	        case 3:
	            localctx = new TvarTargContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 220;
	            localctx.t_var = this.match(scillaParser.TID);
	            break;

	        case 4:
	            localctx = new AddrTargContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 221;
	            localctx.t_to_map = this.address_typ();
	            break;

	        case 5:
	            localctx = new MapTargContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 222;
	            this.match(scillaParser.MAP);
	            this.state = 223;
	            localctx.k = this.t_map_key();
	            this.state = 224;
	            localctx.v = this.t_map_value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	address_type_field() {
	    let localctx = new Address_type_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, scillaParser.RULE_address_type_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 228;
	        this.match(scillaParser.FIELD);
	        this.state = 229;
	        localctx.id = this.identifier();
	        this.state = 230;
	        this.match(scillaParser.COLON);
	        this.state = 231;
	        localctx.ty = this.typ(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exp() {
	    let localctx = new ExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, scillaParser.RULE_exp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 233;
	        localctx.f = this.simple_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_exp() {
	    let localctx = new Simple_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, scillaParser.RULE_simple_exp);
	    var _la = 0; // Token type
	    try {
	        this.state = 312;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LetContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 235;
	            this.match(scillaParser.LET);
	            this.state = 236;
	            localctx.x = this.identifier();
	            this.state = 239;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===scillaParser.COLON) {
	                this.state = 237;
	                this.match(scillaParser.COLON);
	                this.state = 238;
	                localctx.ty = this.typ(0);
	            }

	            this.state = 241;
	            this.match(scillaParser.EQ);
	            this.state = 242;
	            localctx.f = this.simple_exp();
	            this.state = 243;
	            this.match(scillaParser.IN);
	            this.state = 244;
	            localctx.e = this.exp();
	            break;

	        case 2:
	            localctx = new FunContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 246;
	            this.match(scillaParser.FUN);
	            this.state = 247;
	            this.match(scillaParser.LPAREN);
	            this.state = 248;
	            localctx.id = this.identifier();
	            this.state = 249;
	            this.match(scillaParser.COLON);
	            this.state = 250;
	            localctx.ty = this.typ(0);
	            this.state = 251;
	            this.match(scillaParser.RPAREN);
	            this.state = 252;
	            this.match(scillaParser.ARROW);
	            this.state = 253;
	            localctx.e = this.exp();
	            break;

	        case 3:
	            localctx = new AppContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 255;
	            localctx.f_var = this.sid();
	            this.state = 257; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 256;
	            		localctx._sid = this.sid();
	            		localctx.args.push(localctx._sid);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 259; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,14, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 4:
	            localctx = new AtomicContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 261;
	            localctx.a = this.atomic_exp();
	            break;

	        case 5:
	            localctx = new BuiltinContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 262;
	            this.match(scillaParser.BUILTIN);
	            this.state = 263;
	            localctx.b = this.identifier();
	            this.state = 265;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===scillaParser.LBRACE) {
	                this.state = 264;
	                localctx.targs = this.ctargs();
	            }

	            this.state = 267;
	            localctx.xs = this.builtin_args();
	            break;

	        case 6:
	            localctx = new MessageContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 269;
	            this.match(scillaParser.LBRACE);
	            this.state = 270;
	            localctx._msg_entry = this.msg_entry();
	            localctx.es.push(localctx._msg_entry);
	            this.state = 275;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===scillaParser.SEMICOLON) {
	                this.state = 271;
	                this.match(scillaParser.SEMICOLON);
	                this.state = 272;
	                localctx._msg_entry = this.msg_entry();
	                localctx.es.push(localctx._msg_entry);
	                this.state = 277;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 278;
	            this.match(scillaParser.RBRACE);
	            break;

	        case 7:
	            localctx = new MatchContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 280;
	            this.match(scillaParser.MATCH);
	            this.state = 281;
	            localctx.x_sid = this.sid();
	            this.state = 282;
	            this.match(scillaParser.WITH);
	            this.state = 286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===scillaParser.BAR) {
	                this.state = 283;
	                localctx._exp_pm_clause = this.exp_pm_clause();
	                localctx.cs.push(localctx._exp_pm_clause);
	                this.state = 288;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 289;
	            this.match(scillaParser.END);
	            break;

	        case 8:
	            localctx = new DataConstructorAppContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 291;
	            localctx.c = this.scid();
	            this.state = 293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===scillaParser.LBRACE) {
	                this.state = 292;
	                localctx.ts = this.ctargs();
	            }

	            this.state = 298;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 295;
	                    localctx._sid = this.sid();
	                    localctx.args.push(localctx._sid); 
	                }
	                this.state = 300;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
	            }

	            break;

	        case 9:
	            localctx = new TFunContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 301;
	            this.match(scillaParser.TFUN);
	            this.state = 302;
	            localctx.i = this.match(scillaParser.TID);
	            this.state = 303;
	            this.match(scillaParser.ARROW);
	            this.state = 304;
	            localctx.e = this.exp();
	            break;

	        case 10:
	            localctx = new TAppContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 305;
	            this.match(scillaParser.AT);
	            this.state = 306;
	            localctx.f = this.sid();
	            this.state = 308; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 307;
	            		localctx._targ = this.targ();
	            		localctx.targs.push(localctx._targ);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 310; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,20, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_exp() {
	    let localctx = new Atomic_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, scillaParser.RULE_atomic_exp);
	    try {
	        this.state = 316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AtomicSidContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 314;
	            localctx.i = this.sid();
	            break;

	        case 2:
	            localctx = new AtomicLitContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 315;
	            localctx.l = this.lit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lit() {
	    let localctx = new LitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, scillaParser.RULE_lit);
	    try {
	        this.state = 327;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.BYSTR:
	        case scillaParser.CID:
	            localctx = new LitIntContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 318;
	            localctx.i = this.cid();
	            this.state = 319;
	            localctx.i_int = this.int_();
	            break;
	        case scillaParser.HEX:
	            localctx = new LitHexContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 321;
	            localctx.h = this.match(scillaParser.HEX);
	            break;
	        case scillaParser.STRING:
	            localctx = new LitStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 322;
	            localctx.s = this.match(scillaParser.STRING);
	            break;
	        case scillaParser.EMP:
	            localctx = new LitEmpContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 323;
	            this.match(scillaParser.EMP);
	            this.state = 324;
	            localctx.kt = this.t_map_key();
	            this.state = 325;
	            localctx.vt = this.t_map_value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ctargs() {
	    let localctx = new CtargsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, scillaParser.RULE_ctargs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 329;
	        this.match(scillaParser.LBRACE);
	        this.state = 333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.MAP || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (scillaParser.LPAREN - 37)) | (1 << (scillaParser.HEX - 37)) | (1 << (scillaParser.BYSTR - 37)) | (1 << (scillaParser.CID - 37)) | (1 << (scillaParser.TID - 37)))) !== 0)) {
	            this.state = 330;
	            localctx._targ = this.targ();
	            localctx.ts.push(localctx._targ);
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 336;
	        this.match(scillaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	map_access() {
	    let localctx = new Map_accessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, scillaParser.RULE_map_access);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 338;
	        this.match(scillaParser.LSQB);
	        this.state = 339;
	        localctx.i = this.sid();
	        this.state = 340;
	        this.match(scillaParser.RSQB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, scillaParser.RULE_pattern);
	    var _la = 0; // Token type
	    try {
	        this.state = 351;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.UNDERSCORE:
	            localctx = new WildcardContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 342;
	            this.match(scillaParser.UNDERSCORE);
	            break;
	        case scillaParser.ID:
	            localctx = new BinderContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 343;
	            localctx.x = this.identifier();
	            break;
	        case scillaParser.HEX:
	        case scillaParser.BYSTR:
	        case scillaParser.CID:
	            localctx = new ConstructorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 344;
	            localctx.c = this.scid();
	            this.state = 348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (scillaParser.LPAREN - 37)) | (1 << (scillaParser.UNDERSCORE - 37)) | (1 << (scillaParser.HEX - 37)) | (1 << (scillaParser.BYSTR - 37)) | (1 << (scillaParser.ID - 37)) | (1 << (scillaParser.CID - 37)))) !== 0)) {
	                this.state = 345;
	                localctx._arg_pattern = this.arg_pattern();
	                localctx.ps.push(localctx._arg_pattern);
	                this.state = 350;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_pattern() {
	    let localctx = new Arg_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, scillaParser.RULE_arg_pattern);
	    try {
	        this.state = 360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.UNDERSCORE:
	            localctx = new WildcardArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 353;
	            this.match(scillaParser.UNDERSCORE);
	            break;
	        case scillaParser.ID:
	            localctx = new BinderArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 354;
	            localctx.x = this.identifier();
	            break;
	        case scillaParser.HEX:
	        case scillaParser.BYSTR:
	        case scillaParser.CID:
	            localctx = new ConstructorArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 355;
	            localctx.c = this.scid();
	            break;
	        case scillaParser.LPAREN:
	            localctx = new PatternArgContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 356;
	            this.match(scillaParser.LPAREN);
	            this.state = 357;
	            localctx.p = this.pattern();
	            this.state = 358;
	            this.match(scillaParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exp_pm_clause() {
	    let localctx = new Exp_pm_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, scillaParser.RULE_exp_pm_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(scillaParser.BAR);
	        this.state = 363;
	        localctx.p = this.pattern();
	        this.state = 364;
	        this.match(scillaParser.ARROW);
	        this.state = 365;
	        localctx.e = this.exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	msg_entry() {
	    let localctx = new Msg_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, scillaParser.RULE_msg_entry);
	    try {
	        this.state = 375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 367;
	            localctx.i = this.sid();
	            this.state = 368;
	            this.match(scillaParser.COLON);
	            this.state = 369;
	            localctx.l = this.lit();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 371;
	            localctx.i = this.sid();
	            this.state = 372;
	            this.match(scillaParser.COLON);
	            this.state = 373;
	            localctx.v = this.sid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtin_args() {
	    let localctx = new Builtin_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, scillaParser.RULE_builtin_args);
	    try {
	        this.state = 384;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.BYSTR:
	        case scillaParser.ID:
	        case scillaParser.SPID:
	        case scillaParser.CID:
	            localctx = new BuiltinArgsSidContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 378; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 377;
	            		localctx._sid = this.sid();
	            		localctx.args.push(localctx._sid);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 380; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,29, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case scillaParser.LPAREN:
	            localctx = new BuildinArgsParenContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 382;
	            this.match(scillaParser.LPAREN);
	            this.state = 383;
	            this.match(scillaParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exp_term() {
	    let localctx = new Exp_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, scillaParser.RULE_exp_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 386;
	        localctx.e = this.exp();
	        this.state = 387;
	        this.match(scillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_term() {
	    let localctx = new Type_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, scillaParser.RULE_type_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 389;
	        localctx.t = this.typ(0);
	        this.state = 390;
	        this.match(scillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, scillaParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 392;
	        this.match(scillaParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sid() {
	    let localctx = new SidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, scillaParser.RULE_sid);
	    try {
	        this.state = 400;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.ID:
	            localctx = new SidNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 394;
	            localctx.name = this.identifier();
	            break;
	        case scillaParser.SPID:
	            localctx = new SidSPIDContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 395;
	            localctx.name_spid = this.match(scillaParser.SPID);
	            break;
	        case scillaParser.BYSTR:
	        case scillaParser.CID:
	            localctx = new SidCidContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 396;
	            localctx.ns = this.cid();
	            this.state = 397;
	            this.match(scillaParser.PERIOD);
	            this.state = 398;
	            localctx.name = this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scid() {
	    let localctx = new ScidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, scillaParser.RULE_scid);
	    try {
	        this.state = 410;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ScidNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 402;
	            localctx.name = this.cid();
	            break;

	        case 2:
	            localctx = new ScidCidContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 403;
	            localctx.ns = this.cid();
	            this.state = 404;
	            this.match(scillaParser.PERIOD);
	            this.state = 405;
	            localctx.name = this.cid();
	            break;

	        case 3:
	            localctx = new ScidHexContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 407;
	            localctx.ns_hex = this.match(scillaParser.HEX);
	            this.state = 408;
	            this.match(scillaParser.PERIOD);
	            this.state = 409;
	            localctx.name = this.cid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cid() {
	    let localctx = new CidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, scillaParser.RULE_cid);
	    try {
	        this.state = 414;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.CID:
	            localctx = new CidCidContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 412;
	            localctx.id = this.match(scillaParser.CID);
	            break;
	        case scillaParser.BYSTR:
	            localctx = new CidBystrContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 413;
	            localctx.bystr = this.match(scillaParser.BYSTR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_annot() {
	    let localctx = new Type_annotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, scillaParser.RULE_type_annot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 416;
	        this.match(scillaParser.COLON);
	        this.state = 417;
	        localctx.t = this.typ(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_with_typ() {
	    let localctx = new Id_with_typContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, scillaParser.RULE_id_with_typ);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        localctx.n = this.identifier();
	        this.state = 420;
	        localctx.t = this.type_annot();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, scillaParser.RULE_stmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 503;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LoadContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 422;
	            localctx.l = this.identifier();
	            this.state = 423;
	            this.match(scillaParser.FETCH);
	            this.state = 424;
	            localctx.r = this.sid();
	            break;

	        case 2:
	            localctx = new RemoteFetchContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 426;
	            localctx.r = this.remote_fetch_stmt();
	            break;

	        case 3:
	            localctx = new StoreContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 427;
	            localctx.l = this.identifier();
	            this.state = 428;
	            this.match(scillaParser.ASSIGN);
	            this.state = 429;
	            localctx.r = this.sid();
	            break;

	        case 4:
	            localctx = new BindContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 431;
	            localctx.l = this.identifier();
	            this.state = 432;
	            this.match(scillaParser.EQ);
	            this.state = 433;
	            localctx.r = this.exp();
	            break;

	        case 5:
	            localctx = new ReadFromBCContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 435;
	            localctx.l = this.identifier();
	            this.state = 436;
	            this.match(scillaParser.FETCH);
	            this.state = 437;
	            this.match(scillaParser.AND);
	            this.state = 438;
	            localctx.c = this.cid();
	            break;

	        case 6:
	            localctx = new MapGetContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 440;
	            localctx.l = this.identifier();
	            this.state = 441;
	            this.match(scillaParser.FETCH);
	            this.state = 442;
	            localctx.r = this.identifier();
	            this.state = 444; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 443;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 446; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.LSQB);
	            break;

	        case 7:
	            localctx = new MapGetExistsContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 448;
	            localctx.l = this.identifier();
	            this.state = 449;
	            this.match(scillaParser.FETCH);
	            this.state = 450;
	            this.match(scillaParser.EXISTS);
	            this.state = 451;
	            localctx.r = this.identifier();
	            this.state = 453; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 452;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 455; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.LSQB);
	            break;

	        case 8:
	            localctx = new MapUpdateContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 457;
	            localctx.l = this.identifier();
	            this.state = 459; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 458;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 461; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.LSQB);
	            this.state = 463;
	            this.match(scillaParser.ASSIGN);
	            this.state = 464;
	            localctx.r = this.sid();
	            break;

	        case 9:
	            localctx = new MapUpdateDeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 466;
	            this.match(scillaParser.DELETE);
	            this.state = 467;
	            localctx.l = this.identifier();
	            this.state = 469; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 468;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 471; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.LSQB);
	            break;

	        case 10:
	            localctx = new AcceptContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 473;
	            this.match(scillaParser.ACCEPT);
	            break;

	        case 11:
	            localctx = new SendContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 474;
	            this.match(scillaParser.SEND);
	            this.state = 475;
	            localctx.m = this.sid();
	            break;

	        case 12:
	            localctx = new CreateEvntContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 476;
	            this.match(scillaParser.EVENT);
	            this.state = 477;
	            localctx.m = this.sid();
	            break;

	        case 13:
	            localctx = new ThrowContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 478;
	            this.match(scillaParser.THROW);
	            this.state = 480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 479;
	                localctx.mopt = this.sid();

	            }
	            break;

	        case 14:
	            localctx = new MatchStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 482;
	            this.match(scillaParser.MATCH);
	            this.state = 483;
	            localctx.x = this.sid();
	            this.state = 484;
	            this.match(scillaParser.WITH);
	            this.state = 486; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 485;
	                localctx._stmt_pm_clause = this.stmt_pm_clause();
	                localctx.cs.push(localctx._stmt_pm_clause);
	                this.state = 488; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.BAR);
	            this.state = 490;
	            this.match(scillaParser.END);
	            break;

	        case 15:
	            localctx = new CallProcContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 492;
	            localctx.p = this.component_id();
	            this.state = 496;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 493;
	                    localctx._sid = this.sid();
	                    localctx.args.push(localctx._sid); 
	                }
	                this.state = 498;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	            }

	            break;

	        case 16:
	            localctx = new IterateContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 499;
	            this.match(scillaParser.FORALL);
	            this.state = 500;
	            localctx.l = this.sid();
	            this.state = 501;
	            localctx.p = this.component_id();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remote_fetch_stmt() {
	    let localctx = new Remote_fetch_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, scillaParser.RULE_remote_fetch_stmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new RemoteLoadSidContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 505;
	            localctx.l = this.identifier();
	            this.state = 506;
	            this.match(scillaParser.FETCH);
	            this.state = 507;
	            this.match(scillaParser.AND);
	            this.state = 508;
	            localctx.adr_id = this.identifier();
	            this.state = 509;
	            this.match(scillaParser.PERIOD);
	            this.state = 510;
	            localctx.r = this.sid();
	            break;

	        case 2:
	            localctx = new RemoteLoadSpidContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 512;
	            localctx.l = this.identifier();
	            this.state = 513;
	            this.match(scillaParser.FETCH);
	            this.state = 514;
	            this.match(scillaParser.AND);
	            this.state = 515;
	            localctx.adr_id = this.match(scillaParser.SPID);
	            this.state = 516;
	            this.match(scillaParser.PERIOD);
	            this.state = 517;
	            localctx.r = this.match(scillaParser.SPID);
	            break;

	        case 3:
	            localctx = new RemoteMapGetTrueContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 519;
	            localctx.l = this.identifier();
	            this.state = 520;
	            this.match(scillaParser.FETCH);
	            this.state = 521;
	            this.match(scillaParser.AND);
	            this.state = 522;
	            localctx.adr_id = this.identifier();
	            this.state = 523;
	            this.match(scillaParser.PERIOD);
	            this.state = 524;
	            localctx.r_id = this.identifier();
	            this.state = 526; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 525;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 528; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.LSQB);
	            break;

	        case 4:
	            localctx = new RemoteMapGetFalseContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 530;
	            localctx.l = this.identifier();
	            this.state = 531;
	            this.match(scillaParser.FETCH);
	            this.state = 532;
	            this.match(scillaParser.AND);
	            this.state = 533;
	            this.match(scillaParser.EXISTS);
	            this.state = 534;
	            localctx.adr_id = this.identifier();
	            this.state = 535;
	            this.match(scillaParser.PERIOD);
	            this.state = 536;
	            localctx.r_id = this.identifier();
	            this.state = 538; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 537;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 540; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.LSQB);
	            break;

	        case 5:
	            localctx = new TypeCastContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 542;
	            localctx.l = this.identifier();
	            this.state = 543;
	            this.match(scillaParser.FETCH);
	            this.state = 544;
	            this.match(scillaParser.AND);
	            this.state = 545;
	            localctx.adr = this.sid();
	            this.state = 546;
	            this.match(scillaParser.AS);
	            this.state = 547;
	            localctx.t = this.address_typ();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_pm_clause() {
	    let localctx = new Stmt_pm_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, scillaParser.RULE_stmt_pm_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.match(scillaParser.BAR);
	        this.state = 552;
	        localctx.p = this.pattern();
	        this.state = 553;
	        this.match(scillaParser.ARROW);
	        this.state = 564;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << scillaParser.FORALL) | (1 << scillaParser.MATCH) | (1 << scillaParser.SEND) | (1 << scillaParser.EVENT) | (1 << scillaParser.ACCEPT) | (1 << scillaParser.DELETE) | (1 << scillaParser.THROW))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (scillaParser.BYSTR - 55)) | (1 << (scillaParser.ID - 55)) | (1 << (scillaParser.CID - 55)))) !== 0)) {
	            this.state = 554;
	            localctx._stmt = this.stmt();
	            localctx.ss.push(localctx._stmt);
	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===scillaParser.SEMICOLON) {
	                this.state = 555;
	                this.match(scillaParser.SEMICOLON);
	                this.state = 556;
	                localctx._stmt = this.stmt();
	                localctx.ss.push(localctx._stmt);
	                this.state = 561;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmts() {
	    let localctx = new StmtsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, scillaParser.RULE_stmts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 567;
	        localctx._stmt = this.stmt();
	        localctx.ss.push(localctx._stmt);
	        this.state = 572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.SEMICOLON) {
	            this.state = 568;
	            this.match(scillaParser.SEMICOLON);
	            this.state = 569;
	            localctx._stmt = this.stmt();
	            localctx.ss.push(localctx._stmt);
	            this.state = 574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmts_term() {
	    let localctx = new Stmts_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, scillaParser.RULE_stmts_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 575;
	        localctx.ss = this.stmts();
	        this.state = 576;
	        this.match(scillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_pair() {
	    let localctx = new Param_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, scillaParser.RULE_param_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 578;
	        localctx.iwt = this.id_with_typ();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component() {
	    let localctx = new ComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, scillaParser.RULE_component);
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.TRANSITION:
	            localctx = new TransitionCompContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 580;
	            localctx.t = this.transition();
	            break;
	        case scillaParser.PROCEDURE:
	            localctx = new ProcedureCompContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 581;
	            localctx.p = this.procedure();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure() {
	    let localctx = new ProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, scillaParser.RULE_procedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 584;
	        this.match(scillaParser.PROCEDURE);
	        this.state = 585;
	        localctx.t = this.component_id();
	        this.state = 586;
	        localctx.params = this.component_params();
	        this.state = 587;
	        localctx.ss = this.component_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transition() {
	    let localctx = new TransitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, scillaParser.RULE_transition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 589;
	        this.match(scillaParser.TRANSITION);
	        this.state = 590;
	        localctx.t = this.component_id();
	        this.state = 591;
	        localctx.params = this.component_params();
	        this.state = 592;
	        localctx.ss = this.component_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_id() {
	    let localctx = new Component_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, scillaParser.RULE_component_id);
	    try {
	        this.state = 596;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case scillaParser.BYSTR:
	        case scillaParser.CID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 594;
	            localctx.c = this.cid();
	            break;
	        case scillaParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 595;
	            localctx.i = this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_params() {
	    let localctx = new Component_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, scillaParser.RULE_component_params);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(scillaParser.LPAREN);
	        this.state = 609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.ID) {
	            this.state = 599;
	            localctx._param_pair = this.param_pair();
	            localctx.params.push(localctx._param_pair);
	            this.state = 604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===scillaParser.COMMA) {
	                this.state = 600;
	                this.match(scillaParser.COMMA);
	                this.state = 601;
	                localctx._param_pair = this.param_pair();
	                localctx.params.push(localctx._param_pair);
	                this.state = 606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 612;
	        this.match(scillaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_body() {
	    let localctx = new Component_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, scillaParser.RULE_component_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << scillaParser.FORALL) | (1 << scillaParser.MATCH) | (1 << scillaParser.SEND) | (1 << scillaParser.EVENT) | (1 << scillaParser.ACCEPT) | (1 << scillaParser.DELETE) | (1 << scillaParser.THROW))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (scillaParser.BYSTR - 55)) | (1 << (scillaParser.ID - 55)) | (1 << (scillaParser.CID - 55)))) !== 0)) {
	            this.state = 614;
	            localctx.ss = this.stmts();
	        }

	        this.state = 617;
	        this.match(scillaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, scillaParser.RULE_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 619;
	        this.match(scillaParser.FIELD);
	        this.state = 620;
	        localctx.iwt = this.id_with_typ();
	        this.state = 621;
	        this.match(scillaParser.EQ);
	        this.state = 622;
	        localctx.rhs = this.exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_constraint() {
	    let localctx = new With_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, scillaParser.RULE_with_constraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 624;
	        this.match(scillaParser.WITH);
	        this.state = 625;
	        localctx.f = this.exp();
	        this.state = 626;
	        this.match(scillaParser.ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contract() {
	    let localctx = new ContractContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, scillaParser.RULE_contract);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 628;
	        this.match(scillaParser.CONTRACT);
	        this.state = 629;
	        localctx.c = this.cid();
	        this.state = 630;
	        this.match(scillaParser.LPAREN);
	        this.state = 641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.ID) {
	            this.state = 631;
	            localctx._param_pair = this.param_pair();
	            localctx.params.push(localctx._param_pair);
	            this.state = 636;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===scillaParser.COMMA) {
	                this.state = 632;
	                this.match(scillaParser.COMMA);
	                this.state = 633;
	                localctx._param_pair = this.param_pair();
	                localctx.params.push(localctx._param_pair);
	                this.state = 638;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 644;
	        this.match(scillaParser.RPAREN);
	        this.state = 646;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===scillaParser.WITH) {
	            this.state = 645;
	            localctx.ct = this.with_constraint();
	        }

	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.FIELD) {
	            this.state = 648;
	            localctx._field = this.field();
	            localctx.fs.push(localctx._field);
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.TRANSITION || _la===scillaParser.PROCEDURE) {
	            this.state = 654;
	            localctx._component = this.component();
	            localctx.comps.push(localctx._component);
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tconstr() {
	    let localctx = new TconstrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, scillaParser.RULE_tconstr);
	    var _la = 0; // Token type
	    try {
	        this.state = 670;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 660;
	            this.match(scillaParser.BAR);
	            this.state = 661;
	            localctx.tn = this.cid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 662;
	            this.match(scillaParser.BAR);
	            this.state = 663;
	            localctx.tn = this.cid();
	            this.state = 664;
	            this.match(scillaParser.OF);
	            this.state = 666; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 665;
	                localctx._targ = this.targ();
	                localctx.t.push(localctx._targ);
	                this.state = 668; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.MAP || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (scillaParser.LPAREN - 37)) | (1 << (scillaParser.HEX - 37)) | (1 << (scillaParser.BYSTR - 37)) | (1 << (scillaParser.CID - 37)) | (1 << (scillaParser.TID - 37)))) !== 0));
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libentry() {
	    let localctx = new LibentryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, scillaParser.RULE_libentry);
	    var _la = 0; // Token type
	    try {
	        this.state = 690;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LibVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 672;
	            this.match(scillaParser.LET);
	            this.state = 673;
	            localctx.ns = this.identifier();
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===scillaParser.COLON) {
	                this.state = 674;
	                localctx.t = this.type_annot();
	            }

	            this.state = 677;
	            this.match(scillaParser.EQ);
	            this.state = 678;
	            localctx.e = this.exp();
	            break;

	        case 2:
	            localctx = new LibTypEmptContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 680;
	            this.match(scillaParser.TYPE);
	            this.state = 681;
	            localctx.tname = this.cid();
	            break;

	        case 3:
	            localctx = new LibTypContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 682;
	            this.match(scillaParser.TYPE);
	            this.state = 683;
	            localctx.tname = this.cid();
	            this.state = 684;
	            this.match(scillaParser.EQ);
	            this.state = 686; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 685;
	                localctx._tconstr = this.tconstr();
	                localctx.constrs.push(localctx._tconstr);
	                this.state = 688; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===scillaParser.BAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	library() {
	    let localctx = new LibraryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, scillaParser.RULE_library);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 692;
	        this.match(scillaParser.LIBRARY);
	        this.state = 693;
	        localctx.n = this.cid();
	        this.state = 697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.LET || _la===scillaParser.TYPE) {
	            this.state = 694;
	            localctx._libentry = this.libentry();
	            localctx.ls.push(localctx._libentry);
	            this.state = 699;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lmodule() {
	    let localctx = new LmoduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, scillaParser.RULE_lmodule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.match(scillaParser.SCILLA_VERSION);
	        this.state = 701;
	        localctx.cver = this.match(scillaParser.NUMBER);
	        this.state = 703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===scillaParser.IMPORT) {
	            this.state = 702;
	            localctx.els = this.imports();
	        }

	        this.state = 705;
	        localctx.l = this.library();
	        this.state = 706;
	        this.match(scillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importname() {
	    let localctx = new ImportnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, scillaParser.RULE_importname);
	    try {
	        this.state = 713;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NoShadowELibContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 708;
	            localctx.c = this.cid();
	            break;

	        case 2:
	            localctx = new ShadowELibContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 709;
	            localctx.c1 = this.cid();
	            this.state = 710;
	            this.match(scillaParser.AS);
	            this.state = 711;
	            localctx.c2 = this.cid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imports() {
	    let localctx = new ImportsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, scillaParser.RULE_imports);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this.match(scillaParser.IMPORT);
	        this.state = 719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===scillaParser.BYSTR || _la===scillaParser.CID) {
	            this.state = 716;
	            localctx._importname = this.importname();
	            localctx.els.push(localctx._importname);
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmodule() {
	    let localctx = new CmoduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, scillaParser.RULE_cmodule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.match(scillaParser.SCILLA_VERSION);
	        this.state = 723;
	        localctx.cver = this.match(scillaParser.NUMBER);
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===scillaParser.IMPORT) {
	            this.state = 724;
	            localctx.els = this.imports();
	        }

	        this.state = 728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===scillaParser.LIBRARY) {
	            this.state = 727;
	            localctx.ls = this.library();
	        }

	        this.state = 730;
	        localctx.c = this.contract();
	        this.state = 731;
	        this.match(scillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

scillaParser.EOF = antlr4.Token.EOF;
scillaParser.T__0 = 1;
scillaParser.FORALL = 2;
scillaParser.BUILTIN = 3;
scillaParser.LIBRARY = 4;
scillaParser.IMPORT = 5;
scillaParser.LET = 6;
scillaParser.IN = 7;
scillaParser.MATCH = 8;
scillaParser.WITH = 9;
scillaParser.END = 10;
scillaParser.FUN = 11;
scillaParser.TFUN = 12;
scillaParser.CONTRACT = 13;
scillaParser.TRANSITION = 14;
scillaParser.SEND = 15;
scillaParser.EVENT = 16;
scillaParser.FIELD = 17;
scillaParser.ACCEPT = 18;
scillaParser.EXISTS = 19;
scillaParser.DELETE = 20;
scillaParser.EMP = 21;
scillaParser.MAP = 22;
scillaParser.SCILLA_VERSION = 23;
scillaParser.TYPE = 24;
scillaParser.OF = 25;
scillaParser.TRY = 26;
scillaParser.CATCH = 27;
scillaParser.AS = 28;
scillaParser.PROCEDURE = 29;
scillaParser.THROW = 30;
scillaParser.SEMICOLON = 31;
scillaParser.COLON = 32;
scillaParser.PERIOD = 33;
scillaParser.BAR = 34;
scillaParser.LSQB = 35;
scillaParser.RSQB = 36;
scillaParser.LPAREN = 37;
scillaParser.RPAREN = 38;
scillaParser.LBRACE = 39;
scillaParser.RBRACE = 40;
scillaParser.COMMA = 41;
scillaParser.ARROW = 42;
scillaParser.TARROW = 43;
scillaParser.EQ = 44;
scillaParser.AND = 45;
scillaParser.FETCH = 46;
scillaParser.ASSIGN = 47;
scillaParser.AT = 48;
scillaParser.UNDERSCORE = 49;
scillaParser.BlockComment = 50;
scillaParser.NUMBER = 51;
scillaParser.STRING = 52;
scillaParser.FLOAT = 53;
scillaParser.HEX = 54;
scillaParser.BYSTR = 55;
scillaParser.EVENT_TY = 56;
scillaParser.WS = 57;
scillaParser.TOSKIP = 58;
scillaParser.ID = 59;
scillaParser.SPID = 60;
scillaParser.CID = 61;
scillaParser.TID = 62;

scillaParser.RULE_int_ = 0;
scillaParser.RULE_t_map_key = 1;
scillaParser.RULE_t_map_value_args = 2;
scillaParser.RULE_t_map_value = 3;
scillaParser.RULE_t_map_value_allow_targs = 4;
scillaParser.RULE_address_typ = 5;
scillaParser.RULE_typ = 6;
scillaParser.RULE_targ = 7;
scillaParser.RULE_address_type_field = 8;
scillaParser.RULE_exp = 9;
scillaParser.RULE_simple_exp = 10;
scillaParser.RULE_atomic_exp = 11;
scillaParser.RULE_lit = 12;
scillaParser.RULE_ctargs = 13;
scillaParser.RULE_map_access = 14;
scillaParser.RULE_pattern = 15;
scillaParser.RULE_arg_pattern = 16;
scillaParser.RULE_exp_pm_clause = 17;
scillaParser.RULE_msg_entry = 18;
scillaParser.RULE_builtin_args = 19;
scillaParser.RULE_exp_term = 20;
scillaParser.RULE_type_term = 21;
scillaParser.RULE_identifier = 22;
scillaParser.RULE_sid = 23;
scillaParser.RULE_scid = 24;
scillaParser.RULE_cid = 25;
scillaParser.RULE_type_annot = 26;
scillaParser.RULE_id_with_typ = 27;
scillaParser.RULE_stmt = 28;
scillaParser.RULE_remote_fetch_stmt = 29;
scillaParser.RULE_stmt_pm_clause = 30;
scillaParser.RULE_stmts = 31;
scillaParser.RULE_stmts_term = 32;
scillaParser.RULE_param_pair = 33;
scillaParser.RULE_component = 34;
scillaParser.RULE_procedure = 35;
scillaParser.RULE_transition = 36;
scillaParser.RULE_component_id = 37;
scillaParser.RULE_component_params = 38;
scillaParser.RULE_component_body = 39;
scillaParser.RULE_field = 40;
scillaParser.RULE_with_constraint = 41;
scillaParser.RULE_contract = 42;
scillaParser.RULE_tconstr = 43;
scillaParser.RULE_libentry = 44;
scillaParser.RULE_library = 45;
scillaParser.RULE_lmodule = 46;
scillaParser.RULE_importname = 47;
scillaParser.RULE_imports = 48;
scillaParser.RULE_cmodule = 49;

class Int_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_int_;
    }

	NUMBER() {
	    return this.getToken(scillaParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterInt_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitInt_(this);
		}
	}


}



class T_map_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_t_map_key;
        this.kt_to_map = null; // ScidContext
        this.kt = null; // Address_typContext
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterT_map_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitT_map_key(this);
		}
	}


}



class T_map_value_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_t_map_value_args;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TMP5Context extends T_map_value_argsContext {

    constructor(parser, ctx) {
        super(parser);
        this.k = null; // T_map_keyContext;
        this.v = null; // T_map_valueContext;
        super.copyFrom(ctx);
    }

	MAP() {
	    return this.getToken(scillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMP5(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMP5(this);
		}
	}


}

scillaParser.TMP5Context = TMP5Context;

class TMP4Context extends T_map_value_argsContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // ScidContext;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMP4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMP4(this);
		}
	}


}

scillaParser.TMP4Context = TMP4Context;

class TMP3Context extends T_map_value_argsContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // T_map_value_allow_targsContext;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	t_map_value_allow_targs() {
	    return this.getTypedRuleContext(T_map_value_allow_targsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMP3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMP3(this);
		}
	}


}

scillaParser.TMP3Context = TMP3Context;

class T_map_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_t_map_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TMPParenContext extends T_map_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // T_map_value_allow_targsContext;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	t_map_value_allow_targs() {
	    return this.getTypedRuleContext(T_map_value_allow_targsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMPParen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMPParen(this);
		}
	}


}

scillaParser.TMPParenContext = TMPParenContext;

class TMPMapContext extends T_map_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.k = null; // T_map_keyContext;
        this.v = null; // T_map_valueContext;
        super.copyFrom(ctx);
    }

	MAP() {
	    return this.getToken(scillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMPMap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMPMap(this);
		}
	}


}

scillaParser.TMPMapContext = TMPMapContext;

class TMPScidContext extends T_map_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // ScidContext;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMPScid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMPScid(this);
		}
	}


}

scillaParser.TMPScidContext = TMPScidContext;

class TMPAddrContext extends T_map_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.vt = null; // Address_typContext;
        super.copyFrom(ctx);
    }

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMPAddr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMPAddr(this);
		}
	}


}

scillaParser.TMPAddrContext = TMPAddrContext;

class T_map_value_allow_targsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_t_map_value_allow_targs;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TMP2Context extends T_map_value_allow_targsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMP2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMP2(this);
		}
	}


}

scillaParser.TMP2Context = TMP2Context;

class TMP1Context extends T_map_value_allow_targsContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // ScidContext;
        this._t_map_value_args = null; // T_map_value_argsContext;
        this.t_args = []; // of T_map_value_argsContexts;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	t_map_value_args = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(T_map_value_argsContext);
	    } else {
	        return this.getTypedRuleContext(T_map_value_argsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTMP1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTMP1(this);
		}
	}


}

scillaParser.TMP1Context = TMP1Context;

class Address_typContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_address_typ;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ContrAddrContext extends Address_typContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // CidContext;
        this._address_type_field = null; // Address_type_fieldContext;
        this.fs = []; // of Address_type_fieldContexts;
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(scillaParser.WITH, 0);
	};

	CONTRACT() {
	    return this.getToken(scillaParser.CONTRACT, 0);
	};

	END() {
	    return this.getToken(scillaParser.END, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	address_type_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Address_type_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Address_type_fieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(scillaParser.COMMA);
	    } else {
	        return this.getToken(scillaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterContrAddr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitContrAddr(this);
		}
	}


}

scillaParser.ContrAddrContext = ContrAddrContext;

class AnyAdressContext extends Address_typContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // CidContext;
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(scillaParser.WITH, 0);
	};

	END() {
	    return this.getToken(scillaParser.END, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAnyAdress(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAnyAdress(this);
		}
	}


}

scillaParser.AnyAdressContext = AnyAdressContext;

class CodeAddrContext extends Address_typContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // CidContext;
        this.c = null; // Token;
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(scillaParser.WITH, 0);
	};

	END() {
	    return this.getToken(scillaParser.END, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	SPID() {
	    return this.getToken(scillaParser.SPID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterCodeAddr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitCodeAddr(this);
		}
	}


}

scillaParser.CodeAddrContext = CodeAddrContext;

class LibAddrContext extends Address_typContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // CidContext;
        super.copyFrom(ctx);
    }

	WITH() {
	    return this.getToken(scillaParser.WITH, 0);
	};

	LIBRARY() {
	    return this.getToken(scillaParser.LIBRARY, 0);
	};

	END() {
	    return this.getToken(scillaParser.END, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLibAddr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLibAddr(this);
		}
	}


}

scillaParser.LibAddrContext = LibAddrContext;

class TypContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_typ;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TypeVarTypeContext extends TypContext {

    constructor(parser, ctx) {
        super(parser);
        this.t_var = null; // Token;
        super.copyFrom(ctx);
    }

	TID() {
	    return this.getToken(scillaParser.TID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTypeVarType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTypeVarType(this);
		}
	}


}

scillaParser.TypeVarTypeContext = TypeVarTypeContext;

class AddrTypeContext extends TypContext {

    constructor(parser, ctx) {
        super(parser);
        this.t_to_map = null; // Address_typContext;
        super.copyFrom(ctx);
    }

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAddrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAddrType(this);
		}
	}


}

scillaParser.AddrTypeContext = AddrTypeContext;

class FunTypeContext extends TypContext {

    constructor(parser, ctx) {
        super(parser);
        this.t1 = null; // TypContext;
        this.t2 = null; // TypContext;
        super.copyFrom(ctx);
    }

	TARROW() {
	    return this.getToken(scillaParser.TARROW, 0);
	};

	typ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypContext);
	    } else {
	        return this.getTypedRuleContext(TypContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterFunType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitFunType(this);
		}
	}


}

scillaParser.FunTypeContext = FunTypeContext;

class PolyFunTyContext extends TypContext {

    constructor(parser, ctx) {
        super(parser);
        this.tv = null; // Token;
        this.t = null; // TypContext;
        super.copyFrom(ctx);
    }

	FORALL() {
	    return this.getToken(scillaParser.FORALL, 0);
	};

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	TID() {
	    return this.getToken(scillaParser.TID, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterPolyFunTy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitPolyFunTy(this);
		}
	}


}

scillaParser.PolyFunTyContext = PolyFunTyContext;

class PrimorADTTypeContext extends TypContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // ScidContext;
        this._targ = null; // TargContext;
        this.targs = []; // of TargContexts;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterPrimorADTType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitPrimorADTType(this);
		}
	}


}

scillaParser.PrimorADTTypeContext = PrimorADTTypeContext;

class MapTypeContext extends TypContext {

    constructor(parser, ctx) {
        super(parser);
        this.k = null; // T_map_keyContext;
        this.v = null; // T_map_valueContext;
        super.copyFrom(ctx);
    }

	MAP() {
	    return this.getToken(scillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMapType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMapType(this);
		}
	}


}

scillaParser.MapTypeContext = MapTypeContext;

class ParenTypeContext extends TypContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // TypContext;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterParenType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitParenType(this);
		}
	}


}

scillaParser.ParenTypeContext = ParenTypeContext;

class TargContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_targ;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TvarTargContext extends TargContext {

    constructor(parser, ctx) {
        super(parser);
        this.t_var = null; // Token;
        super.copyFrom(ctx);
    }

	TID() {
	    return this.getToken(scillaParser.TID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTvarTarg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTvarTarg(this);
		}
	}


}

scillaParser.TvarTargContext = TvarTargContext;

class MapTargContext extends TargContext {

    constructor(parser, ctx) {
        super(parser);
        this.k = null; // T_map_keyContext;
        this.v = null; // T_map_valueContext;
        super.copyFrom(ctx);
    }

	MAP() {
	    return this.getToken(scillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMapTarg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMapTarg(this);
		}
	}


}

scillaParser.MapTargContext = MapTargContext;

class TypTargContext extends TargContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // TypContext;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTypTarg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTypTarg(this);
		}
	}


}

scillaParser.TypTargContext = TypTargContext;

class ScidTargContext extends TargContext {

    constructor(parser, ctx) {
        super(parser);
        this.d = null; // ScidContext;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterScidTarg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitScidTarg(this);
		}
	}


}

scillaParser.ScidTargContext = ScidTargContext;

class AddrTargContext extends TargContext {

    constructor(parser, ctx) {
        super(parser);
        this.t_to_map = null; // Address_typContext;
        super.copyFrom(ctx);
    }

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAddrTarg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAddrTarg(this);
		}
	}


}

scillaParser.AddrTargContext = AddrTargContext;

class Address_type_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_address_type_field;
        this.id = null; // IdentifierContext
        this.ty = null; // TypContext
    }

	FIELD() {
	    return this.getToken(scillaParser.FIELD, 0);
	};

	COLON() {
	    return this.getToken(scillaParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAddress_type_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAddress_type_field(this);
		}
	}


}



class ExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_exp;
        this.f = null; // Simple_expContext
    }

	simple_exp() {
	    return this.getTypedRuleContext(Simple_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitExp(this);
		}
	}


}



class Simple_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_simple_exp;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AppContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.f_var = null; // SidContext;
        this._sid = null; // SidContext;
        this.args = []; // of SidContexts;
        super.copyFrom(ctx);
    }

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitApp(this);
		}
	}


}

scillaParser.AppContext = AppContext;

class MessageContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this._msg_entry = null; // Msg_entryContext;
        this.es = []; // of Msg_entryContexts;
        super.copyFrom(ctx);
    }

	LBRACE() {
	    return this.getToken(scillaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(scillaParser.RBRACE, 0);
	};

	msg_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Msg_entryContext);
	    } else {
	        return this.getTypedRuleContext(Msg_entryContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(scillaParser.SEMICOLON);
	    } else {
	        return this.getToken(scillaParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMessage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMessage(this);
		}
	}


}

scillaParser.MessageContext = MessageContext;

class LetContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.x = null; // IdentifierContext;
        this.ty = null; // TypContext;
        this.f = null; // Simple_expContext;
        this.e = null; // ExpContext;
        super.copyFrom(ctx);
    }

	LET() {
	    return this.getToken(scillaParser.LET, 0);
	};

	EQ() {
	    return this.getToken(scillaParser.EQ, 0);
	};

	IN() {
	    return this.getToken(scillaParser.IN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	simple_exp() {
	    return this.getTypedRuleContext(Simple_expContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	COLON() {
	    return this.getToken(scillaParser.COLON, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLet(this);
		}
	}


}

scillaParser.LetContext = LetContext;

class AtomicContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.a = null; // Atomic_expContext;
        super.copyFrom(ctx);
    }

	atomic_exp() {
	    return this.getTypedRuleContext(Atomic_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAtomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAtomic(this);
		}
	}


}

scillaParser.AtomicContext = AtomicContext;

class TAppContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.f = null; // SidContext;
        this._targ = null; // TargContext;
        this.targs = []; // of TargContexts;
        super.copyFrom(ctx);
    }

	AT() {
	    return this.getToken(scillaParser.AT, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTApp(this);
		}
	}


}

scillaParser.TAppContext = TAppContext;

class TFunContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        this.e = null; // ExpContext;
        super.copyFrom(ctx);
    }

	TFUN() {
	    return this.getToken(scillaParser.TFUN, 0);
	};

	ARROW() {
	    return this.getToken(scillaParser.ARROW, 0);
	};

	TID() {
	    return this.getToken(scillaParser.TID, 0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTFun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTFun(this);
		}
	}


}

scillaParser.TFunContext = TFunContext;

class DataConstructorAppContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // ScidContext;
        this.ts = null; // CtargsContext;
        this._sid = null; // SidContext;
        this.args = []; // of SidContexts;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	ctargs() {
	    return this.getTypedRuleContext(CtargsContext,0);
	};

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterDataConstructorApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitDataConstructorApp(this);
		}
	}


}

scillaParser.DataConstructorAppContext = DataConstructorAppContext;

class FunContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.id = null; // IdentifierContext;
        this.ty = null; // TypContext;
        this.e = null; // ExpContext;
        super.copyFrom(ctx);
    }

	FUN() {
	    return this.getToken(scillaParser.FUN, 0);
	};

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	COLON() {
	    return this.getToken(scillaParser.COLON, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	ARROW() {
	    return this.getToken(scillaParser.ARROW, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterFun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitFun(this);
		}
	}


}

scillaParser.FunContext = FunContext;

class BuiltinContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.b = null; // IdentifierContext;
        this.targs = null; // CtargsContext;
        this.xs = null; // Builtin_argsContext;
        super.copyFrom(ctx);
    }

	BUILTIN() {
	    return this.getToken(scillaParser.BUILTIN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	builtin_args() {
	    return this.getTypedRuleContext(Builtin_argsContext,0);
	};

	ctargs() {
	    return this.getTypedRuleContext(CtargsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterBuiltin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitBuiltin(this);
		}
	}


}

scillaParser.BuiltinContext = BuiltinContext;

class MatchContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.x_sid = null; // SidContext;
        this._exp_pm_clause = null; // Exp_pm_clauseContext;
        this.cs = []; // of Exp_pm_clauseContexts;
        super.copyFrom(ctx);
    }

	MATCH() {
	    return this.getToken(scillaParser.MATCH, 0);
	};

	WITH() {
	    return this.getToken(scillaParser.WITH, 0);
	};

	END() {
	    return this.getToken(scillaParser.END, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	exp_pm_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Exp_pm_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Exp_pm_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMatch(this);
		}
	}


}

scillaParser.MatchContext = MatchContext;

class Atomic_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_atomic_exp;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AtomicSidContext extends Atomic_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // SidContext;
        super.copyFrom(ctx);
    }

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAtomicSid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAtomicSid(this);
		}
	}


}

scillaParser.AtomicSidContext = AtomicSidContext;

class AtomicLitContext extends Atomic_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // LitContext;
        super.copyFrom(ctx);
    }

	lit() {
	    return this.getTypedRuleContext(LitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAtomicLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAtomicLit(this);
		}
	}


}

scillaParser.AtomicLitContext = AtomicLitContext;

class LitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_lit;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LitStringContext extends LitContext {

    constructor(parser, ctx) {
        super(parser);
        this.s = null; // Token;
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(scillaParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLitString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLitString(this);
		}
	}


}

scillaParser.LitStringContext = LitStringContext;

class LitIntContext extends LitContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // CidContext;
        this.i_int = null; // Int_Context;
        super.copyFrom(ctx);
    }

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	int_() {
	    return this.getTypedRuleContext(Int_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLitInt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLitInt(this);
		}
	}


}

scillaParser.LitIntContext = LitIntContext;

class LitHexContext extends LitContext {

    constructor(parser, ctx) {
        super(parser);
        this.h = null; // Token;
        super.copyFrom(ctx);
    }

	HEX() {
	    return this.getToken(scillaParser.HEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLitHex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLitHex(this);
		}
	}


}

scillaParser.LitHexContext = LitHexContext;

class LitEmpContext extends LitContext {

    constructor(parser, ctx) {
        super(parser);
        this.kt = null; // T_map_keyContext;
        this.vt = null; // T_map_valueContext;
        super.copyFrom(ctx);
    }

	EMP() {
	    return this.getToken(scillaParser.EMP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLitEmp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLitEmp(this);
		}
	}


}

scillaParser.LitEmpContext = LitEmpContext;

class CtargsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_ctargs;
        this._targ = null; // TargContext
        this.ts = []; // of TargContexts
    }

	LBRACE() {
	    return this.getToken(scillaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(scillaParser.RBRACE, 0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterCtargs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitCtargs(this);
		}
	}


}



class Map_accessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_map_access;
        this.i = null; // SidContext
    }

	LSQB() {
	    return this.getToken(scillaParser.LSQB, 0);
	};

	RSQB() {
	    return this.getToken(scillaParser.RSQB, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMap_access(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMap_access(this);
		}
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_pattern;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BinderContext extends PatternContext {

    constructor(parser, ctx) {
        super(parser);
        this.x = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterBinder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitBinder(this);
		}
	}


}

scillaParser.BinderContext = BinderContext;

class WildcardContext extends PatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNDERSCORE() {
	    return this.getToken(scillaParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitWildcard(this);
		}
	}


}

scillaParser.WildcardContext = WildcardContext;

class ConstructorContext extends PatternContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // ScidContext;
        this._arg_pattern = null; // Arg_patternContext;
        this.ps = []; // of Arg_patternContexts;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	arg_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_patternContext);
	    } else {
	        return this.getTypedRuleContext(Arg_patternContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitConstructor(this);
		}
	}


}

scillaParser.ConstructorContext = ConstructorContext;

class Arg_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_arg_pattern;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PatternArgContext extends Arg_patternContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // PatternContext;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterPatternArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitPatternArg(this);
		}
	}


}

scillaParser.PatternArgContext = PatternArgContext;

class BinderArgContext extends Arg_patternContext {

    constructor(parser, ctx) {
        super(parser);
        this.x = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterBinderArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitBinderArg(this);
		}
	}


}

scillaParser.BinderArgContext = BinderArgContext;

class WildcardArgContext extends Arg_patternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNDERSCORE() {
	    return this.getToken(scillaParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterWildcardArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitWildcardArg(this);
		}
	}


}

scillaParser.WildcardArgContext = WildcardArgContext;

class ConstructorArgContext extends Arg_patternContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // ScidContext;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterConstructorArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitConstructorArg(this);
		}
	}


}

scillaParser.ConstructorArgContext = ConstructorArgContext;

class Exp_pm_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_exp_pm_clause;
        this.p = null; // PatternContext
        this.e = null; // ExpContext
    }

	BAR() {
	    return this.getToken(scillaParser.BAR, 0);
	};

	ARROW() {
	    return this.getToken(scillaParser.ARROW, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterExp_pm_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitExp_pm_clause(this);
		}
	}


}



class Msg_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_msg_entry;
        this.i = null; // SidContext
        this.l = null; // LitContext
        this.v = null; // SidContext
    }

	COLON() {
	    return this.getToken(scillaParser.COLON, 0);
	};

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	lit() {
	    return this.getTypedRuleContext(LitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMsg_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMsg_entry(this);
		}
	}


}



class Builtin_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_builtin_args;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BuildinArgsParenContext extends Builtin_argsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterBuildinArgsParen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitBuildinArgsParen(this);
		}
	}


}

scillaParser.BuildinArgsParenContext = BuildinArgsParenContext;

class BuiltinArgsSidContext extends Builtin_argsContext {

    constructor(parser, ctx) {
        super(parser);
        this._sid = null; // SidContext;
        this.args = []; // of SidContexts;
        super.copyFrom(ctx);
    }

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterBuiltinArgsSid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitBuiltinArgsSid(this);
		}
	}


}

scillaParser.BuiltinArgsSidContext = BuiltinArgsSidContext;

class Exp_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_exp_term;
        this.e = null; // ExpContext
    }

	EOF() {
	    return this.getToken(scillaParser.EOF, 0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterExp_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitExp_term(this);
		}
	}


}



class Type_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_type_term;
        this.t = null; // TypContext
    }

	EOF() {
	    return this.getToken(scillaParser.EOF, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterType_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitType_term(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_identifier;
    }

	ID() {
	    return this.getToken(scillaParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class SidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_sid;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SidNameContext extends SidContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterSidName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitSidName(this);
		}
	}


}

scillaParser.SidNameContext = SidNameContext;

class SidCidContext extends SidContext {

    constructor(parser, ctx) {
        super(parser);
        this.ns = null; // CidContext;
        this.name = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterSidCid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitSidCid(this);
		}
	}


}

scillaParser.SidCidContext = SidCidContext;

class SidSPIDContext extends SidContext {

    constructor(parser, ctx) {
        super(parser);
        this.name_spid = null; // Token;
        super.copyFrom(ctx);
    }

	SPID() {
	    return this.getToken(scillaParser.SPID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterSidSPID(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitSidSPID(this);
		}
	}


}

scillaParser.SidSPIDContext = SidSPIDContext;

class ScidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_scid;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ScidCidContext extends ScidContext {

    constructor(parser, ctx) {
        super(parser);
        this.ns = null; // CidContext;
        this.name = null; // CidContext;
        super.copyFrom(ctx);
    }

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	cid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CidContext);
	    } else {
	        return this.getTypedRuleContext(CidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterScidCid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitScidCid(this);
		}
	}


}

scillaParser.ScidCidContext = ScidCidContext;

class ScidNameContext extends ScidContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null; // CidContext;
        super.copyFrom(ctx);
    }

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterScidName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitScidName(this);
		}
	}


}

scillaParser.ScidNameContext = ScidNameContext;

class ScidHexContext extends ScidContext {

    constructor(parser, ctx) {
        super(parser);
        this.ns_hex = null; // Token;
        this.name = null; // CidContext;
        super.copyFrom(ctx);
    }

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	HEX() {
	    return this.getToken(scillaParser.HEX, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterScidHex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitScidHex(this);
		}
	}


}

scillaParser.ScidHexContext = ScidHexContext;

class CidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_cid;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CidBystrContext extends CidContext {

    constructor(parser, ctx) {
        super(parser);
        this.bystr = null; // Token;
        super.copyFrom(ctx);
    }

	BYSTR() {
	    return this.getToken(scillaParser.BYSTR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterCidBystr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitCidBystr(this);
		}
	}


}

scillaParser.CidBystrContext = CidBystrContext;

class CidCidContext extends CidContext {

    constructor(parser, ctx) {
        super(parser);
        this.id = null; // Token;
        super.copyFrom(ctx);
    }

	CID() {
	    return this.getToken(scillaParser.CID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterCidCid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitCidCid(this);
		}
	}


}

scillaParser.CidCidContext = CidCidContext;

class Type_annotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_type_annot;
        this.t = null; // TypContext
    }

	COLON() {
	    return this.getToken(scillaParser.COLON, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterType_annot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitType_annot(this);
		}
	}


}



class Id_with_typContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_id_with_typ;
        this.n = null; // IdentifierContext
        this.t = null; // Type_annotContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_annot() {
	    return this.getTypedRuleContext(Type_annotContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterId_with_typ(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitId_with_typ(this);
		}
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_stmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LoadContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // SidContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLoad(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLoad(this);
		}
	}


}

scillaParser.LoadContext = LoadContext;

class BindContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // ExpContext;
        super.copyFrom(ctx);
    }

	EQ() {
	    return this.getToken(scillaParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterBind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitBind(this);
		}
	}


}

scillaParser.BindContext = BindContext;

class RemoteFetchContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.r = null; // Remote_fetch_stmtContext;
        super.copyFrom(ctx);
    }

	remote_fetch_stmt() {
	    return this.getTypedRuleContext(Remote_fetch_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterRemoteFetch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitRemoteFetch(this);
		}
	}


}

scillaParser.RemoteFetchContext = RemoteFetchContext;

class MapUpdateContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        this.r = null; // SidContext;
        super.copyFrom(ctx);
    }

	ASSIGN() {
	    return this.getToken(scillaParser.ASSIGN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMapUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMapUpdate(this);
		}
	}


}

scillaParser.MapUpdateContext = MapUpdateContext;

class AcceptContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACCEPT() {
	    return this.getToken(scillaParser.ACCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterAccept(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitAccept(this);
		}
	}


}

scillaParser.AcceptContext = AcceptContext;

class MatchStmtContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.x = null; // SidContext;
        this._stmt_pm_clause = null; // Stmt_pm_clauseContext;
        this.cs = []; // of Stmt_pm_clauseContexts;
        super.copyFrom(ctx);
    }

	MATCH() {
	    return this.getToken(scillaParser.MATCH, 0);
	};

	WITH() {
	    return this.getToken(scillaParser.WITH, 0);
	};

	END() {
	    return this.getToken(scillaParser.END, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	stmt_pm_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Stmt_pm_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Stmt_pm_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMatchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMatchStmt(this);
		}
	}


}

scillaParser.MatchStmtContext = MatchStmtContext;

class IterateContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // SidContext;
        this.p = null; // Component_idContext;
        super.copyFrom(ctx);
    }

	FORALL() {
	    return this.getToken(scillaParser.FORALL, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterIterate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitIterate(this);
		}
	}


}

scillaParser.IterateContext = IterateContext;

class StoreContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // SidContext;
        super.copyFrom(ctx);
    }

	ASSIGN() {
	    return this.getToken(scillaParser.ASSIGN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterStore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitStore(this);
		}
	}


}

scillaParser.StoreContext = StoreContext;

class MapGetContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMapGet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMapGet(this);
		}
	}


}

scillaParser.MapGetContext = MapGetContext;

class SendContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.m = null; // SidContext;
        super.copyFrom(ctx);
    }

	SEND() {
	    return this.getToken(scillaParser.SEND, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterSend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitSend(this);
		}
	}


}

scillaParser.SendContext = SendContext;

class MapGetExistsContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	EXISTS() {
	    return this.getToken(scillaParser.EXISTS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMapGetExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMapGetExists(this);
		}
	}


}

scillaParser.MapGetExistsContext = MapGetExistsContext;

class CreateEvntContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.m = null; // SidContext;
        super.copyFrom(ctx);
    }

	EVENT() {
	    return this.getToken(scillaParser.EVENT, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterCreateEvnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitCreateEvnt(this);
		}
	}


}

scillaParser.CreateEvntContext = CreateEvntContext;

class ReadFromBCContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.c = null; // CidContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(scillaParser.AND, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterReadFromBC(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitReadFromBC(this);
		}
	}


}

scillaParser.ReadFromBCContext = ReadFromBCContext;

class ThrowContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.mopt = null; // SidContext;
        super.copyFrom(ctx);
    }

	THROW() {
	    return this.getToken(scillaParser.THROW, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterThrow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitThrow(this);
		}
	}


}

scillaParser.ThrowContext = ThrowContext;

class CallProcContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // Component_idContext;
        this._sid = null; // SidContext;
        this.args = []; // of SidContexts;
        super.copyFrom(ctx);
    }

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterCallProc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitCallProc(this);
		}
	}


}

scillaParser.CallProcContext = CallProcContext;

class MapUpdateDeleteContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(scillaParser.DELETE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterMapUpdateDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitMapUpdateDelete(this);
		}
	}


}

scillaParser.MapUpdateDeleteContext = MapUpdateDeleteContext;

class Remote_fetch_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_remote_fetch_stmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RemoteMapGetFalseContext extends Remote_fetch_stmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.adr_id = null; // IdentifierContext;
        this.r_id = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(scillaParser.AND, 0);
	};

	EXISTS() {
	    return this.getToken(scillaParser.EXISTS, 0);
	};

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterRemoteMapGetFalse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitRemoteMapGetFalse(this);
		}
	}


}

scillaParser.RemoteMapGetFalseContext = RemoteMapGetFalseContext;

class RemoteMapGetTrueContext extends Remote_fetch_stmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.adr_id = null; // IdentifierContext;
        this.r_id = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(scillaParser.AND, 0);
	};

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterRemoteMapGetTrue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitRemoteMapGetTrue(this);
		}
	}


}

scillaParser.RemoteMapGetTrueContext = RemoteMapGetTrueContext;

class RemoteLoadSidContext extends Remote_fetch_stmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.adr_id = null; // IdentifierContext;
        this.r = null; // SidContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(scillaParser.AND, 0);
	};

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterRemoteLoadSid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitRemoteLoadSid(this);
		}
	}


}

scillaParser.RemoteLoadSidContext = RemoteLoadSidContext;

class TypeCastContext extends Remote_fetch_stmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.adr = null; // SidContext;
        this.t = null; // Address_typContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(scillaParser.AND, 0);
	};

	AS() {
	    return this.getToken(scillaParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTypeCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTypeCast(this);
		}
	}


}

scillaParser.TypeCastContext = TypeCastContext;

class RemoteLoadSpidContext extends Remote_fetch_stmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.adr_id = null; // Token;
        this.r = null; // Token;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(scillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(scillaParser.AND, 0);
	};

	PERIOD() {
	    return this.getToken(scillaParser.PERIOD, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SPID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(scillaParser.SPID);
	    } else {
	        return this.getToken(scillaParser.SPID, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterRemoteLoadSpid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitRemoteLoadSpid(this);
		}
	}


}

scillaParser.RemoteLoadSpidContext = RemoteLoadSpidContext;

class Stmt_pm_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_stmt_pm_clause;
        this.p = null; // PatternContext
        this._stmt = null; // StmtContext
        this.ss = []; // of StmtContexts
    }

	BAR() {
	    return this.getToken(scillaParser.BAR, 0);
	};

	ARROW() {
	    return this.getToken(scillaParser.ARROW, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(scillaParser.SEMICOLON);
	    } else {
	        return this.getToken(scillaParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterStmt_pm_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitStmt_pm_clause(this);
		}
	}


}



class StmtsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_stmts;
        this._stmt = null; // StmtContext
        this.ss = []; // of StmtContexts
    }

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(scillaParser.SEMICOLON);
	    } else {
	        return this.getToken(scillaParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterStmts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitStmts(this);
		}
	}


}



class Stmts_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_stmts_term;
        this.ss = null; // StmtsContext
    }

	EOF() {
	    return this.getToken(scillaParser.EOF, 0);
	};

	stmts() {
	    return this.getTypedRuleContext(StmtsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterStmts_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitStmts_term(this);
		}
	}


}



class Param_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_param_pair;
        this.iwt = null; // Id_with_typContext
    }

	id_with_typ() {
	    return this.getTypedRuleContext(Id_with_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterParam_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitParam_pair(this);
		}
	}


}



class ComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_component;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TransitionCompContext extends ComponentContext {

    constructor(parser, ctx) {
        super(parser);
        this.t = null; // TransitionContext;
        super.copyFrom(ctx);
    }

	transition() {
	    return this.getTypedRuleContext(TransitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTransitionComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTransitionComp(this);
		}
	}


}

scillaParser.TransitionCompContext = TransitionCompContext;

class ProcedureCompContext extends ComponentContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // ProcedureContext;
        super.copyFrom(ctx);
    }

	procedure() {
	    return this.getTypedRuleContext(ProcedureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterProcedureComp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitProcedureComp(this);
		}
	}


}

scillaParser.ProcedureCompContext = ProcedureCompContext;

class ProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_procedure;
        this.t = null; // Component_idContext
        this.params = null; // Component_paramsContext
        this.ss = null; // Component_bodyContext
    }

	PROCEDURE() {
	    return this.getToken(scillaParser.PROCEDURE, 0);
	};

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	component_params() {
	    return this.getTypedRuleContext(Component_paramsContext,0);
	};

	component_body() {
	    return this.getTypedRuleContext(Component_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitProcedure(this);
		}
	}


}



class TransitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_transition;
        this.t = null; // Component_idContext
        this.params = null; // Component_paramsContext
        this.ss = null; // Component_bodyContext
    }

	TRANSITION() {
	    return this.getToken(scillaParser.TRANSITION, 0);
	};

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	component_params() {
	    return this.getTypedRuleContext(Component_paramsContext,0);
	};

	component_body() {
	    return this.getTypedRuleContext(Component_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTransition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTransition(this);
		}
	}


}



class Component_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_component_id;
        this.c = null; // CidContext
        this.i = null; // IdentifierContext
    }

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterComponent_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitComponent_id(this);
		}
	}


}



class Component_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_component_params;
        this._param_pair = null; // Param_pairContext
        this.params = []; // of Param_pairContexts
    }

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	param_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_pairContext);
	    } else {
	        return this.getTypedRuleContext(Param_pairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(scillaParser.COMMA);
	    } else {
	        return this.getToken(scillaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterComponent_params(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitComponent_params(this);
		}
	}


}



class Component_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_component_body;
        this.ss = null; // StmtsContext
    }

	END() {
	    return this.getToken(scillaParser.END, 0);
	};

	stmts() {
	    return this.getTypedRuleContext(StmtsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterComponent_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitComponent_body(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_field;
        this.iwt = null; // Id_with_typContext
        this.rhs = null; // ExpContext
    }

	FIELD() {
	    return this.getToken(scillaParser.FIELD, 0);
	};

	EQ() {
	    return this.getToken(scillaParser.EQ, 0);
	};

	id_with_typ() {
	    return this.getTypedRuleContext(Id_with_typContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitField(this);
		}
	}


}



class With_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_with_constraint;
        this.f = null; // ExpContext
    }

	WITH() {
	    return this.getToken(scillaParser.WITH, 0);
	};

	ARROW() {
	    return this.getToken(scillaParser.ARROW, 0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterWith_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitWith_constraint(this);
		}
	}


}



class ContractContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_contract;
        this.c = null; // CidContext
        this._param_pair = null; // Param_pairContext
        this.params = []; // of Param_pairContexts
        this.ct = null; // With_constraintContext
        this._field = null; // FieldContext
        this.fs = []; // of FieldContexts
        this._component = null; // ComponentContext
        this.comps = []; // of ComponentContexts
    }

	CONTRACT() {
	    return this.getToken(scillaParser.CONTRACT, 0);
	};

	LPAREN() {
	    return this.getToken(scillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(scillaParser.RPAREN, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	param_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_pairContext);
	    } else {
	        return this.getTypedRuleContext(Param_pairContext,i);
	    }
	};

	with_constraint() {
	    return this.getTypedRuleContext(With_constraintContext,0);
	};

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	component = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentContext);
	    } else {
	        return this.getTypedRuleContext(ComponentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(scillaParser.COMMA);
	    } else {
	        return this.getToken(scillaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterContract(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitContract(this);
		}
	}


}



class TconstrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_tconstr;
        this.tn = null; // CidContext
        this._targ = null; // TargContext
        this.t = []; // of TargContexts
    }

	BAR() {
	    return this.getToken(scillaParser.BAR, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	OF() {
	    return this.getToken(scillaParser.OF, 0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterTconstr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitTconstr(this);
		}
	}


}



class LibentryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_libentry;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LibTypEmptContext extends LibentryContext {

    constructor(parser, ctx) {
        super(parser);
        this.tname = null; // CidContext;
        super.copyFrom(ctx);
    }

	TYPE() {
	    return this.getToken(scillaParser.TYPE, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLibTypEmpt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLibTypEmpt(this);
		}
	}


}

scillaParser.LibTypEmptContext = LibTypEmptContext;

class LibTypContext extends LibentryContext {

    constructor(parser, ctx) {
        super(parser);
        this.tname = null; // CidContext;
        this._tconstr = null; // TconstrContext;
        this.constrs = []; // of TconstrContexts;
        super.copyFrom(ctx);
    }

	TYPE() {
	    return this.getToken(scillaParser.TYPE, 0);
	};

	EQ() {
	    return this.getToken(scillaParser.EQ, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	tconstr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TconstrContext);
	    } else {
	        return this.getTypedRuleContext(TconstrContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLibTyp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLibTyp(this);
		}
	}


}

scillaParser.LibTypContext = LibTypContext;

class LibVarContext extends LibentryContext {

    constructor(parser, ctx) {
        super(parser);
        this.ns = null; // IdentifierContext;
        this.t = null; // Type_annotContext;
        this.e = null; // ExpContext;
        super.copyFrom(ctx);
    }

	LET() {
	    return this.getToken(scillaParser.LET, 0);
	};

	EQ() {
	    return this.getToken(scillaParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	type_annot() {
	    return this.getTypedRuleContext(Type_annotContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLibVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLibVar(this);
		}
	}


}

scillaParser.LibVarContext = LibVarContext;

class LibraryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_library;
        this.n = null; // CidContext
        this._libentry = null; // LibentryContext
        this.ls = []; // of LibentryContexts
    }

	LIBRARY() {
	    return this.getToken(scillaParser.LIBRARY, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	libentry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibentryContext);
	    } else {
	        return this.getTypedRuleContext(LibentryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLibrary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLibrary(this);
		}
	}


}



class LmoduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_lmodule;
        this.cver = null; // Token
        this.els = null; // ImportsContext
        this.l = null; // LibraryContext
    }

	SCILLA_VERSION() {
	    return this.getToken(scillaParser.SCILLA_VERSION, 0);
	};

	EOF() {
	    return this.getToken(scillaParser.EOF, 0);
	};

	NUMBER() {
	    return this.getToken(scillaParser.NUMBER, 0);
	};

	library() {
	    return this.getTypedRuleContext(LibraryContext,0);
	};

	imports() {
	    return this.getTypedRuleContext(ImportsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterLmodule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitLmodule(this);
		}
	}


}



class ImportnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_importname;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShadowELibContext extends ImportnameContext {

    constructor(parser, ctx) {
        super(parser);
        this.c1 = null; // CidContext;
        this.c2 = null; // CidContext;
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(scillaParser.AS, 0);
	};

	cid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CidContext);
	    } else {
	        return this.getTypedRuleContext(CidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterShadowELib(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitShadowELib(this);
		}
	}


}

scillaParser.ShadowELibContext = ShadowELibContext;

class NoShadowELibContext extends ImportnameContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // CidContext;
        super.copyFrom(ctx);
    }

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterNoShadowELib(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitNoShadowELib(this);
		}
	}


}

scillaParser.NoShadowELibContext = NoShadowELibContext;

class ImportsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_imports;
        this._importname = null; // ImportnameContext
        this.els = []; // of ImportnameContexts
    }

	IMPORT() {
	    return this.getToken(scillaParser.IMPORT, 0);
	};

	importname = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportnameContext);
	    } else {
	        return this.getTypedRuleContext(ImportnameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterImports(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitImports(this);
		}
	}


}



class CmoduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = scillaParser.RULE_cmodule;
        this.cver = null; // Token
        this.els = null; // ImportsContext
        this.ls = null; // LibraryContext
        this.c = null; // ContractContext
    }

	SCILLA_VERSION() {
	    return this.getToken(scillaParser.SCILLA_VERSION, 0);
	};

	EOF() {
	    return this.getToken(scillaParser.EOF, 0);
	};

	NUMBER() {
	    return this.getToken(scillaParser.NUMBER, 0);
	};

	contract() {
	    return this.getTypedRuleContext(ContractContext,0);
	};

	imports() {
	    return this.getTypedRuleContext(ImportsContext,0);
	};

	library() {
	    return this.getTypedRuleContext(LibraryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.enterCmodule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof scillaListener ) {
	        listener.exitCmodule(this);
		}
	}


}




scillaParser.Int_Context = Int_Context; 
scillaParser.T_map_keyContext = T_map_keyContext; 
scillaParser.T_map_value_argsContext = T_map_value_argsContext; 
scillaParser.T_map_valueContext = T_map_valueContext; 
scillaParser.T_map_value_allow_targsContext = T_map_value_allow_targsContext; 
scillaParser.Address_typContext = Address_typContext; 
scillaParser.TypContext = TypContext; 
scillaParser.TargContext = TargContext; 
scillaParser.Address_type_fieldContext = Address_type_fieldContext; 
scillaParser.ExpContext = ExpContext; 
scillaParser.Simple_expContext = Simple_expContext; 
scillaParser.Atomic_expContext = Atomic_expContext; 
scillaParser.LitContext = LitContext; 
scillaParser.CtargsContext = CtargsContext; 
scillaParser.Map_accessContext = Map_accessContext; 
scillaParser.PatternContext = PatternContext; 
scillaParser.Arg_patternContext = Arg_patternContext; 
scillaParser.Exp_pm_clauseContext = Exp_pm_clauseContext; 
scillaParser.Msg_entryContext = Msg_entryContext; 
scillaParser.Builtin_argsContext = Builtin_argsContext; 
scillaParser.Exp_termContext = Exp_termContext; 
scillaParser.Type_termContext = Type_termContext; 
scillaParser.IdentifierContext = IdentifierContext; 
scillaParser.SidContext = SidContext; 
scillaParser.ScidContext = ScidContext; 
scillaParser.CidContext = CidContext; 
scillaParser.Type_annotContext = Type_annotContext; 
scillaParser.Id_with_typContext = Id_with_typContext; 
scillaParser.StmtContext = StmtContext; 
scillaParser.Remote_fetch_stmtContext = Remote_fetch_stmtContext; 
scillaParser.Stmt_pm_clauseContext = Stmt_pm_clauseContext; 
scillaParser.StmtsContext = StmtsContext; 
scillaParser.Stmts_termContext = Stmts_termContext; 
scillaParser.Param_pairContext = Param_pairContext; 
scillaParser.ComponentContext = ComponentContext; 
scillaParser.ProcedureContext = ProcedureContext; 
scillaParser.TransitionContext = TransitionContext; 
scillaParser.Component_idContext = Component_idContext; 
scillaParser.Component_paramsContext = Component_paramsContext; 
scillaParser.Component_bodyContext = Component_bodyContext; 
scillaParser.FieldContext = FieldContext; 
scillaParser.With_constraintContext = With_constraintContext; 
scillaParser.ContractContext = ContractContext; 
scillaParser.TconstrContext = TconstrContext; 
scillaParser.LibentryContext = LibentryContext; 
scillaParser.LibraryContext = LibraryContext; 
scillaParser.LmoduleContext = LmoduleContext; 
scillaParser.ImportnameContext = ImportnameContext; 
scillaParser.ImportsContext = ImportsContext; 
scillaParser.CmoduleContext = CmoduleContext; 
