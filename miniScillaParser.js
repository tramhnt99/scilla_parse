// Generated from miniScilla.g4 by ANTLR 4.9
// jshint ignore: start
import antlr4 from 'antlr4';
import miniScillaListener from './miniScillaListener.js';

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003E\u0302\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u0003\u0002\u0005\u0002j\n\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004z\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0085\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0092\n\u0006\u0003\u0007\u0003\u0007",
    "\u0006\u0007\u0096\n\u0007\r\u0007\u000e\u0007\u0097\u0003\u0007\u0005",
    "\u0007\u009b\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00a7\n\b\f\b\u000e\b\u00aa",
    "\u000b\b\u0007\b\u00ac\n\b\f\b\u000e\b\u00af\u000b\b\u0003\b\u0003\b",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u00ba",
    "\n\b\f\b\u000e\b\u00bd\u000b\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007",
    "\b\u00c3\n\b\f\b\u000e\b\u00c6\u000b\b\u0003\b\u0003\b\u0005\b\u00ca",
    "\n\b\u0003\t\u0003\t\u0003\t\u0007\t\u00cf\n\t\f\t\u000e\t\u00d2\u000b",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u00e3\n\t",
    "\u0003\t\u0003\t\u0003\t\u0007\t\u00e8\n\t\f\t\u000e\t\u00eb\u000b\t",
    "\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u00f8\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0005\r\u0105\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0006\r\u0117\n\r\r\r\u000e\r\u0118\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0007\r\u011f\n\r\f\r\u000e\r\u0122\u000b\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u012a\n\r\f\r\u000e\r\u012d",
    "\u000b\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0007\r\u0135",
    "\n\r\f\r\u000e\r\u0138\u000b\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005",
    "\r\u013e\n\r\u0003\r\u0007\r\u0141\n\r\f\r\u000e\r\u0144\u000b\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0006\r\u014d\n\r",
    "\r\r\u000e\r\u014e\u0005\r\u0151\n\r\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u0155\n\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0164\n\u000f\u0003\u0010",
    "\u0003\u0010\u0007\u0010\u0168\n\u0010\f\u0010\u000e\u0010\u016b\u000b",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0007\u0012\u0177",
    "\n\u0012\f\u0012\u000e\u0012\u017a\u000b\u0012\u0005\u0012\u017c\n\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0185\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0194",
    "\n\u0015\u0003\u0016\u0006\u0016\u0197\n\u0016\r\u0016\u000e\u0016\u0198",
    "\u0003\u0016\u0003\u0016\u0005\u0016\u019d\n\u0016\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0005\u001a\u01ad\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0005\u001b\u01ba\n\u001b\u0003\u001c\u0003",
    "\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0006\u001f\u01da",
    "\n\u001f\r\u001f\u000e\u001f\u01db\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0006\u001f\u01e3\n\u001f\r\u001f\u000e\u001f",
    "\u01e4\u0003\u001f\u0003\u001f\u0006\u001f\u01e9\n\u001f\r\u001f\u000e",
    "\u001f\u01ea\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0006\u001f\u01f3\n\u001f\r\u001f\u000e\u001f\u01f4\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0005\u001f\u01fe\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0006\u001f\u0204\n\u001f\r\u001f\u000e\u001f\u0205\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0007\u001f\u020c\n\u001f",
    "\f\u001f\u000e\u001f\u020f\u000b\u001f\u0003\u001f\u0003\u001f\u0003",
    "\u001f\u0003\u001f\u0005\u001f\u0215\n\u001f\u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0006 \u0235\n \r \u000e",
    " \u0236\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0006",
    " \u0241\n \r \u000e \u0242\u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0003 \u0005 \u024c\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0007",
    "!\u0254\n!\f!\u000e!\u0257\u000b!\u0007!\u0259\n!\f!\u000e!\u025c\u000b",
    "!\u0003\"\u0003\"\u0003\"\u0007\"\u0261\n\"\f\"\u000e\"\u0264\u000b",
    "\"\u0003#\u0003#\u0003#\u0003$\u0003$\u0003%\u0003%\u0005%\u026d\n%",
    "\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003\'",
    "\u0003\'\u0003(\u0003(\u0005(\u027b\n(\u0003)\u0003)\u0003)\u0003)\u0007",
    ")\u0281\n)\f)\u000e)\u0284\u000b)\u0007)\u0286\n)\f)\u000e)\u0289\u000b",
    ")\u0003)\u0003)\u0003*\u0005*\u028e\n*\u0003*\u0003*\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0003-\u0007-\u02a1\n-\f-\u000e-\u02a4\u000b-\u0007-\u02a6",
    "\n-\f-\u000e-\u02a9\u000b-\u0003-\u0003-\u0005-\u02ad\n-\u0003-\u0007",
    "-\u02b0\n-\f-\u000e-\u02b3\u000b-\u0003-\u0007-\u02b6\n-\f-\u000e-\u02b9",
    "\u000b-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0006.\u02c1\n.\r",
    ".\u000e.\u02c2\u0005.\u02c5\n.\u0003/\u0003/\u0003/\u0005/\u02ca\n/",
    "\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0006",
    "/\u02d5\n/\r/\u000e/\u02d6\u0005/\u02d9\n/\u00030\u00030\u00030\u0007",
    "0\u02de\n0\f0\u000e0\u02e1\u000b0\u00031\u00031\u00031\u00031\u0003",
    "1\u00031\u00032\u00032\u00032\u00032\u00032\u00052\u02ee\n2\u00033\u0003",
    "3\u00073\u02f2\n3\f3\u000e3\u02f5\u000b3\u00034\u00034\u00034\u0005",
    "4\u02fa\n4\u00034\u00054\u02fd\n4\u00034\u00034\u00034\u00034\u0002",
    "\u0003\u00105\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016",
    "\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdf\u0002",
    "\u0004\u0003\u0002;?\u0004\u0002<<DD\u0002\u034b\u0002i\u0003\u0002",
    "\u0002\u0002\u0004m\u0003\u0002\u0002\u0002\u0006y\u0003\u0002\u0002",
    "\u0002\b\u0084\u0003\u0002\u0002\u0002\n\u0091\u0003\u0002\u0002\u0002",
    "\f\u009a\u0003\u0002\u0002\u0002\u000e\u00c9\u0003\u0002\u0002\u0002",
    "\u0010\u00e2\u0003\u0002\u0002\u0002\u0012\u00f7\u0003\u0002\u0002\u0002",
    "\u0014\u00f9\u0003\u0002\u0002\u0002\u0016\u00fe\u0003\u0002\u0002\u0002",
    "\u0018\u0150\u0003\u0002\u0002\u0002\u001a\u0154\u0003\u0002\u0002\u0002",
    "\u001c\u0163\u0003\u0002\u0002\u0002\u001e\u0165\u0003\u0002\u0002\u0002",
    " \u016e\u0003\u0002\u0002\u0002\"\u017b\u0003\u0002\u0002\u0002$\u0184",
    "\u0003\u0002\u0002\u0002&\u0186\u0003\u0002\u0002\u0002(\u0193\u0003",
    "\u0002\u0002\u0002*\u019c\u0003\u0002\u0002\u0002,\u019e\u0003\u0002",
    "\u0002\u0002.\u01a1\u0003\u0002\u0002\u00020\u01a4\u0003\u0002\u0002",
    "\u00022\u01ac\u0003\u0002\u0002\u00024\u01b9\u0003\u0002\u0002\u0002",
    "6\u01bb\u0003\u0002\u0002\u00028\u01bd\u0003\u0002\u0002\u0002:\u01c0",
    "\u0003\u0002\u0002\u0002<\u0214\u0003\u0002\u0002\u0002>\u024b\u0003",
    "\u0002\u0002\u0002@\u024d\u0003\u0002\u0002\u0002B\u025d\u0003\u0002",
    "\u0002\u0002D\u0265\u0003\u0002\u0002\u0002F\u0268\u0003\u0002\u0002",
    "\u0002H\u026c\u0003\u0002\u0002\u0002J\u026e\u0003\u0002\u0002\u0002",
    "L\u0273\u0003\u0002\u0002\u0002N\u027a\u0003\u0002\u0002\u0002P\u027c",
    "\u0003\u0002\u0002\u0002R\u028d\u0003\u0002\u0002\u0002T\u0291\u0003",
    "\u0002\u0002\u0002V\u0296\u0003\u0002\u0002\u0002X\u029a\u0003\u0002",
    "\u0002\u0002Z\u02c4\u0003\u0002\u0002\u0002\\\u02d8\u0003\u0002\u0002",
    "\u0002^\u02da\u0003\u0002\u0002\u0002`\u02e2\u0003\u0002\u0002\u0002",
    "b\u02ed\u0003\u0002\u0002\u0002d\u02ef\u0003\u0002\u0002\u0002f\u02f6",
    "\u0003\u0002\u0002\u0002hj\u0007\u0003\u0002\u0002ih\u0003\u0002\u0002",
    "\u0002ij\u0003\u0002\u0002\u0002jk\u0003\u0002\u0002\u0002kl\u00075",
    "\u0002\u0002l\u0003\u0003\u0002\u0002\u0002mn\t\u0002\u0002\u0002n\u0005",
    "\u0003\u0002\u0002\u0002oz\u00054\u001b\u0002pq\u0007\'\u0002\u0002",
    "qr\u00054\u001b\u0002rs\u0007(\u0002\u0002sz\u0003\u0002\u0002\u0002",
    "tu\u0007\'\u0002\u0002uv\u0005\u000e\b\u0002vw\u0007(\u0002\u0002wz",
    "\u0003\u0002\u0002\u0002xz\u0005\u000e\b\u0002yo\u0003\u0002\u0002\u0002",
    "yp\u0003\u0002\u0002\u0002yt\u0003\u0002\u0002\u0002yx\u0003\u0002\u0002",
    "\u0002z\u0007\u0003\u0002\u0002\u0002{|\u0007\'\u0002\u0002|}\u0005",
    "\f\u0007\u0002}~\u0007(\u0002\u0002~\u0085\u0003\u0002\u0002\u0002\u007f",
    "\u0085\u00054\u001b\u0002\u0080\u0081\u0007\u0018\u0002\u0002\u0081",
    "\u0082\u0005\u0006\u0004\u0002\u0082\u0083\u0005\n\u0006\u0002\u0083",
    "\u0085\u0003\u0002\u0002\u0002\u0084{\u0003\u0002\u0002\u0002\u0084",
    "\u007f\u0003\u0002\u0002\u0002\u0084\u0080\u0003\u0002\u0002\u0002\u0085",
    "\t\u0003\u0002\u0002\u0002\u0086\u0092\u00054\u001b\u0002\u0087\u0088",
    "\u0007\u0018\u0002\u0002\u0088\u0089\u0005\u0006\u0004\u0002\u0089\u008a",
    "\u0005\n\u0006\u0002\u008a\u0092\u0003\u0002\u0002\u0002\u008b\u008c",
    "\u0007\'\u0002\u0002\u008c\u008d\u0005\f\u0007\u0002\u008d\u008e\u0007",
    "(\u0002\u0002\u008e\u0092\u0003\u0002\u0002\u0002\u008f\u0092\u0005",
    "\u000e\b\u0002\u0090\u0092\u0005\u0004\u0003\u0002\u0091\u0086\u0003",
    "\u0002\u0002\u0002\u0091\u0087\u0003\u0002\u0002\u0002\u0091\u008b\u0003",
    "\u0002\u0002\u0002\u0091\u008f\u0003\u0002\u0002\u0002\u0091\u0090\u0003",
    "\u0002\u0002\u0002\u0092\u000b\u0003\u0002\u0002\u0002\u0093\u0095\u0005",
    "4\u001b\u0002\u0094\u0096\u0005\b\u0005\u0002\u0095\u0094\u0003\u0002",
    "\u0002\u0002\u0096\u0097\u0003\u0002\u0002\u0002\u0097\u0095\u0003\u0002",
    "\u0002\u0002\u0097\u0098\u0003\u0002\u0002\u0002\u0098\u009b\u0003\u0002",
    "\u0002\u0002\u0099\u009b\u0005\n\u0006\u0002\u009a\u0093\u0003\u0002",
    "\u0002\u0002\u009a\u0099\u0003\u0002\u0002\u0002\u009b\r\u0003\u0002",
    "\u0002\u0002\u009c\u009d\u00056\u001c\u0002\u009d\u009e\u0007\u000b",
    "\u0002\u0002\u009e\u009f\u0007\f\u0002\u0002\u009f\u00ca\u0003\u0002",
    "\u0002\u0002\u00a0\u00a1\u00056\u001c\u0002\u00a1\u00a2\u0007\u000b",
    "\u0002\u0002\u00a2\u00ad\u0007\u000f\u0002\u0002\u00a3\u00a8\u0005\u0014",
    "\u000b\u0002\u00a4\u00a5\u0007+\u0002\u0002\u00a5\u00a7\u0005\u0014",
    "\u000b\u0002\u00a6\u00a4\u0003\u0002\u0002\u0002\u00a7\u00aa\u0003\u0002",
    "\u0002\u0002\u00a8\u00a6\u0003\u0002\u0002\u0002\u00a8\u00a9\u0003\u0002",
    "\u0002\u0002\u00a9\u00ac\u0003\u0002\u0002\u0002\u00aa\u00a8\u0003\u0002",
    "\u0002\u0002\u00ab\u00a3\u0003\u0002\u0002\u0002\u00ac\u00af\u0003\u0002",
    "\u0002\u0002\u00ad\u00ab\u0003\u0002\u0002\u0002\u00ad\u00ae\u0003\u0002",
    "\u0002\u0002\u00ae\u00b0\u0003\u0002\u0002\u0002\u00af\u00ad\u0003\u0002",
    "\u0002\u0002\u00b0\u00b1\u0007\f\u0002\u0002\u00b1\u00ca\u0003\u0002",
    "\u0002\u0002\u00b2\u00b3\u00056\u001c\u0002\u00b3\u00b4\u0007\u000b",
    "\u0002\u0002\u00b4\u00b5\u0007\u000f\u0002\u0002\u00b5\u00b6\u0007\'",
    "\u0002\u0002\u00b6\u00bb\u0005F$\u0002\u00b7\u00b8\u0007+\u0002\u0002",
    "\u00b8\u00ba\u0005F$\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002\u00ba",
    "\u00bd\u0003\u0002\u0002\u0002\u00bb\u00b9\u0003\u0002\u0002\u0002\u00bb",
    "\u00bc\u0003\u0002\u0002\u0002\u00bc\u00be\u0003\u0002\u0002\u0002\u00bd",
    "\u00bb\u0003\u0002\u0002\u0002\u00be\u00bf\u0007\'\u0002\u0002\u00bf",
    "\u00c4\u0005\u0014\u000b\u0002\u00c0\u00c1\u0007+\u0002\u0002\u00c1",
    "\u00c3\u0005\u0014\u000b\u0002\u00c2\u00c0\u0003\u0002\u0002\u0002\u00c3",
    "\u00c6\u0003\u0002\u0002\u0002\u00c4\u00c2\u0003\u0002\u0002\u0002\u00c4",
    "\u00c5\u0003\u0002\u0002\u0002\u00c5\u00c7\u0003\u0002\u0002\u0002\u00c6",
    "\u00c4\u0003\u0002\u0002\u0002\u00c7\u00c8\u0007\f\u0002\u0002\u00c8",
    "\u00ca\u0003\u0002\u0002\u0002\u00c9\u009c\u0003\u0002\u0002\u0002\u00c9",
    "\u00a0\u0003\u0002\u0002\u0002\u00c9\u00b2\u0003\u0002\u0002\u0002\u00ca",
    "\u000f\u0003\u0002\u0002\u0002\u00cb\u00cc\b\t\u0001\u0002\u00cc\u00d0",
    "\u00054\u001b\u0002\u00cd\u00cf\u0005\u0012\n\u0002\u00ce\u00cd\u0003",
    "\u0002\u0002\u0002\u00cf\u00d2\u0003\u0002\u0002\u0002\u00d0\u00ce\u0003",
    "\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00e3\u0003",
    "\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002\u00d3\u00d4\u0007",
    "\u0018\u0002\u0002\u00d4\u00d5\u0005\u0006\u0004\u0002\u00d5\u00d6\u0005",
    "\n\u0006\u0002\u00d6\u00e3\u0003\u0002\u0002\u0002\u00d7\u00d8\u0007",
    "\'\u0002\u0002\u00d8\u00d9\u0005\u0010\t\u0002\u00d9\u00da\u0007(\u0002",
    "\u0002\u00da\u00e3\u0003\u0002\u0002\u0002\u00db\u00e3\u0005\u000e\b",
    "\u0002\u00dc\u00dd\u0007\u0004\u0002\u0002\u00dd\u00de\u0007E\u0002",
    "\u0002\u00de\u00df\u0007#\u0002\u0002\u00df\u00e3\u0005\u0010\t\u0005",
    "\u00e0\u00e3\u0007E\u0002\u0002\u00e1\u00e3\u0005\u0004\u0003\u0002",
    "\u00e2\u00cb\u0003\u0002\u0002\u0002\u00e2\u00d3\u0003\u0002\u0002\u0002",
    "\u00e2\u00d7\u0003\u0002\u0002\u0002\u00e2\u00db\u0003\u0002\u0002\u0002",
    "\u00e2\u00dc\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002",
    "\u00e2\u00e1\u0003\u0002\u0002\u0002\u00e3\u00e9\u0003\u0002\u0002\u0002",
    "\u00e4\u00e5\f\b\u0002\u0002\u00e5\u00e6\u0007-\u0002\u0002\u00e6\u00e8",
    "\u0005\u0010\t\t\u00e7\u00e4\u0003\u0002\u0002\u0002\u00e8\u00eb\u0003",
    "\u0002\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003",
    "\u0002\u0002\u0002\u00ea\u0011\u0003\u0002\u0002\u0002\u00eb\u00e9\u0003",
    "\u0002\u0002\u0002\u00ec\u00ed\u0007\'\u0002\u0002\u00ed\u00ee\u0005",
    "\u0010\t\u0002\u00ee\u00ef\u0007(\u0002\u0002\u00ef\u00f8\u0003\u0002",
    "\u0002\u0002\u00f0\u00f8\u00054\u001b\u0002\u00f1\u00f8\u0007E\u0002",
    "\u0002\u00f2\u00f8\u0005\u000e\b\u0002\u00f3\u00f4\u0007\u0018\u0002",
    "\u0002\u00f4\u00f5\u0005\u0006\u0004\u0002\u00f5\u00f6\u0005\n\u0006",
    "\u0002\u00f6\u00f8\u0003\u0002\u0002\u0002\u00f7\u00ec\u0003\u0002\u0002",
    "\u0002\u00f7\u00f0\u0003\u0002\u0002\u0002\u00f7\u00f1\u0003\u0002\u0002",
    "\u0002\u00f7\u00f2\u0003\u0002\u0002\u0002\u00f7\u00f3\u0003\u0002\u0002",
    "\u0002\u00f8\u0013\u0003\u0002\u0002\u0002\u00f9\u00fa\u0007\u0013\u0002",
    "\u0002\u00fa\u00fb\u00050\u0019\u0002\u00fb\u00fc\u0007\"\u0002\u0002",
    "\u00fc\u00fd\u0005\u0010\t\u0002\u00fd\u0015\u0003\u0002\u0002\u0002",
    "\u00fe\u00ff\u0005\u0018\r\u0002\u00ff\u0017\u0003\u0002\u0002\u0002",
    "\u0100\u0101\u0007\b\u0002\u0002\u0101\u0104\u00050\u0019\u0002\u0102",
    "\u0103\u0007\"\u0002\u0002\u0103\u0105\u0005\u0010\t\u0002\u0104\u0102",
    "\u0003\u0002\u0002\u0002\u0104\u0105\u0003\u0002\u0002\u0002\u0105\u0106",
    "\u0003\u0002\u0002\u0002\u0106\u0107\u0007.\u0002\u0002\u0107\u0108",
    "\u0005\u0018\r\u0002\u0108\u0109\u0007\t\u0002\u0002\u0109\u010a\u0005",
    "\u0016\f\u0002\u010a\u0151\u0003\u0002\u0002\u0002\u010b\u010c\u0007",
    "\r\u0002\u0002\u010c\u010d\u0007\'\u0002\u0002\u010d\u010e\u00050\u0019",
    "\u0002\u010e\u010f\u0007\"\u0002\u0002\u010f\u0110\u0005\u0010\t\u0002",
    "\u0110\u0111\u0007(\u0002\u0002\u0111\u0112\u0007,\u0002\u0002\u0112",
    "\u0113\u0005\u0016\f\u0002\u0113\u0151\u0003\u0002\u0002\u0002\u0114",
    "\u0116\u00052\u001a\u0002\u0115\u0117\u00052\u001a\u0002\u0116\u0115",
    "\u0003\u0002\u0002\u0002\u0117\u0118\u0003\u0002\u0002\u0002\u0118\u0116",
    "\u0003\u0002\u0002\u0002\u0118\u0119\u0003\u0002\u0002\u0002\u0119\u0151",
    "\u0003\u0002\u0002\u0002\u011a\u0151\u0005\u001a\u000e\u0002\u011b\u011c",
    "\u0007\u0005\u0002\u0002\u011c\u0120\u00050\u0019\u0002\u011d\u011f",
    "\u0005\u001e\u0010\u0002\u011e\u011d\u0003\u0002\u0002\u0002\u011f\u0122",
    "\u0003\u0002\u0002\u0002\u0120\u011e\u0003\u0002\u0002\u0002\u0120\u0121",
    "\u0003\u0002\u0002\u0002\u0121\u0123\u0003\u0002\u0002\u0002\u0122\u0120",
    "\u0003\u0002\u0002\u0002\u0123\u0124\u0005*\u0016\u0002\u0124\u0151",
    "\u0003\u0002\u0002\u0002\u0125\u0126\u0007)\u0002\u0002\u0126\u012b",
    "\u0005(\u0015\u0002\u0127\u0128\u0007!\u0002\u0002\u0128\u012a\u0005",
    "(\u0015\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u012a\u012d\u0003",
    "\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012c\u0003",
    "\u0002\u0002\u0002\u012c\u012e\u0003\u0002\u0002\u0002\u012d\u012b\u0003",
    "\u0002\u0002\u0002\u012e\u012f\u0007*\u0002\u0002\u012f\u0151\u0003",
    "\u0002\u0002\u0002\u0130\u0131\u0007\n\u0002\u0002\u0131\u0132\u0005",
    "2\u001a\u0002\u0132\u0136\u0007\u000b\u0002\u0002\u0133\u0135\u0005",
    "&\u0014\u0002\u0134\u0133\u0003\u0002\u0002\u0002\u0135\u0138\u0003",
    "\u0002\u0002\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003",
    "\u0002\u0002\u0002\u0137\u0139\u0003\u0002\u0002\u0002\u0138\u0136\u0003",
    "\u0002\u0002\u0002\u0139\u013a\u0007\f\u0002\u0002\u013a\u0151\u0003",
    "\u0002\u0002\u0002\u013b\u013d\u00054\u001b\u0002\u013c\u013e\u0005",
    "\u001e\u0010\u0002\u013d\u013c\u0003\u0002\u0002\u0002\u013d\u013e\u0003",
    "\u0002\u0002\u0002\u013e\u0142\u0003\u0002\u0002\u0002\u013f\u0141\u0005",
    "2\u001a\u0002\u0140\u013f\u0003\u0002\u0002\u0002\u0141\u0144\u0003",
    "\u0002\u0002\u0002\u0142\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003",
    "\u0002\u0002\u0002\u0143\u0151\u0003\u0002\u0002\u0002\u0144\u0142\u0003",
    "\u0002\u0002\u0002\u0145\u0146\u0007\u000e\u0002\u0002\u0146\u0147\u0007",
    "E\u0002\u0002\u0147\u0148\u0007,\u0002\u0002\u0148\u0151\u0005\u0016",
    "\f\u0002\u0149\u014a\u00072\u0002\u0002\u014a\u014c\u00052\u001a\u0002",
    "\u014b\u014d\u0005\u0012\n\u0002\u014c\u014b\u0003\u0002\u0002\u0002",
    "\u014d\u014e\u0003\u0002\u0002\u0002\u014e\u014c\u0003\u0002\u0002\u0002",
    "\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0151\u0003\u0002\u0002\u0002",
    "\u0150\u0100\u0003\u0002\u0002\u0002\u0150\u010b\u0003\u0002\u0002\u0002",
    "\u0150\u0114\u0003\u0002\u0002\u0002\u0150\u011a\u0003\u0002\u0002\u0002",
    "\u0150\u011b\u0003\u0002\u0002\u0002\u0150\u0125\u0003\u0002\u0002\u0002",
    "\u0150\u0130\u0003\u0002\u0002\u0002\u0150\u013b\u0003\u0002\u0002\u0002",
    "\u0150\u0145\u0003\u0002\u0002\u0002\u0150\u0149\u0003\u0002\u0002\u0002",
    "\u0151\u0019\u0003\u0002\u0002\u0002\u0152\u0155\u00052\u001a\u0002",
    "\u0153\u0155\u0005\u001c\u000f\u0002\u0154\u0152\u0003\u0002\u0002\u0002",
    "\u0154\u0153\u0003\u0002\u0002\u0002\u0155\u001b\u0003\u0002\u0002\u0002",
    "\u0156\u0164\u00056\u001c\u0002\u0157\u0158\u0007;\u0002\u0002\u0158",
    "\u0164\u0005\u0002\u0002\u0002\u0159\u015a\u0007=\u0002\u0002\u015a",
    "\u0164\u00075\u0002\u0002\u015b\u0164\u00075\u0002\u0002\u015c\u0164",
    "\u0007:\u0002\u0002\u015d\u0164\u00076\u0002\u0002\u015e\u015f\u0007",
    "\u0017\u0002\u0002\u015f\u0160\u0005\u0006\u0004\u0002\u0160\u0161\u0005",
    "\n\u0006\u0002\u0161\u0164\u0003\u0002\u0002\u0002\u0162\u0164\u0007",
    "8\u0002\u0002\u0163\u0156\u0003\u0002\u0002\u0002\u0163\u0157\u0003",
    "\u0002\u0002\u0002\u0163\u0159\u0003\u0002\u0002\u0002\u0163\u015b\u0003",
    "\u0002\u0002\u0002\u0163\u015c\u0003\u0002\u0002\u0002\u0163\u015d\u0003",
    "\u0002\u0002\u0002\u0163\u015e\u0003\u0002\u0002\u0002\u0163\u0162\u0003",
    "\u0002\u0002\u0002\u0164\u001d\u0003\u0002\u0002\u0002\u0165\u0169\u0007",
    ")\u0002\u0002\u0166\u0168\u0005\u0012\n\u0002\u0167\u0166\u0003\u0002",
    "\u0002\u0002\u0168\u016b\u0003\u0002\u0002\u0002\u0169\u0167\u0003\u0002",
    "\u0002\u0002\u0169\u016a\u0003\u0002\u0002\u0002\u016a\u016c\u0003\u0002",
    "\u0002\u0002\u016b\u0169\u0003\u0002\u0002\u0002\u016c\u016d\u0007*",
    "\u0002\u0002\u016d\u001f\u0003\u0002\u0002\u0002\u016e\u016f\u0007%",
    "\u0002\u0002\u016f\u0170\u00052\u001a\u0002\u0170\u0171\u0007&\u0002",
    "\u0002\u0171!\u0003\u0002\u0002\u0002\u0172\u017c\u00073\u0002\u0002",
    "\u0173\u017c\u00050\u0019\u0002\u0174\u0178\u00054\u001b\u0002\u0175",
    "\u0177\u0005$\u0013\u0002\u0176\u0175\u0003\u0002\u0002\u0002\u0177",
    "\u017a\u0003\u0002\u0002\u0002\u0178\u0176\u0003\u0002\u0002\u0002\u0178",
    "\u0179\u0003\u0002\u0002\u0002\u0179\u017c\u0003\u0002\u0002\u0002\u017a",
    "\u0178\u0003\u0002\u0002\u0002\u017b\u0172\u0003\u0002\u0002\u0002\u017b",
    "\u0173\u0003\u0002\u0002\u0002\u017b\u0174\u0003\u0002\u0002\u0002\u017c",
    "#\u0003\u0002\u0002\u0002\u017d\u0185\u00073\u0002\u0002\u017e\u0185",
    "\u00050\u0019\u0002\u017f\u0185\u00054\u001b\u0002\u0180\u0181\u0007",
    "\'\u0002\u0002\u0181\u0182\u0005\"\u0012\u0002\u0182\u0183\u0007(\u0002",
    "\u0002\u0183\u0185\u0003\u0002\u0002\u0002\u0184\u017d\u0003\u0002\u0002",
    "\u0002\u0184\u017e\u0003\u0002\u0002\u0002\u0184\u017f\u0003\u0002\u0002",
    "\u0002\u0184\u0180\u0003\u0002\u0002\u0002\u0185%\u0003\u0002\u0002",
    "\u0002\u0186\u0187\u0007$\u0002\u0002\u0187\u0188\u0005\"\u0012\u0002",
    "\u0188\u0189\u0007,\u0002\u0002\u0189\u018a\u0005\u0016\f\u0002\u018a",
    "\'\u0003\u0002\u0002\u0002\u018b\u018c\u00052\u001a\u0002\u018c\u018d",
    "\u0007\"\u0002\u0002\u018d\u018e\u0005\u001c\u000f\u0002\u018e\u0194",
    "\u0003\u0002\u0002\u0002\u018f\u0190\u00052\u001a\u0002\u0190\u0191",
    "\u0007\"\u0002\u0002\u0191\u0192\u00052\u001a\u0002\u0192\u0194\u0003",
    "\u0002\u0002\u0002\u0193\u018b\u0003\u0002\u0002\u0002\u0193\u018f\u0003",
    "\u0002\u0002\u0002\u0194)\u0003\u0002\u0002\u0002\u0195\u0197\u0005",
    "2\u001a\u0002\u0196\u0195\u0003\u0002\u0002\u0002\u0197\u0198\u0003",
    "\u0002\u0002\u0002\u0198\u0196\u0003\u0002\u0002\u0002\u0198\u0199\u0003",
    "\u0002\u0002\u0002\u0199\u019d\u0003\u0002\u0002\u0002\u019a\u019b\u0007",
    "\'\u0002\u0002\u019b\u019d\u0007(\u0002\u0002\u019c\u0196\u0003\u0002",
    "\u0002\u0002\u019c\u019a\u0003\u0002\u0002\u0002\u019d+\u0003\u0002",
    "\u0002\u0002\u019e\u019f\u0005\u0016\f\u0002\u019f\u01a0\u0007\u0002",
    "\u0002\u0003\u01a0-\u0003\u0002\u0002\u0002\u01a1\u01a2\u0005\u0010",
    "\t\u0002\u01a2\u01a3\u0007\u0002\u0002\u0003\u01a3/\u0003\u0002\u0002",
    "\u0002\u01a4\u01a5\u0007B\u0002\u0002\u01a51\u0003\u0002\u0002\u0002",
    "\u01a6\u01ad\u00050\u0019\u0002\u01a7\u01ad\u0007C\u0002\u0002\u01a8",
    "\u01a9\u00056\u001c\u0002\u01a9\u01aa\u0007#\u0002\u0002\u01aa\u01ab",
    "\u00050\u0019\u0002\u01ab\u01ad\u0003\u0002\u0002\u0002\u01ac\u01a6",
    "\u0003\u0002\u0002\u0002\u01ac\u01a7\u0003\u0002\u0002\u0002\u01ac\u01a8",
    "\u0003\u0002\u0002\u0002\u01ad3\u0003\u0002\u0002\u0002\u01ae\u01ba",
    "\u00056\u001c\u0002\u01af\u01b0\u00056\u001c\u0002\u01b0\u01b1\u0007",
    "#\u0002\u0002\u01b1\u01b2\u00056\u001c\u0002\u01b2\u01ba\u0003\u0002",
    "\u0002\u0002\u01b3\u01b4\u0007:\u0002\u0002\u01b4\u01b5\u0007#\u0002",
    "\u0002\u01b5\u01ba\u00056\u001c\u0002\u01b6\u01ba\u00078\u0002\u0002",
    "\u01b7\u01ba\u00079\u0002\u0002\u01b8\u01ba\u0005\u0004\u0003\u0002",
    "\u01b9\u01ae\u0003\u0002\u0002\u0002\u01b9\u01af\u0003\u0002\u0002\u0002",
    "\u01b9\u01b3\u0003\u0002\u0002\u0002\u01b9\u01b6\u0003\u0002\u0002\u0002",
    "\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01b8\u0003\u0002\u0002\u0002",
    "\u01ba5\u0003\u0002\u0002\u0002\u01bb\u01bc\t\u0003\u0002\u0002\u01bc",
    "7\u0003\u0002\u0002\u0002\u01bd\u01be\u0007\"\u0002\u0002\u01be\u01bf",
    "\u0005\u0010\t\u0002\u01bf9\u0003\u0002\u0002\u0002\u01c0\u01c1\u0005",
    "0\u0019\u0002\u01c1\u01c2\u00058\u001d\u0002\u01c2;\u0003\u0002\u0002",
    "\u0002\u01c3\u01c4\u00050\u0019\u0002\u01c4\u01c5\u00070\u0002\u0002",
    "\u01c5\u01c6\u00052\u001a\u0002\u01c6\u0215\u0003\u0002\u0002\u0002",
    "\u01c7\u0215\u0005> \u0002\u01c8\u01c9\u00050\u0019\u0002\u01c9\u01ca",
    "\u00071\u0002\u0002\u01ca\u01cb\u00052\u001a\u0002\u01cb\u0215\u0003",
    "\u0002\u0002\u0002\u01cc\u01cd\u00050\u0019\u0002\u01cd\u01ce\u0007",
    ".\u0002\u0002\u01ce\u01cf\u0005\u0016\f\u0002\u01cf\u0215\u0003\u0002",
    "\u0002\u0002\u01d0\u01d1\u00050\u0019\u0002\u01d1\u01d2\u00070\u0002",
    "\u0002\u01d2\u01d3\u0007/\u0002\u0002\u01d3\u01d4\u00056\u001c\u0002",
    "\u01d4\u0215\u0003\u0002\u0002\u0002\u01d5\u01d6\u00050\u0019\u0002",
    "\u01d6\u01d7\u00070\u0002\u0002\u01d7\u01d9\u00050\u0019\u0002\u01d8",
    "\u01da\u0005 \u0011\u0002\u01d9\u01d8\u0003\u0002\u0002\u0002\u01da",
    "\u01db\u0003\u0002\u0002\u0002\u01db\u01d9\u0003\u0002\u0002\u0002\u01db",
    "\u01dc\u0003\u0002\u0002\u0002\u01dc\u0215\u0003\u0002\u0002\u0002\u01dd",
    "\u01de\u00050\u0019\u0002\u01de\u01df\u00070\u0002\u0002\u01df\u01e0",
    "\u0007\u0015\u0002\u0002\u01e0\u01e2\u00050\u0019\u0002\u01e1\u01e3",
    "\u0005 \u0011\u0002\u01e2\u01e1\u0003\u0002\u0002\u0002\u01e3\u01e4",
    "\u0003\u0002\u0002\u0002\u01e4\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e5",
    "\u0003\u0002\u0002\u0002\u01e5\u0215\u0003\u0002\u0002\u0002\u01e6\u01e8",
    "\u00050\u0019\u0002\u01e7\u01e9\u0005 \u0011\u0002\u01e8\u01e7\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01e8\u0003",
    "\u0002\u0002\u0002\u01ea\u01eb\u0003\u0002\u0002\u0002\u01eb\u01ec\u0003",
    "\u0002\u0002\u0002\u01ec\u01ed\u00071\u0002\u0002\u01ed\u01ee\u0005",
    "2\u001a\u0002\u01ee\u0215\u0003\u0002\u0002\u0002\u01ef\u01f0\u0007",
    "\u0016\u0002\u0002\u01f0\u01f2\u00050\u0019\u0002\u01f1\u01f3\u0005",
    " \u0011\u0002\u01f2\u01f1\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003",
    "\u0002\u0002\u0002\u01f4\u01f2\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003",
    "\u0002\u0002\u0002\u01f5\u0215\u0003\u0002\u0002\u0002\u01f6\u0215\u0007",
    "\u0014\u0002\u0002\u01f7\u01f8\u0007\u0011\u0002\u0002\u01f8\u0215\u0005",
    "2\u001a\u0002\u01f9\u01fa\u0007\u0012\u0002\u0002\u01fa\u0215\u0005",
    "2\u001a\u0002\u01fb\u01fd\u0007 \u0002\u0002\u01fc\u01fe\u00052\u001a",
    "\u0002\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002",
    "\u0002\u01fe\u0215\u0003\u0002\u0002\u0002\u01ff\u0200\u0007\n\u0002",
    "\u0002\u0200\u0201\u00052\u001a\u0002\u0201\u0203\u0007\u000b\u0002",
    "\u0002\u0202\u0204\u0005@!\u0002\u0203\u0202\u0003\u0002\u0002\u0002",
    "\u0204\u0205\u0003\u0002\u0002\u0002\u0205\u0203\u0003\u0002\u0002\u0002",
    "\u0205\u0206\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002",
    "\u0207\u0208\u0007\f\u0002\u0002\u0208\u0215\u0003\u0002\u0002\u0002",
    "\u0209\u020d\u0005N(\u0002\u020a\u020c\u00052\u001a\u0002\u020b\u020a",
    "\u0003\u0002\u0002\u0002\u020c\u020f\u0003\u0002\u0002\u0002\u020d\u020b",
    "\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u0215",
    "\u0003\u0002\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u0210\u0211",
    "\u0007\u0004\u0002\u0002\u0211\u0212\u00052\u001a\u0002\u0212\u0213",
    "\u0005N(\u0002\u0213\u0215\u0003\u0002\u0002\u0002\u0214\u01c3\u0003",
    "\u0002\u0002\u0002\u0214\u01c7\u0003\u0002\u0002\u0002\u0214\u01c8\u0003",
    "\u0002\u0002\u0002\u0214\u01cc\u0003\u0002\u0002\u0002\u0214\u01d0\u0003",
    "\u0002\u0002\u0002\u0214\u01d5\u0003\u0002\u0002\u0002\u0214\u01dd\u0003",
    "\u0002\u0002\u0002\u0214\u01e6\u0003\u0002\u0002\u0002\u0214\u01ef\u0003",
    "\u0002\u0002\u0002\u0214\u01f6\u0003\u0002\u0002\u0002\u0214\u01f7\u0003",
    "\u0002\u0002\u0002\u0214\u01f9\u0003\u0002\u0002\u0002\u0214\u01fb\u0003",
    "\u0002\u0002\u0002\u0214\u01ff\u0003\u0002\u0002\u0002\u0214\u0209\u0003",
    "\u0002\u0002\u0002\u0214\u0210\u0003\u0002\u0002\u0002\u0215=\u0003",
    "\u0002\u0002\u0002\u0216\u0217\u00050\u0019\u0002\u0217\u0218\u0007",
    "0\u0002\u0002\u0218\u0219\u0007/\u0002\u0002\u0219\u021a\u00050\u0019",
    "\u0002\u021a\u021b\u0007#\u0002\u0002\u021b\u021c\u00052\u001a\u0002",
    "\u021c\u024c\u0003\u0002\u0002\u0002\u021d\u021e\u00050\u0019\u0002",
    "\u021e\u021f\u00070\u0002\u0002\u021f\u0220\u0007/\u0002\u0002\u0220",
    "\u0221\u0007C\u0002\u0002\u0221\u0222\u0007#\u0002\u0002\u0222\u0223",
    "\u0007C\u0002\u0002\u0223\u024c\u0003\u0002\u0002\u0002\u0224\u0225",
    "\u00050\u0019\u0002\u0225\u0226\u00070\u0002\u0002\u0226\u0227\u0007",
    "/\u0002\u0002\u0227\u0228\u00050\u0019\u0002\u0228\u0229\u0007#\u0002",
    "\u0002\u0229\u022a\u0007\'\u0002\u0002\u022a\u022b\u00052\u001a\u0002",
    "\u022b\u022c\u0007(\u0002\u0002\u022c\u024c\u0003\u0002\u0002\u0002",
    "\u022d\u022e\u00050\u0019\u0002\u022e\u022f\u00070\u0002\u0002\u022f",
    "\u0230\u0007/\u0002\u0002\u0230\u0231\u00050\u0019\u0002\u0231\u0232",
    "\u0007#\u0002\u0002\u0232\u0234\u00050\u0019\u0002\u0233\u0235\u0005",
    " \u0011\u0002\u0234\u0233\u0003\u0002\u0002\u0002\u0235\u0236\u0003",
    "\u0002\u0002\u0002\u0236\u0234\u0003\u0002\u0002\u0002\u0236\u0237\u0003",
    "\u0002\u0002\u0002\u0237\u024c\u0003\u0002\u0002\u0002\u0238\u0239\u0005",
    "0\u0019\u0002\u0239\u023a\u00070\u0002\u0002\u023a\u023b\u0007/\u0002",
    "\u0002\u023b\u023c\u0007\u0015\u0002\u0002\u023c\u023d\u00050\u0019",
    "\u0002\u023d\u023e\u0007#\u0002\u0002\u023e\u0240\u00050\u0019\u0002",
    "\u023f\u0241\u0005 \u0011\u0002\u0240\u023f\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002",
    "\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u024c\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u00050\u0019\u0002\u0245\u0246\u00070\u0002\u0002\u0246",
    "\u0247\u0007/\u0002\u0002\u0247\u0248\u00052\u001a\u0002\u0248\u0249",
    "\u0007\u001e\u0002\u0002\u0249\u024a\u0005\u000e\b\u0002\u024a\u024c",
    "\u0003\u0002\u0002\u0002\u024b\u0216\u0003\u0002\u0002\u0002\u024b\u021d",
    "\u0003\u0002\u0002\u0002\u024b\u0224\u0003\u0002\u0002\u0002\u024b\u022d",
    "\u0003\u0002\u0002\u0002\u024b\u0238\u0003\u0002\u0002\u0002\u024b\u0244",
    "\u0003\u0002\u0002\u0002\u024c?\u0003\u0002\u0002\u0002\u024d\u024e",
    "\u0007$\u0002\u0002\u024e\u024f\u0005\"\u0012\u0002\u024f\u025a\u0007",
    ",\u0002\u0002\u0250\u0255\u0005<\u001f\u0002\u0251\u0252\u0007!\u0002",
    "\u0002\u0252\u0254\u0005<\u001f\u0002\u0253\u0251\u0003\u0002\u0002",
    "\u0002\u0254\u0257\u0003\u0002\u0002\u0002\u0255\u0253\u0003\u0002\u0002",
    "\u0002\u0255\u0256\u0003\u0002\u0002\u0002\u0256\u0259\u0003\u0002\u0002",
    "\u0002\u0257\u0255\u0003\u0002\u0002\u0002\u0258\u0250\u0003\u0002\u0002",
    "\u0002\u0259\u025c\u0003\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002",
    "\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025bA\u0003\u0002\u0002",
    "\u0002\u025c\u025a\u0003\u0002\u0002\u0002\u025d\u0262\u0005<\u001f",
    "\u0002\u025e\u025f\u0007!\u0002\u0002\u025f\u0261\u0005<\u001f\u0002",
    "\u0260\u025e\u0003\u0002\u0002\u0002\u0261\u0264\u0003\u0002\u0002\u0002",
    "\u0262\u0260\u0003\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002",
    "\u0263C\u0003\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002",
    "\u0265\u0266\u0005B\"\u0002\u0266\u0267\u0007\u0002\u0002\u0003\u0267",
    "E\u0003\u0002\u0002\u0002\u0268\u0269\u0005:\u001e\u0002\u0269G\u0003",
    "\u0002\u0002\u0002\u026a\u026d\u0005L\'\u0002\u026b\u026d\u0005J&\u0002",
    "\u026c\u026a\u0003\u0002\u0002\u0002\u026c\u026b\u0003\u0002\u0002\u0002",
    "\u026dI\u0003\u0002\u0002\u0002\u026e\u026f\u0007\u001f\u0002\u0002",
    "\u026f\u0270\u0005N(\u0002\u0270\u0271\u0005P)\u0002\u0271\u0272\u0005",
    "R*\u0002\u0272K\u0003\u0002\u0002\u0002\u0273\u0274\u0007\u0010\u0002",
    "\u0002\u0274\u0275\u0005N(\u0002\u0275\u0276\u0005P)\u0002\u0276\u0277",
    "\u0005R*\u0002\u0277M\u0003\u0002\u0002\u0002\u0278\u027b\u00056\u001c",
    "\u0002\u0279\u027b\u00050\u0019\u0002\u027a\u0278\u0003\u0002\u0002",
    "\u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027bO\u0003\u0002\u0002",
    "\u0002\u027c\u0287\u0007\'\u0002\u0002\u027d\u0282\u0005F$\u0002\u027e",
    "\u027f\u0007+\u0002\u0002\u027f\u0281\u0005F$\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0281\u0284\u0003\u0002\u0002\u0002\u0282\u0280\u0003",
    "\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0286\u0003",
    "\u0002\u0002\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0285\u027d\u0003",
    "\u0002\u0002\u0002\u0286\u0289\u0003\u0002\u0002\u0002\u0287\u0285\u0003",
    "\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u028a\u0003",
    "\u0002\u0002\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u028a\u028b\u0007",
    "(\u0002\u0002\u028bQ\u0003\u0002\u0002\u0002\u028c\u028e\u0005B\"\u0002",
    "\u028d\u028c\u0003\u0002\u0002\u0002\u028d\u028e\u0003\u0002\u0002\u0002",
    "\u028e\u028f\u0003\u0002\u0002\u0002\u028f\u0290\u0007\f\u0002\u0002",
    "\u0290S\u0003\u0002\u0002\u0002\u0291\u0292\u0007\u0013\u0002\u0002",
    "\u0292\u0293\u0005:\u001e\u0002\u0293\u0294\u0007.\u0002\u0002\u0294",
    "\u0295\u0005\u0016\f\u0002\u0295U\u0003\u0002\u0002\u0002\u0296\u0297",
    "\u0007\u000b\u0002\u0002\u0297\u0298\u0005\u0016\f\u0002\u0298\u0299",
    "\u0007,\u0002\u0002\u0299W\u0003\u0002\u0002\u0002\u029a\u029b\u0007",
    "\u000f\u0002\u0002\u029b\u029c\u00056\u001c\u0002\u029c\u02a7\u0007",
    "\'\u0002\u0002\u029d\u02a2\u0005F$\u0002\u029e\u029f\u0007+\u0002\u0002",
    "\u029f\u02a1\u0005F$\u0002\u02a0\u029e\u0003\u0002\u0002\u0002\u02a1",
    "\u02a4\u0003\u0002\u0002\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a2",
    "\u02a3\u0003\u0002\u0002\u0002\u02a3\u02a6\u0003\u0002\u0002\u0002\u02a4",
    "\u02a2\u0003\u0002\u0002\u0002\u02a5\u029d\u0003\u0002\u0002\u0002\u02a6",
    "\u02a9\u0003\u0002\u0002\u0002\u02a7\u02a5\u0003\u0002\u0002\u0002\u02a7",
    "\u02a8\u0003\u0002\u0002\u0002\u02a8\u02aa\u0003\u0002\u0002\u0002\u02a9",
    "\u02a7\u0003\u0002\u0002\u0002\u02aa\u02ac\u0007(\u0002\u0002\u02ab",
    "\u02ad\u0005V,\u0002\u02ac\u02ab\u0003\u0002\u0002\u0002\u02ac\u02ad",
    "\u0003\u0002\u0002\u0002\u02ad\u02b1\u0003\u0002\u0002\u0002\u02ae\u02b0",
    "\u0005T+\u0002\u02af\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b3\u0003",
    "\u0002\u0002\u0002\u02b1\u02af\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003",
    "\u0002\u0002\u0002\u02b2\u02b7\u0003\u0002\u0002\u0002\u02b3\u02b1\u0003",
    "\u0002\u0002\u0002\u02b4\u02b6\u0005H%\u0002\u02b5\u02b4\u0003\u0002",
    "\u0002\u0002\u02b6\u02b9\u0003\u0002\u0002\u0002\u02b7\u02b5\u0003\u0002",
    "\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8Y\u0003\u0002",
    "\u0002\u0002\u02b9\u02b7\u0003\u0002\u0002\u0002\u02ba\u02bb\u0007$",
    "\u0002\u0002\u02bb\u02c5\u00056\u001c\u0002\u02bc\u02bd\u0007$\u0002",
    "\u0002\u02bd\u02be\u00056\u001c\u0002\u02be\u02c0\u0007\u001b\u0002",
    "\u0002\u02bf\u02c1\u0005\u0012\n\u0002\u02c0\u02bf\u0003\u0002\u0002",
    "\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c0\u0003\u0002\u0002",
    "\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002\u02c3\u02c5\u0003\u0002\u0002",
    "\u0002\u02c4\u02ba\u0003\u0002\u0002\u0002\u02c4\u02bc\u0003\u0002\u0002",
    "\u0002\u02c5[\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007\b\u0002\u0002",
    "\u02c7\u02c9\u00050\u0019\u0002\u02c8\u02ca\u00058\u001d\u0002\u02c9",
    "\u02c8\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002\u0002\u02ca",
    "\u02cb\u0003\u0002\u0002\u0002\u02cb\u02cc\u0007.\u0002\u0002\u02cc",
    "\u02cd\u0005\u0016\f\u0002\u02cd\u02d9\u0003\u0002\u0002\u0002\u02ce",
    "\u02cf\u0007\u001a\u0002\u0002\u02cf\u02d9\u00056\u001c\u0002\u02d0",
    "\u02d1\u0007\u001a\u0002\u0002\u02d1\u02d2\u00056\u001c\u0002\u02d2",
    "\u02d4\u0007.\u0002\u0002\u02d3\u02d5\u0005Z.\u0002\u02d4\u02d3\u0003",
    "\u0002\u0002\u0002\u02d5\u02d6\u0003\u0002\u0002\u0002\u02d6\u02d4\u0003",
    "\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02d9\u0003",
    "\u0002\u0002\u0002\u02d8\u02c6\u0003\u0002\u0002\u0002\u02d8\u02ce\u0003",
    "\u0002\u0002\u0002\u02d8\u02d0\u0003\u0002\u0002\u0002\u02d9]\u0003",
    "\u0002\u0002\u0002\u02da\u02db\u0007\u0006\u0002\u0002\u02db\u02df\u0005",
    "6\u001c\u0002\u02dc\u02de\u0005\\/\u0002\u02dd\u02dc\u0003\u0002\u0002",
    "\u0002\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd\u0003\u0002\u0002",
    "\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0_\u0003\u0002\u0002",
    "\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007\u0019\u0002",
    "\u0002\u02e3\u02e4\u00075\u0002\u0002\u02e4\u02e5\u0005d3\u0002\u02e5",
    "\u02e6\u0005^0\u0002\u02e6\u02e7\u0007\u0002\u0002\u0003\u02e7a\u0003",
    "\u0002\u0002\u0002\u02e8\u02ee\u00056\u001c\u0002\u02e9\u02ea\u0005",
    "6\u001c\u0002\u02ea\u02eb\u0007\u001e\u0002\u0002\u02eb\u02ec\u0005",
    "6\u001c\u0002\u02ec\u02ee\u0003\u0002\u0002\u0002\u02ed\u02e8\u0003",
    "\u0002\u0002\u0002\u02ed\u02e9\u0003\u0002\u0002\u0002\u02eec\u0003",
    "\u0002\u0002\u0002\u02ef\u02f3\u0007\u0007\u0002\u0002\u02f0\u02f2\u0005",
    "b2\u0002\u02f1\u02f0\u0003\u0002\u0002\u0002\u02f2\u02f5\u0003\u0002",
    "\u0002\u0002\u02f3\u02f1\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002",
    "\u0002\u0002\u02f4e\u0003\u0002\u0002\u0002\u02f5\u02f3\u0003\u0002",
    "\u0002\u0002\u02f6\u02f7\u0007\u0019\u0002\u0002\u02f7\u02f9\u00075",
    "\u0002\u0002\u02f8\u02fa\u0005d3\u0002\u02f9\u02f8\u0003\u0002\u0002",
    "\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u02fc\u0003\u0002\u0002",
    "\u0002\u02fb\u02fd\u0005^0\u0002\u02fc\u02fb\u0003\u0002\u0002\u0002",
    "\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002\u0002\u0002",
    "\u02fe\u02ff\u0005X-\u0002\u02ff\u0300\u0007\u0002\u0002\u0003\u0300",
    "g\u0003\u0002\u0002\u0002Giy\u0084\u0091\u0097\u009a\u00a8\u00ad\u00bb",
    "\u00c4\u00c9\u00d0\u00e2\u00e9\u00f7\u0104\u0118\u0120\u012b\u0136\u013d",
    "\u0142\u014e\u0150\u0154\u0163\u0169\u0178\u017b\u0184\u0193\u0198\u019c",
    "\u01ac\u01b9\u01db\u01e4\u01ea\u01f4\u01fd\u0205\u020d\u0214\u0236\u0242",
    "\u024b\u0255\u025a\u0262\u026c\u027a\u0282\u0287\u028d\u02a2\u02a7\u02ac",
    "\u02b1\u02b7\u02c2\u02c4\u02c9\u02d6\u02d8\u02df\u02ed\u02f3\u02f9\u02fc"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class miniScillaParser extends antlr4.Parser {

    static grammarFileName = "miniScilla.g4";
    static literalNames = [ null, "'-'", "'forall'", "'builtin'", "'library'", 
                            "'import'", "'let'", "'in'", "'match'", "'with'", 
                            "'end'", "'fun'", "'tfun'", "'contract'", "'transition'", 
                            "'send'", "'event'", "'field'", "'accept'", 
                            "'exists'", "'delete'", "'Emp'", "'Map'", "'scilla_version'", 
                            "'type'", "'of'", "'try'", "'catch'", "'as'", 
                            "'procedure'", "'throw'", "';'", "':'", "'.'", 
                            "'|'", "'['", "']'", "'('", "')'", "'{'", "'}'", 
                            "','", "'=>'", "'->'", "'='", "'&'", "'<-'", 
                            "':='", "'@'", "'_'", null, null, null, null, 
                            null, null, null, null, null, "'BNum'", "'Message'", 
                            "'Event'" ];
    static symbolicNames = [ null, null, "FORALL", "BUILTIN", "LIBRARY", 
                             "IMPORT", "LET", "IN", "MATCH", "WITH", "END", 
                             "FUN", "TFUN", "CONTRACT", "TRANSITION", "SEND", 
                             "EVENT", "FIELD", "ACCEPT", "EXISTS", "DELETE", 
                             "EMP", "MAP", "SCILLA_VERSION", "TYPE", "OF", 
                             "TRY", "CATCH", "AS", "PROCEDURE", "THROW", 
                             "SEMICOLON", "COLON", "PERIOD", "BAR", "LSQB", 
                             "RSQB", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                             "COMMA", "ARROW", "TARROW", "EQ", "AND", "FETCH", 
                             "ASSIGN", "AT", "UNDERSCORE", "BlockComment", 
                             "NUMBER", "STRING", "FLOAT", "BOOLEAN", "OPTION", 
                             "HEX", "INTTY", "BYSTR", "BNUM", "MESSAGE", 
                             "EVENT_TY", "WS", "TOSKIP", "ID", "SPID", "CID", 
                             "TID" ];
    static ruleNames = [ "int_", "prim_types", "t_map_key", "t_map_value_args", 
                         "t_map_value", "t_map_value_allow_targs", "address_typ", 
                         "typ", "targ", "address_type_field", "exp", "simple_exp", 
                         "atomic_exp", "lit", "ctargs", "map_access", "pattern", 
                         "arg_pattern", "exp_pm_clause", "msg_entry", "builtin_args", 
                         "exp_term", "type_term", "identifier", "sid", "scid", 
                         "cid", "type_annot", "id_with_typ", "stmt", "remote_fetch_stmt", 
                         "stmt_pm_clause", "stmts", "stmts_term", "param_pair", 
                         "component", "procedure", "transition", "component_id", 
                         "component_params", "component_body", "field", 
                         "with_constraint", "contract", "tconstr", "libentry", 
                         "library", "lmodule", "importname", "imports", 
                         "cmodule" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = miniScillaParser.ruleNames;
        this.literalNames = miniScillaParser.literalNames;
        this.symbolicNames = miniScillaParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 7:
    	    		return this.typ_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    typ_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 6);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	int_() {
	    let localctx = new Int_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, miniScillaParser.RULE_int_);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===miniScillaParser.T__0) {
	            this.state = 102;
	            this.match(miniScillaParser.T__0);
	        }

	        this.state = 105;
	        this.match(miniScillaParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prim_types() {
	    let localctx = new Prim_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, miniScillaParser.RULE_prim_types);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 107;
	        _la = this._input.LA(1);
	        if(!(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (miniScillaParser.INTTY - 57)) | (1 << (miniScillaParser.BYSTR - 57)) | (1 << (miniScillaParser.BNUM - 57)) | (1 << (miniScillaParser.MESSAGE - 57)) | (1 << (miniScillaParser.EVENT_TY - 57)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_key() {
	    let localctx = new T_map_keyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, miniScillaParser.RULE_t_map_key);
	    try {
	        this.state = 119;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 109;
	            localctx.kt_to_map = this.scid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 110;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 111;
	            localctx.kt_to_map = this.scid();
	            this.state = 112;
	            this.match(miniScillaParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 114;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 115;
	            localctx.kt = this.address_typ();
	            this.state = 116;
	            this.match(miniScillaParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 118;
	            localctx.kt = this.address_typ();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_value_args() {
	    let localctx = new T_map_value_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, miniScillaParser.RULE_t_map_value_args);
	    try {
	        this.state = 130;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.LPAREN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 121;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 122;
	            localctx.t = this.t_map_value_allow_targs();
	            this.state = 123;
	            this.match(miniScillaParser.RPAREN);
	            break;
	        case miniScillaParser.BOOLEAN:
	        case miniScillaParser.OPTION:
	        case miniScillaParser.HEX:
	        case miniScillaParser.INTTY:
	        case miniScillaParser.BYSTR:
	        case miniScillaParser.BNUM:
	        case miniScillaParser.MESSAGE:
	        case miniScillaParser.EVENT_TY:
	        case miniScillaParser.CID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 125;
	            localctx.d = this.scid();
	            break;
	        case miniScillaParser.MAP:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 126;
	            this.match(miniScillaParser.MAP);
	            this.state = 127;
	            localctx.k = this.t_map_key();
	            this.state = 128;
	            localctx.v = this.t_map_value();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_value() {
	    let localctx = new T_map_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, miniScillaParser.RULE_t_map_value);
	    try {
	        this.state = 143;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 132;
	            localctx.d = this.scid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 133;
	            this.match(miniScillaParser.MAP);
	            this.state = 134;
	            localctx.k = this.t_map_key();
	            this.state = 135;
	            localctx.v = this.t_map_value();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 137;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 138;
	            localctx.t = this.t_map_value_allow_targs();
	            this.state = 139;
	            this.match(miniScillaParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 141;
	            localctx.vt = this.address_typ();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 142;
	            this.prim_types();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	t_map_value_allow_targs() {
	    let localctx = new T_map_value_allow_targsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, miniScillaParser.RULE_t_map_value_allow_targs);
	    var _la = 0; // Token type
	    try {
	        this.state = 152;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 145;
	            localctx.d = this.scid();
	            this.state = 147; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 146;
	                this.t_map_value_args();
	                this.state = 149; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.MAP || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (miniScillaParser.LPAREN - 37)) | (1 << (miniScillaParser.BOOLEAN - 37)) | (1 << (miniScillaParser.OPTION - 37)) | (1 << (miniScillaParser.HEX - 37)) | (1 << (miniScillaParser.INTTY - 37)) | (1 << (miniScillaParser.BYSTR - 37)) | (1 << (miniScillaParser.BNUM - 37)) | (1 << (miniScillaParser.MESSAGE - 37)) | (1 << (miniScillaParser.EVENT_TY - 37)) | (1 << (miniScillaParser.CID - 37)))) !== 0));
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 151;
	            this.t_map_value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	address_typ() {
	    let localctx = new Address_typContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, miniScillaParser.RULE_address_typ);
	    var _la = 0; // Token type
	    try {
	        this.state = 199;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 154;
	            localctx.d = this.cid();
	            this.state = 155;
	            this.match(miniScillaParser.WITH);
	            this.state = 156;
	            this.match(miniScillaParser.END);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 158;
	            localctx.d = this.cid();
	            this.state = 159;
	            this.match(miniScillaParser.WITH);
	            this.state = 160;
	            this.match(miniScillaParser.CONTRACT);
	            this.state = 171;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.FIELD) {
	                this.state = 161;
	                localctx._address_type_field = this.address_type_field();
	                localctx.fs.push(localctx._address_type_field);
	                this.state = 166;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===miniScillaParser.COMMA) {
	                    this.state = 162;
	                    this.match(miniScillaParser.COMMA);
	                    this.state = 163;
	                    localctx._address_type_field = this.address_type_field();
	                    localctx.fs.push(localctx._address_type_field);
	                    this.state = 168;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 173;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 174;
	            this.match(miniScillaParser.END);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 176;
	            localctx.d = this.cid();
	            this.state = 177;
	            this.match(miniScillaParser.WITH);
	            this.state = 178;
	            this.match(miniScillaParser.CONTRACT);
	            this.state = 179;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 180;
	            localctx._param_pair = this.param_pair();
	            localctx.ps.push(localctx._param_pair);
	            this.state = 185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.COMMA) {
	                this.state = 181;
	                this.match(miniScillaParser.COMMA);
	                this.state = 182;
	                localctx._param_pair = this.param_pair();
	                localctx.ps.push(localctx._param_pair);
	                this.state = 187;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 188;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 189;
	            localctx._address_type_field = this.address_type_field();
	            localctx.fs.push(localctx._address_type_field);
	            this.state = 194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.COMMA) {
	                this.state = 190;
	                this.match(miniScillaParser.COMMA);
	                this.state = 191;
	                localctx._address_type_field = this.address_type_field();
	                localctx.fs.push(localctx._address_type_field);
	                this.state = 196;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 197;
	            this.match(miniScillaParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	typ(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TypContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 14;
	    this.enterRecursionRule(localctx, 14, miniScillaParser.RULE_typ, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 202;
	            localctx.d = this.scid();
	            this.state = 206;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 203;
	                    localctx._targ = this.targ();
	                    localctx.targs.push(localctx._targ); 
	                }
	                this.state = 208;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	            }

	            break;

	        case 2:
	            this.state = 209;
	            this.match(miniScillaParser.MAP);
	            this.state = 210;
	            localctx.k = this.t_map_key();
	            this.state = 211;
	            localctx.v = this.t_map_value();
	            break;

	        case 3:
	            this.state = 213;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 214;
	            localctx.t = this.typ(0);
	            this.state = 215;
	            this.match(miniScillaParser.RPAREN);
	            break;

	        case 4:
	            this.state = 217;
	            localctx.t_to_map = this.address_typ();
	            break;

	        case 5:
	            this.state = 218;
	            this.match(miniScillaParser.FORALL);
	            this.state = 219;
	            localctx.tv = this.match(miniScillaParser.TID);
	            this.state = 220;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 221;
	            localctx.t = this.typ(3);
	            break;

	        case 6:
	            this.state = 222;
	            localctx.t_var = this.match(miniScillaParser.TID);
	            break;

	        case 7:
	            this.state = 223;
	            this.prim_types();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 231;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,13,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TypContext(this, _parentctx, _parentState);
	                localctx.t1 = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, miniScillaParser.RULE_typ);
	                this.state = 226;
	                if (!( this.precpred(this._ctx, 6))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                }
	                this.state = 227;
	                this.match(miniScillaParser.TARROW);
	                this.state = 228;
	                localctx.t2 = this.typ(7); 
	            }
	            this.state = 233;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,13,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	targ() {
	    let localctx = new TargContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, miniScillaParser.RULE_targ);
	    try {
	        this.state = 245;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 234;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 235;
	            localctx.t = this.typ(0);
	            this.state = 236;
	            this.match(miniScillaParser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 238;
	            localctx.d = this.scid();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 239;
	            localctx.t_var = this.match(miniScillaParser.TID);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 240;
	            localctx.t_to_map = this.address_typ();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 241;
	            this.match(miniScillaParser.MAP);
	            this.state = 242;
	            localctx.k = this.t_map_key();
	            this.state = 243;
	            localctx.v = this.t_map_value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	address_type_field() {
	    let localctx = new Address_type_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, miniScillaParser.RULE_address_type_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 247;
	        this.match(miniScillaParser.FIELD);
	        this.state = 248;
	        localctx.id = this.identifier();
	        this.state = 249;
	        this.match(miniScillaParser.COLON);
	        this.state = 250;
	        localctx.ty = this.typ(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exp() {
	    let localctx = new ExpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, miniScillaParser.RULE_exp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        localctx.f = this.simple_exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_exp() {
	    let localctx = new Simple_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, miniScillaParser.RULE_simple_exp);
	    var _la = 0; // Token type
	    try {
	        this.state = 334;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LetContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 254;
	            this.match(miniScillaParser.LET);
	            this.state = 255;
	            localctx.x = this.identifier();
	            this.state = 258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===miniScillaParser.COLON) {
	                this.state = 256;
	                this.match(miniScillaParser.COLON);
	                this.state = 257;
	                localctx.ty = this.typ(0);
	            }

	            this.state = 260;
	            this.match(miniScillaParser.EQ);
	            this.state = 261;
	            localctx.f = this.simple_exp();
	            this.state = 262;
	            this.match(miniScillaParser.IN);
	            this.state = 263;
	            localctx.e = this.exp();
	            break;

	        case 2:
	            localctx = new FunContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 265;
	            this.match(miniScillaParser.FUN);
	            this.state = 266;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 267;
	            localctx.id = this.identifier();
	            this.state = 268;
	            this.match(miniScillaParser.COLON);
	            this.state = 269;
	            localctx.ty = this.typ(0);
	            this.state = 270;
	            this.match(miniScillaParser.RPAREN);
	            this.state = 271;
	            this.match(miniScillaParser.ARROW);
	            this.state = 272;
	            localctx.e = this.exp();
	            break;

	        case 3:
	            localctx = new AppContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 274;
	            localctx.f_var = this.sid();
	            this.state = 276; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 275;
	            		localctx._sid = this.sid();
	            		localctx.args.push(localctx._sid);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 278; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,16, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 4:
	            localctx = new AtomicContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 280;
	            localctx.a = this.atomic_exp();
	            break;

	        case 5:
	            localctx = new BuiltinContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 281;
	            this.match(miniScillaParser.BUILTIN);
	            this.state = 282;
	            localctx.b = this.identifier();
	            this.state = 286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.LBRACE) {
	                this.state = 283;
	                localctx._ctargs = this.ctargs();
	                localctx.targs.push(localctx._ctargs);
	                this.state = 288;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 289;
	            localctx.xs = this.builtin_args();
	            break;

	        case 6:
	            localctx = new MessageContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 291;
	            this.match(miniScillaParser.LBRACE);
	            this.state = 292;
	            localctx._msg_entry = this.msg_entry();
	            localctx.es.push(localctx._msg_entry);
	            this.state = 297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.SEMICOLON) {
	                this.state = 293;
	                this.match(miniScillaParser.SEMICOLON);
	                this.state = 294;
	                localctx._msg_entry = this.msg_entry();
	                localctx.es.push(localctx._msg_entry);
	                this.state = 299;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 300;
	            this.match(miniScillaParser.RBRACE);
	            break;

	        case 7:
	            localctx = new MatchContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 302;
	            this.match(miniScillaParser.MATCH);
	            this.state = 303;
	            localctx.x_sid = this.sid();
	            this.state = 304;
	            this.match(miniScillaParser.WITH);
	            this.state = 308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.BAR) {
	                this.state = 305;
	                localctx.cs = this.exp_pm_clause();
	                this.state = 310;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 311;
	            this.match(miniScillaParser.END);
	            break;

	        case 8:
	            localctx = new DataConstructorAppContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 313;
	            localctx.c = this.scid();
	            this.state = 315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===miniScillaParser.LBRACE) {
	                this.state = 314;
	                localctx.ts = this.ctargs();
	            }

	            this.state = 320;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 317;
	                    localctx._sid = this.sid();
	                    localctx.args.push(localctx._sid); 
	                }
	                this.state = 322;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	            }

	            break;

	        case 9:
	            localctx = new TFunContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 323;
	            this.match(miniScillaParser.TFUN);
	            this.state = 324;
	            localctx.i = this.match(miniScillaParser.TID);
	            this.state = 325;
	            this.match(miniScillaParser.ARROW);
	            this.state = 326;
	            localctx.e = this.exp();
	            break;

	        case 10:
	            localctx = new TAppContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 327;
	            this.match(miniScillaParser.AT);
	            this.state = 328;
	            localctx.f = this.sid();
	            this.state = 330; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 329;
	            		localctx._targ = this.targ();
	            		localctx.targs.push(localctx._targ);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 332; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,22, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_exp() {
	    let localctx = new Atomic_expContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, miniScillaParser.RULE_atomic_exp);
	    try {
	        this.state = 338;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 336;
	            localctx.i = this.sid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 337;
	            localctx.l = this.lit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lit() {
	    let localctx = new LitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, miniScillaParser.RULE_lit);
	    try {
	        this.state = 353;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.BYSTR:
	        case miniScillaParser.CID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 340;
	            localctx.i = this.cid();
	            break;
	        case miniScillaParser.INTTY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 341;
	            this.match(miniScillaParser.INTTY);
	            this.state = 342;
	            localctx.i_int = this.int_();
	            break;
	        case miniScillaParser.BNUM:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 343;
	            this.match(miniScillaParser.BNUM);
	            this.state = 344;
	            localctx.i_number = this.match(miniScillaParser.NUMBER);
	            break;
	        case miniScillaParser.NUMBER:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 345;
	            localctx.n = this.match(miniScillaParser.NUMBER);
	            break;
	        case miniScillaParser.HEX:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 346;
	            localctx.h = this.match(miniScillaParser.HEX);
	            break;
	        case miniScillaParser.STRING:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 347;
	            localctx.s = this.match(miniScillaParser.STRING);
	            break;
	        case miniScillaParser.EMP:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 348;
	            this.match(miniScillaParser.EMP);
	            this.state = 349;
	            localctx.kt = this.t_map_key();
	            this.state = 350;
	            localctx.vt = this.t_map_value();
	            break;
	        case miniScillaParser.BOOLEAN:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 352;
	            localctx.b = this.match(miniScillaParser.BOOLEAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ctargs() {
	    let localctx = new CtargsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, miniScillaParser.RULE_ctargs);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 355;
	        this.match(miniScillaParser.LBRACE);
	        this.state = 359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.MAP || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (miniScillaParser.LPAREN - 37)) | (1 << (miniScillaParser.BOOLEAN - 37)) | (1 << (miniScillaParser.OPTION - 37)) | (1 << (miniScillaParser.HEX - 37)) | (1 << (miniScillaParser.INTTY - 37)) | (1 << (miniScillaParser.BYSTR - 37)) | (1 << (miniScillaParser.BNUM - 37)) | (1 << (miniScillaParser.MESSAGE - 37)) | (1 << (miniScillaParser.EVENT_TY - 37)) | (1 << (miniScillaParser.CID - 37)) | (1 << (miniScillaParser.TID - 37)))) !== 0)) {
	            this.state = 356;
	            localctx.ts = this.targ();
	            this.state = 361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 362;
	        this.match(miniScillaParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	map_access() {
	    let localctx = new Map_accessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, miniScillaParser.RULE_map_access);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 364;
	        this.match(miniScillaParser.LSQB);
	        this.state = 365;
	        localctx.i = this.sid();
	        this.state = 366;
	        this.match(miniScillaParser.RSQB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, miniScillaParser.RULE_pattern);
	    var _la = 0; // Token type
	    try {
	        this.state = 377;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.UNDERSCORE:
	            localctx = new WildcardContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 368;
	            this.match(miniScillaParser.UNDERSCORE);
	            break;
	        case miniScillaParser.ID:
	            localctx = new BinderContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 369;
	            localctx.x = this.identifier();
	            break;
	        case miniScillaParser.BOOLEAN:
	        case miniScillaParser.OPTION:
	        case miniScillaParser.HEX:
	        case miniScillaParser.INTTY:
	        case miniScillaParser.BYSTR:
	        case miniScillaParser.BNUM:
	        case miniScillaParser.MESSAGE:
	        case miniScillaParser.EVENT_TY:
	        case miniScillaParser.CID:
	            localctx = new ConstructorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 370;
	            localctx.c = this.scid();
	            this.state = 374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (miniScillaParser.LPAREN - 37)) | (1 << (miniScillaParser.UNDERSCORE - 37)) | (1 << (miniScillaParser.BOOLEAN - 37)) | (1 << (miniScillaParser.OPTION - 37)) | (1 << (miniScillaParser.HEX - 37)) | (1 << (miniScillaParser.INTTY - 37)) | (1 << (miniScillaParser.BYSTR - 37)) | (1 << (miniScillaParser.BNUM - 37)) | (1 << (miniScillaParser.MESSAGE - 37)) | (1 << (miniScillaParser.EVENT_TY - 37)) | (1 << (miniScillaParser.ID - 37)) | (1 << (miniScillaParser.CID - 37)))) !== 0)) {
	                this.state = 371;
	                localctx.ps = this.arg_pattern();
	                this.state = 376;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg_pattern() {
	    let localctx = new Arg_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, miniScillaParser.RULE_arg_pattern);
	    try {
	        this.state = 386;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.UNDERSCORE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 379;
	            this.match(miniScillaParser.UNDERSCORE);
	            break;
	        case miniScillaParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 380;
	            localctx.x = this.identifier();
	            break;
	        case miniScillaParser.BOOLEAN:
	        case miniScillaParser.OPTION:
	        case miniScillaParser.HEX:
	        case miniScillaParser.INTTY:
	        case miniScillaParser.BYSTR:
	        case miniScillaParser.BNUM:
	        case miniScillaParser.MESSAGE:
	        case miniScillaParser.EVENT_TY:
	        case miniScillaParser.CID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 381;
	            localctx.c = this.scid();
	            break;
	        case miniScillaParser.LPAREN:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 382;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 383;
	            localctx.p = this.pattern();
	            this.state = 384;
	            this.match(miniScillaParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exp_pm_clause() {
	    let localctx = new Exp_pm_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, miniScillaParser.RULE_exp_pm_clause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 388;
	        this.match(miniScillaParser.BAR);
	        this.state = 389;
	        localctx.p = this.pattern();
	        this.state = 390;
	        this.match(miniScillaParser.ARROW);
	        this.state = 391;
	        localctx.e = this.exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	msg_entry() {
	    let localctx = new Msg_entryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, miniScillaParser.RULE_msg_entry);
	    try {
	        this.state = 401;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 393;
	            localctx.i = this.sid();
	            this.state = 394;
	            this.match(miniScillaParser.COLON);
	            this.state = 395;
	            localctx.l = this.lit();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 397;
	            localctx.i = this.sid();
	            this.state = 398;
	            this.match(miniScillaParser.COLON);
	            this.state = 399;
	            localctx.v = this.sid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtin_args() {
	    let localctx = new Builtin_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, miniScillaParser.RULE_builtin_args);
	    try {
	        this.state = 410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.BYSTR:
	        case miniScillaParser.ID:
	        case miniScillaParser.SPID:
	        case miniScillaParser.CID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 404; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 403;
	            		localctx.args = this.sid();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 406; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case miniScillaParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 408;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 409;
	            this.match(miniScillaParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exp_term() {
	    let localctx = new Exp_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, miniScillaParser.RULE_exp_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        localctx.e = this.exp();
	        this.state = 413;
	        this.match(miniScillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_term() {
	    let localctx = new Type_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, miniScillaParser.RULE_type_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 415;
	        localctx.t = this.typ(0);
	        this.state = 416;
	        this.match(miniScillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, miniScillaParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.match(miniScillaParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sid() {
	    let localctx = new SidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, miniScillaParser.RULE_sid);
	    try {
	        this.state = 426;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.ID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 420;
	            localctx.name = this.identifier();
	            break;
	        case miniScillaParser.SPID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 421;
	            localctx.name_spid = this.match(miniScillaParser.SPID);
	            break;
	        case miniScillaParser.BYSTR:
	        case miniScillaParser.CID:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 422;
	            localctx.ns = this.cid();
	            this.state = 423;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 424;
	            localctx.name = this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scid() {
	    let localctx = new ScidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, miniScillaParser.RULE_scid);
	    try {
	        this.state = 439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 428;
	            localctx.name = this.cid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 429;
	            localctx.ns = this.cid();
	            this.state = 430;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 431;
	            localctx.name = this.cid();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 433;
	            localctx.ns_hex = this.match(miniScillaParser.HEX);
	            this.state = 434;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 435;
	            localctx.name = this.cid();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 436;
	            localctx.bool = this.match(miniScillaParser.BOOLEAN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 437;
	            localctx.option = this.match(miniScillaParser.OPTION);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 438;
	            localctx.prim = this.prim_types();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cid() {
	    let localctx = new CidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, miniScillaParser.RULE_cid);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 441;
	        _la = this._input.LA(1);
	        if(!(_la===miniScillaParser.BYSTR || _la===miniScillaParser.CID)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_annot() {
	    let localctx = new Type_annotContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, miniScillaParser.RULE_type_annot);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 443;
	        this.match(miniScillaParser.COLON);
	        this.state = 444;
	        localctx.t = this.typ(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id_with_typ() {
	    let localctx = new Id_with_typContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, miniScillaParser.RULE_id_with_typ);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        localctx.n = this.identifier();
	        this.state = 447;
	        localctx.t = this.type_annot();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, miniScillaParser.RULE_stmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 530;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LoadContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 449;
	            localctx.l = this.identifier();
	            this.state = 450;
	            this.match(miniScillaParser.FETCH);
	            this.state = 451;
	            localctx.r = this.sid();
	            break;

	        case 2:
	            localctx = new RemoteFetchContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 453;
	            localctx.r = this.remote_fetch_stmt();
	            break;

	        case 3:
	            localctx = new StoreContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 454;
	            localctx.l = this.identifier();
	            this.state = 455;
	            this.match(miniScillaParser.ASSIGN);
	            this.state = 456;
	            localctx.r = this.sid();
	            break;

	        case 4:
	            localctx = new BindContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 458;
	            localctx.l = this.identifier();
	            this.state = 459;
	            this.match(miniScillaParser.EQ);
	            this.state = 460;
	            localctx.r = this.exp();
	            break;

	        case 5:
	            localctx = new ReadFromBCContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 462;
	            localctx.l = this.identifier();
	            this.state = 463;
	            this.match(miniScillaParser.FETCH);
	            this.state = 464;
	            this.match(miniScillaParser.AND);
	            this.state = 465;
	            localctx.c = this.cid();
	            break;

	        case 6:
	            localctx = new MapGetContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 467;
	            localctx.l = this.identifier();
	            this.state = 468;
	            this.match(miniScillaParser.FETCH);
	            this.state = 469;
	            localctx.r = this.identifier();
	            this.state = 471; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 470;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 473; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.LSQB);
	            break;

	        case 7:
	            localctx = new MapGetExistsContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 475;
	            localctx.l = this.identifier();
	            this.state = 476;
	            this.match(miniScillaParser.FETCH);
	            this.state = 477;
	            this.match(miniScillaParser.EXISTS);
	            this.state = 478;
	            localctx.r = this.identifier();
	            this.state = 480; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 479;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 482; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.LSQB);
	            break;

	        case 8:
	            localctx = new MapUpdateContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 484;
	            localctx.l = this.identifier();
	            this.state = 486; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 485;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 488; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.LSQB);
	            this.state = 490;
	            this.match(miniScillaParser.ASSIGN);
	            this.state = 491;
	            localctx.r = this.sid();
	            break;

	        case 9:
	            localctx = new MapUpdateDeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 493;
	            this.match(miniScillaParser.DELETE);
	            this.state = 494;
	            localctx.l = this.identifier();
	            this.state = 496; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 495;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 498; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.LSQB);
	            break;

	        case 10:
	            localctx = new AcceptContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 500;
	            this.match(miniScillaParser.ACCEPT);
	            break;

	        case 11:
	            localctx = new SendContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 501;
	            this.match(miniScillaParser.SEND);
	            this.state = 502;
	            localctx.m = this.sid();
	            break;

	        case 12:
	            localctx = new CreateEvntContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 503;
	            this.match(miniScillaParser.EVENT);
	            this.state = 504;
	            localctx.m = this.sid();
	            break;

	        case 13:
	            localctx = new ThrowContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 505;
	            this.match(miniScillaParser.THROW);
	            this.state = 507;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	            if(la_===1) {
	                this.state = 506;
	                localctx.mopt = this.sid();

	            }
	            break;

	        case 14:
	            localctx = new MatchStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 509;
	            this.match(miniScillaParser.MATCH);
	            this.state = 510;
	            localctx.x = this.sid();
	            this.state = 511;
	            this.match(miniScillaParser.WITH);
	            this.state = 513; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 512;
	                localctx._stmt_pm_clause = this.stmt_pm_clause();
	                localctx.cs.push(localctx._stmt_pm_clause);
	                this.state = 515; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.BAR);
	            this.state = 517;
	            this.match(miniScillaParser.END);
	            break;

	        case 15:
	            localctx = new CallProcContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 519;
	            localctx.p = this.component_id();
	            this.state = 523;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 520;
	                    localctx._sid = this.sid();
	                    localctx.args.push(localctx._sid); 
	                }
	                this.state = 525;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	            }

	            break;

	        case 16:
	            localctx = new IterateContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 526;
	            this.match(miniScillaParser.FORALL);
	            this.state = 527;
	            localctx.l = this.sid();
	            this.state = 528;
	            localctx.p = this.component_id();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	remote_fetch_stmt() {
	    let localctx = new Remote_fetch_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, miniScillaParser.RULE_remote_fetch_stmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 585;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 532;
	            localctx.l = this.identifier();
	            this.state = 533;
	            this.match(miniScillaParser.FETCH);
	            this.state = 534;
	            this.match(miniScillaParser.AND);
	            this.state = 535;
	            localctx.adr_id = this.identifier();
	            this.state = 536;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 537;
	            localctx.r = this.sid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 539;
	            localctx.l = this.identifier();
	            this.state = 540;
	            this.match(miniScillaParser.FETCH);
	            this.state = 541;
	            this.match(miniScillaParser.AND);
	            this.state = 542;
	            localctx.adr_spid = this.match(miniScillaParser.SPID);
	            this.state = 543;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 544;
	            this.match(miniScillaParser.SPID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 546;
	            localctx.l = this.identifier();
	            this.state = 547;
	            this.match(miniScillaParser.FETCH);
	            this.state = 548;
	            this.match(miniScillaParser.AND);
	            this.state = 549;
	            localctx.adr_id = this.identifier();
	            this.state = 550;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 551;
	            this.match(miniScillaParser.LPAREN);
	            this.state = 552;
	            localctx.r = this.sid();
	            this.state = 553;
	            this.match(miniScillaParser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 555;
	            localctx.l = this.identifier();
	            this.state = 556;
	            this.match(miniScillaParser.FETCH);
	            this.state = 557;
	            this.match(miniScillaParser.AND);
	            this.state = 558;
	            localctx.adr_id = this.identifier();
	            this.state = 559;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 560;
	            localctx.r_id = this.identifier();
	            this.state = 562; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 561;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 564; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.LSQB);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 566;
	            localctx.l = this.identifier();
	            this.state = 567;
	            this.match(miniScillaParser.FETCH);
	            this.state = 568;
	            this.match(miniScillaParser.AND);
	            this.state = 569;
	            this.match(miniScillaParser.EXISTS);
	            this.state = 570;
	            localctx.adr_id = this.identifier();
	            this.state = 571;
	            this.match(miniScillaParser.PERIOD);
	            this.state = 572;
	            localctx.r_id = this.identifier();
	            this.state = 574; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 573;
	                localctx._map_access = this.map_access();
	                localctx.keys.push(localctx._map_access);
	                this.state = 576; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.LSQB);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 578;
	            localctx.l = this.identifier();
	            this.state = 579;
	            this.match(miniScillaParser.FETCH);
	            this.state = 580;
	            this.match(miniScillaParser.AND);
	            this.state = 581;
	            localctx.adr = this.sid();
	            this.state = 582;
	            this.match(miniScillaParser.AS);
	            this.state = 583;
	            localctx.t = this.address_typ();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt_pm_clause() {
	    let localctx = new Stmt_pm_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, miniScillaParser.RULE_stmt_pm_clause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.match(miniScillaParser.BAR);
	        this.state = 588;
	        localctx.p = this.pattern();
	        this.state = 589;
	        this.match(miniScillaParser.ARROW);
	        this.state = 600;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << miniScillaParser.FORALL) | (1 << miniScillaParser.MATCH) | (1 << miniScillaParser.SEND) | (1 << miniScillaParser.EVENT) | (1 << miniScillaParser.ACCEPT) | (1 << miniScillaParser.DELETE) | (1 << miniScillaParser.THROW))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (miniScillaParser.BYSTR - 58)) | (1 << (miniScillaParser.ID - 58)) | (1 << (miniScillaParser.CID - 58)))) !== 0)) {
	            this.state = 590;
	            localctx._stmt = this.stmt();
	            localctx.ss.push(localctx._stmt);
	            this.state = 595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.SEMICOLON) {
	                this.state = 591;
	                this.match(miniScillaParser.SEMICOLON);
	                this.state = 592;
	                localctx._stmt = this.stmt();
	                localctx.ss.push(localctx._stmt);
	                this.state = 597;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 602;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmts() {
	    let localctx = new StmtsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, miniScillaParser.RULE_stmts);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 603;
	        localctx._stmt = this.stmt();
	        localctx.ss.push(localctx._stmt);
	        this.state = 608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.SEMICOLON) {
	            this.state = 604;
	            this.match(miniScillaParser.SEMICOLON);
	            this.state = 605;
	            localctx._stmt = this.stmt();
	            localctx.ss.push(localctx._stmt);
	            this.state = 610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmts_term() {
	    let localctx = new Stmts_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, miniScillaParser.RULE_stmts_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 611;
	        localctx.ss = this.stmts();
	        this.state = 612;
	        this.match(miniScillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_pair() {
	    let localctx = new Param_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, miniScillaParser.RULE_param_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        localctx.iwt = this.id_with_typ();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component() {
	    let localctx = new ComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, miniScillaParser.RULE_component);
	    try {
	        this.state = 618;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.TRANSITION:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 616;
	            localctx.t = this.transition();
	            break;
	        case miniScillaParser.PROCEDURE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 617;
	            localctx.p = this.procedure();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure() {
	    let localctx = new ProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, miniScillaParser.RULE_procedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this.match(miniScillaParser.PROCEDURE);
	        this.state = 621;
	        localctx.t = this.component_id();
	        this.state = 622;
	        localctx.params = this.component_params();
	        this.state = 623;
	        localctx.ss = this.component_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transition() {
	    let localctx = new TransitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, miniScillaParser.RULE_transition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this.match(miniScillaParser.TRANSITION);
	        this.state = 626;
	        localctx.t = this.component_id();
	        this.state = 627;
	        localctx.params = this.component_params();
	        this.state = 628;
	        localctx.ss = this.component_body();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_id() {
	    let localctx = new Component_idContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, miniScillaParser.RULE_component_id);
	    try {
	        this.state = 632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case miniScillaParser.BYSTR:
	        case miniScillaParser.CID:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 630;
	            localctx.c = this.cid();
	            break;
	        case miniScillaParser.ID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 631;
	            localctx.i = this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_params() {
	    let localctx = new Component_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, miniScillaParser.RULE_component_params);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.match(miniScillaParser.LPAREN);
	        this.state = 645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.ID) {
	            this.state = 635;
	            localctx._param_pair = this.param_pair();
	            localctx.params.push(localctx._param_pair);
	            this.state = 640;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.COMMA) {
	                this.state = 636;
	                this.match(miniScillaParser.COMMA);
	                this.state = 637;
	                localctx._param_pair = this.param_pair();
	                localctx.params.push(localctx._param_pair);
	                this.state = 642;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 648;
	        this.match(miniScillaParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	component_body() {
	    let localctx = new Component_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, miniScillaParser.RULE_component_body);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << miniScillaParser.FORALL) | (1 << miniScillaParser.MATCH) | (1 << miniScillaParser.SEND) | (1 << miniScillaParser.EVENT) | (1 << miniScillaParser.ACCEPT) | (1 << miniScillaParser.DELETE) | (1 << miniScillaParser.THROW))) !== 0) || ((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (miniScillaParser.BYSTR - 58)) | (1 << (miniScillaParser.ID - 58)) | (1 << (miniScillaParser.CID - 58)))) !== 0)) {
	            this.state = 650;
	            localctx.ss = this.stmts();
	        }

	        this.state = 653;
	        this.match(miniScillaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, miniScillaParser.RULE_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(miniScillaParser.FIELD);
	        this.state = 656;
	        localctx.iwt = this.id_with_typ();
	        this.state = 657;
	        this.match(miniScillaParser.EQ);
	        this.state = 658;
	        localctx.rhs = this.exp();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_constraint() {
	    let localctx = new With_constraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, miniScillaParser.RULE_with_constraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 660;
	        this.match(miniScillaParser.WITH);
	        this.state = 661;
	        localctx.f = this.exp();
	        this.state = 662;
	        this.match(miniScillaParser.ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contract() {
	    let localctx = new ContractContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, miniScillaParser.RULE_contract);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 664;
	        this.match(miniScillaParser.CONTRACT);
	        this.state = 665;
	        localctx.c = this.cid();
	        this.state = 666;
	        this.match(miniScillaParser.LPAREN);
	        this.state = 677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.ID) {
	            this.state = 667;
	            localctx._param_pair = this.param_pair();
	            localctx.params.push(localctx._param_pair);
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===miniScillaParser.COMMA) {
	                this.state = 668;
	                this.match(miniScillaParser.COMMA);
	                this.state = 669;
	                localctx._param_pair = this.param_pair();
	                localctx.params.push(localctx._param_pair);
	                this.state = 674;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 680;
	        this.match(miniScillaParser.RPAREN);
	        this.state = 682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===miniScillaParser.WITH) {
	            this.state = 681;
	            localctx.ct = this.with_constraint();
	        }

	        this.state = 687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.FIELD) {
	            this.state = 684;
	            localctx._field = this.field();
	            localctx.fs.push(localctx._field);
	            this.state = 689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.TRANSITION || _la===miniScillaParser.PROCEDURE) {
	            this.state = 690;
	            localctx._component = this.component();
	            localctx.comps.push(localctx._component);
	            this.state = 695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tconstr() {
	    let localctx = new TconstrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, miniScillaParser.RULE_tconstr);
	    var _la = 0; // Token type
	    try {
	        this.state = 706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 696;
	            this.match(miniScillaParser.BAR);
	            this.state = 697;
	            localctx.tn = this.cid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 698;
	            this.match(miniScillaParser.BAR);
	            this.state = 699;
	            localctx.tn = this.cid();
	            this.state = 700;
	            this.match(miniScillaParser.OF);
	            this.state = 702; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 701;
	                localctx._targ = this.targ();
	                localctx.t.push(localctx._targ);
	                this.state = 704; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.MAP || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (miniScillaParser.LPAREN - 37)) | (1 << (miniScillaParser.BOOLEAN - 37)) | (1 << (miniScillaParser.OPTION - 37)) | (1 << (miniScillaParser.HEX - 37)) | (1 << (miniScillaParser.INTTY - 37)) | (1 << (miniScillaParser.BYSTR - 37)) | (1 << (miniScillaParser.BNUM - 37)) | (1 << (miniScillaParser.MESSAGE - 37)) | (1 << (miniScillaParser.EVENT_TY - 37)) | (1 << (miniScillaParser.CID - 37)) | (1 << (miniScillaParser.TID - 37)))) !== 0));
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	libentry() {
	    let localctx = new LibentryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, miniScillaParser.RULE_libentry);
	    var _la = 0; // Token type
	    try {
	        this.state = 726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 708;
	            this.match(miniScillaParser.LET);
	            this.state = 709;
	            localctx.ns = this.identifier();
	            this.state = 711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===miniScillaParser.COLON) {
	                this.state = 710;
	                localctx.t = this.type_annot();
	            }

	            this.state = 713;
	            this.match(miniScillaParser.EQ);
	            this.state = 714;
	            localctx.e = this.exp();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 716;
	            this.match(miniScillaParser.TYPE);
	            this.state = 717;
	            localctx.tname = this.cid();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 718;
	            this.match(miniScillaParser.TYPE);
	            this.state = 719;
	            localctx.tname = this.cid();
	            this.state = 720;
	            this.match(miniScillaParser.EQ);
	            this.state = 722; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 721;
	                localctx._tconstr = this.tconstr();
	                localctx.constrs.push(localctx._tconstr);
	                this.state = 724; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===miniScillaParser.BAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	library() {
	    let localctx = new LibraryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, miniScillaParser.RULE_library);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 728;
	        this.match(miniScillaParser.LIBRARY);
	        this.state = 729;
	        localctx.n = this.cid();
	        this.state = 733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.LET || _la===miniScillaParser.TYPE) {
	            this.state = 730;
	            localctx._libentry = this.libentry();
	            localctx.ls.push(localctx._libentry);
	            this.state = 735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lmodule() {
	    let localctx = new LmoduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, miniScillaParser.RULE_lmodule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.match(miniScillaParser.SCILLA_VERSION);
	        this.state = 737;
	        localctx.cver = this.match(miniScillaParser.NUMBER);
	        this.state = 738;
	        localctx.els = this.imports();
	        this.state = 739;
	        localctx.l = this.library();
	        this.state = 740;
	        this.match(miniScillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importname() {
	    let localctx = new ImportnameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, miniScillaParser.RULE_importname);
	    try {
	        this.state = 747;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 742;
	            localctx.c = this.cid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 743;
	            localctx.c1 = this.cid();
	            this.state = 744;
	            this.match(miniScillaParser.AS);
	            this.state = 745;
	            localctx.c2 = this.cid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imports() {
	    let localctx = new ImportsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, miniScillaParser.RULE_imports);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 749;
	        this.match(miniScillaParser.IMPORT);
	        this.state = 753;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===miniScillaParser.BYSTR || _la===miniScillaParser.CID) {
	            this.state = 750;
	            localctx._importname = this.importname();
	            localctx.els.push(localctx._importname);
	            this.state = 755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cmodule() {
	    let localctx = new CmoduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, miniScillaParser.RULE_cmodule);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 756;
	        this.match(miniScillaParser.SCILLA_VERSION);
	        this.state = 757;
	        localctx.cver = this.match(miniScillaParser.NUMBER);
	        this.state = 759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===miniScillaParser.IMPORT) {
	            this.state = 758;
	            localctx.els = this.imports();
	        }

	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===miniScillaParser.LIBRARY) {
	            this.state = 761;
	            localctx.ls = this.library();
	        }

	        this.state = 764;
	        localctx.c = this.contract();
	        this.state = 765;
	        this.match(miniScillaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

miniScillaParser.EOF = antlr4.Token.EOF;
miniScillaParser.T__0 = 1;
miniScillaParser.FORALL = 2;
miniScillaParser.BUILTIN = 3;
miniScillaParser.LIBRARY = 4;
miniScillaParser.IMPORT = 5;
miniScillaParser.LET = 6;
miniScillaParser.IN = 7;
miniScillaParser.MATCH = 8;
miniScillaParser.WITH = 9;
miniScillaParser.END = 10;
miniScillaParser.FUN = 11;
miniScillaParser.TFUN = 12;
miniScillaParser.CONTRACT = 13;
miniScillaParser.TRANSITION = 14;
miniScillaParser.SEND = 15;
miniScillaParser.EVENT = 16;
miniScillaParser.FIELD = 17;
miniScillaParser.ACCEPT = 18;
miniScillaParser.EXISTS = 19;
miniScillaParser.DELETE = 20;
miniScillaParser.EMP = 21;
miniScillaParser.MAP = 22;
miniScillaParser.SCILLA_VERSION = 23;
miniScillaParser.TYPE = 24;
miniScillaParser.OF = 25;
miniScillaParser.TRY = 26;
miniScillaParser.CATCH = 27;
miniScillaParser.AS = 28;
miniScillaParser.PROCEDURE = 29;
miniScillaParser.THROW = 30;
miniScillaParser.SEMICOLON = 31;
miniScillaParser.COLON = 32;
miniScillaParser.PERIOD = 33;
miniScillaParser.BAR = 34;
miniScillaParser.LSQB = 35;
miniScillaParser.RSQB = 36;
miniScillaParser.LPAREN = 37;
miniScillaParser.RPAREN = 38;
miniScillaParser.LBRACE = 39;
miniScillaParser.RBRACE = 40;
miniScillaParser.COMMA = 41;
miniScillaParser.ARROW = 42;
miniScillaParser.TARROW = 43;
miniScillaParser.EQ = 44;
miniScillaParser.AND = 45;
miniScillaParser.FETCH = 46;
miniScillaParser.ASSIGN = 47;
miniScillaParser.AT = 48;
miniScillaParser.UNDERSCORE = 49;
miniScillaParser.BlockComment = 50;
miniScillaParser.NUMBER = 51;
miniScillaParser.STRING = 52;
miniScillaParser.FLOAT = 53;
miniScillaParser.BOOLEAN = 54;
miniScillaParser.OPTION = 55;
miniScillaParser.HEX = 56;
miniScillaParser.INTTY = 57;
miniScillaParser.BYSTR = 58;
miniScillaParser.BNUM = 59;
miniScillaParser.MESSAGE = 60;
miniScillaParser.EVENT_TY = 61;
miniScillaParser.WS = 62;
miniScillaParser.TOSKIP = 63;
miniScillaParser.ID = 64;
miniScillaParser.SPID = 65;
miniScillaParser.CID = 66;
miniScillaParser.TID = 67;

miniScillaParser.RULE_int_ = 0;
miniScillaParser.RULE_prim_types = 1;
miniScillaParser.RULE_t_map_key = 2;
miniScillaParser.RULE_t_map_value_args = 3;
miniScillaParser.RULE_t_map_value = 4;
miniScillaParser.RULE_t_map_value_allow_targs = 5;
miniScillaParser.RULE_address_typ = 6;
miniScillaParser.RULE_typ = 7;
miniScillaParser.RULE_targ = 8;
miniScillaParser.RULE_address_type_field = 9;
miniScillaParser.RULE_exp = 10;
miniScillaParser.RULE_simple_exp = 11;
miniScillaParser.RULE_atomic_exp = 12;
miniScillaParser.RULE_lit = 13;
miniScillaParser.RULE_ctargs = 14;
miniScillaParser.RULE_map_access = 15;
miniScillaParser.RULE_pattern = 16;
miniScillaParser.RULE_arg_pattern = 17;
miniScillaParser.RULE_exp_pm_clause = 18;
miniScillaParser.RULE_msg_entry = 19;
miniScillaParser.RULE_builtin_args = 20;
miniScillaParser.RULE_exp_term = 21;
miniScillaParser.RULE_type_term = 22;
miniScillaParser.RULE_identifier = 23;
miniScillaParser.RULE_sid = 24;
miniScillaParser.RULE_scid = 25;
miniScillaParser.RULE_cid = 26;
miniScillaParser.RULE_type_annot = 27;
miniScillaParser.RULE_id_with_typ = 28;
miniScillaParser.RULE_stmt = 29;
miniScillaParser.RULE_remote_fetch_stmt = 30;
miniScillaParser.RULE_stmt_pm_clause = 31;
miniScillaParser.RULE_stmts = 32;
miniScillaParser.RULE_stmts_term = 33;
miniScillaParser.RULE_param_pair = 34;
miniScillaParser.RULE_component = 35;
miniScillaParser.RULE_procedure = 36;
miniScillaParser.RULE_transition = 37;
miniScillaParser.RULE_component_id = 38;
miniScillaParser.RULE_component_params = 39;
miniScillaParser.RULE_component_body = 40;
miniScillaParser.RULE_field = 41;
miniScillaParser.RULE_with_constraint = 42;
miniScillaParser.RULE_contract = 43;
miniScillaParser.RULE_tconstr = 44;
miniScillaParser.RULE_libentry = 45;
miniScillaParser.RULE_library = 46;
miniScillaParser.RULE_lmodule = 47;
miniScillaParser.RULE_importname = 48;
miniScillaParser.RULE_imports = 49;
miniScillaParser.RULE_cmodule = 50;

class Int_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_int_;
    }

	NUMBER() {
	    return this.getToken(miniScillaParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterInt_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitInt_(this);
		}
	}


}



class Prim_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_prim_types;
    }

	INTTY() {
	    return this.getToken(miniScillaParser.INTTY, 0);
	};

	BYSTR() {
	    return this.getToken(miniScillaParser.BYSTR, 0);
	};

	BNUM() {
	    return this.getToken(miniScillaParser.BNUM, 0);
	};

	MESSAGE() {
	    return this.getToken(miniScillaParser.MESSAGE, 0);
	};

	EVENT_TY() {
	    return this.getToken(miniScillaParser.EVENT_TY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterPrim_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitPrim_types(this);
		}
	}


}



class T_map_keyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_t_map_key;
        this.kt_to_map = null; // ScidContext
        this.kt = null; // Address_typContext
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterT_map_key(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitT_map_key(this);
		}
	}


}



class T_map_value_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_t_map_value_args;
        this.t = null; // T_map_value_allow_targsContext
        this.d = null; // ScidContext
        this.k = null; // T_map_keyContext
        this.v = null; // T_map_valueContext
    }

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	t_map_value_allow_targs() {
	    return this.getTypedRuleContext(T_map_value_allow_targsContext,0);
	};

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	MAP() {
	    return this.getToken(miniScillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterT_map_value_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitT_map_value_args(this);
		}
	}


}



class T_map_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_t_map_value;
        this.d = null; // ScidContext
        this.k = null; // T_map_keyContext
        this.v = null; // T_map_valueContext
        this.t = null; // T_map_value_allow_targsContext
        this.vt = null; // Address_typContext
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	MAP() {
	    return this.getToken(miniScillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	t_map_value_allow_targs() {
	    return this.getTypedRuleContext(T_map_value_allow_targsContext,0);
	};

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	prim_types() {
	    return this.getTypedRuleContext(Prim_typesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterT_map_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitT_map_value(this);
		}
	}


}



class T_map_value_allow_targsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_t_map_value_allow_targs;
        this.d = null; // ScidContext
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	t_map_value_args = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(T_map_value_argsContext);
	    } else {
	        return this.getTypedRuleContext(T_map_value_argsContext,i);
	    }
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterT_map_value_allow_targs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitT_map_value_allow_targs(this);
		}
	}


}



class Address_typContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_address_typ;
        this.d = null; // CidContext
        this._address_type_field = null; // Address_type_fieldContext
        this.fs = []; // of Address_type_fieldContexts
        this._param_pair = null; // Param_pairContext
        this.ps = []; // of Param_pairContexts
    }

	WITH() {
	    return this.getToken(miniScillaParser.WITH, 0);
	};

	END() {
	    return this.getToken(miniScillaParser.END, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	CONTRACT() {
	    return this.getToken(miniScillaParser.CONTRACT, 0);
	};

	address_type_field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Address_type_fieldContext);
	    } else {
	        return this.getTypedRuleContext(Address_type_fieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.COMMA);
	    } else {
	        return this.getToken(miniScillaParser.COMMA, i);
	    }
	};


	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.LPAREN);
	    } else {
	        return this.getToken(miniScillaParser.LPAREN, i);
	    }
	};


	param_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_pairContext);
	    } else {
	        return this.getTypedRuleContext(Param_pairContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterAddress_typ(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitAddress_typ(this);
		}
	}


}



class TypContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_typ;
        this.t1 = null; // TypContext
        this.d = null; // ScidContext
        this._targ = null; // TargContext
        this.targs = []; // of TargContexts
        this.k = null; // T_map_keyContext
        this.v = null; // T_map_valueContext
        this.t = null; // TypContext
        this.t_to_map = null; // Address_typContext
        this.tv = null; // Token
        this.t_var = null; // Token
        this.t2 = null; // TypContext
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	MAP() {
	    return this.getToken(miniScillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	typ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypContext);
	    } else {
	        return this.getTypedRuleContext(TypContext,i);
	    }
	};

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	FORALL() {
	    return this.getToken(miniScillaParser.FORALL, 0);
	};

	PERIOD() {
	    return this.getToken(miniScillaParser.PERIOD, 0);
	};

	TID() {
	    return this.getToken(miniScillaParser.TID, 0);
	};

	prim_types() {
	    return this.getTypedRuleContext(Prim_typesContext,0);
	};

	TARROW() {
	    return this.getToken(miniScillaParser.TARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterTyp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitTyp(this);
		}
	}


}



class TargContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_targ;
        this.t = null; // TypContext
        this.d = null; // ScidContext
        this.t_var = null; // Token
        this.t_to_map = null; // Address_typContext
        this.k = null; // T_map_keyContext
        this.v = null; // T_map_valueContext
    }

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	TID() {
	    return this.getToken(miniScillaParser.TID, 0);
	};

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	MAP() {
	    return this.getToken(miniScillaParser.MAP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterTarg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitTarg(this);
		}
	}


}



class Address_type_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_address_type_field;
        this.id = null; // IdentifierContext
        this.ty = null; // TypContext
    }

	FIELD() {
	    return this.getToken(miniScillaParser.FIELD, 0);
	};

	COLON() {
	    return this.getToken(miniScillaParser.COLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterAddress_type_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitAddress_type_field(this);
		}
	}


}



class ExpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_exp;
        this.f = null; // Simple_expContext
    }

	simple_exp() {
	    return this.getTypedRuleContext(Simple_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterExp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitExp(this);
		}
	}


}



class Simple_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_simple_exp;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AppContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.f_var = null; // SidContext;
        this._sid = null; // SidContext;
        this.args = []; // of SidContexts;
        super.copyFrom(ctx);
    }

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitApp(this);
		}
	}


}

miniScillaParser.AppContext = AppContext;

class MessageContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this._msg_entry = null; // Msg_entryContext;
        this.es = []; // of Msg_entryContexts;
        super.copyFrom(ctx);
    }

	LBRACE() {
	    return this.getToken(miniScillaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(miniScillaParser.RBRACE, 0);
	};

	msg_entry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Msg_entryContext);
	    } else {
	        return this.getTypedRuleContext(Msg_entryContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.SEMICOLON);
	    } else {
	        return this.getToken(miniScillaParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMessage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMessage(this);
		}
	}


}

miniScillaParser.MessageContext = MessageContext;

class LetContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.x = null; // IdentifierContext;
        this.ty = null; // TypContext;
        this.f = null; // Simple_expContext;
        this.e = null; // ExpContext;
        super.copyFrom(ctx);
    }

	LET() {
	    return this.getToken(miniScillaParser.LET, 0);
	};

	EQ() {
	    return this.getToken(miniScillaParser.EQ, 0);
	};

	IN() {
	    return this.getToken(miniScillaParser.IN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	simple_exp() {
	    return this.getTypedRuleContext(Simple_expContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	COLON() {
	    return this.getToken(miniScillaParser.COLON, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterLet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitLet(this);
		}
	}


}

miniScillaParser.LetContext = LetContext;

class AtomicContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.a = null; // Atomic_expContext;
        super.copyFrom(ctx);
    }

	atomic_exp() {
	    return this.getTypedRuleContext(Atomic_expContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterAtomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitAtomic(this);
		}
	}


}

miniScillaParser.AtomicContext = AtomicContext;

class TAppContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.f = null; // SidContext;
        this._targ = null; // TargContext;
        this.targs = []; // of TargContexts;
        super.copyFrom(ctx);
    }

	AT() {
	    return this.getToken(miniScillaParser.AT, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterTApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitTApp(this);
		}
	}


}

miniScillaParser.TAppContext = TAppContext;

class TFunContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.i = null; // Token;
        this.e = null; // ExpContext;
        super.copyFrom(ctx);
    }

	TFUN() {
	    return this.getToken(miniScillaParser.TFUN, 0);
	};

	ARROW() {
	    return this.getToken(miniScillaParser.ARROW, 0);
	};

	TID() {
	    return this.getToken(miniScillaParser.TID, 0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterTFun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitTFun(this);
		}
	}


}

miniScillaParser.TFunContext = TFunContext;

class DataConstructorAppContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // ScidContext;
        this.ts = null; // CtargsContext;
        this._sid = null; // SidContext;
        this.args = []; // of SidContexts;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	ctargs() {
	    return this.getTypedRuleContext(CtargsContext,0);
	};

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterDataConstructorApp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitDataConstructorApp(this);
		}
	}


}

miniScillaParser.DataConstructorAppContext = DataConstructorAppContext;

class FunContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.id = null; // IdentifierContext;
        this.ty = null; // TypContext;
        this.e = null; // ExpContext;
        super.copyFrom(ctx);
    }

	FUN() {
	    return this.getToken(miniScillaParser.FUN, 0);
	};

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	COLON() {
	    return this.getToken(miniScillaParser.COLON, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	ARROW() {
	    return this.getToken(miniScillaParser.ARROW, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterFun(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitFun(this);
		}
	}


}

miniScillaParser.FunContext = FunContext;

class BuiltinContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.b = null; // IdentifierContext;
        this._ctargs = null; // CtargsContext;
        this.targs = []; // of CtargsContexts;
        this.xs = null; // Builtin_argsContext;
        super.copyFrom(ctx);
    }

	BUILTIN() {
	    return this.getToken(miniScillaParser.BUILTIN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	builtin_args() {
	    return this.getTypedRuleContext(Builtin_argsContext,0);
	};

	ctargs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CtargsContext);
	    } else {
	        return this.getTypedRuleContext(CtargsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterBuiltin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitBuiltin(this);
		}
	}


}

miniScillaParser.BuiltinContext = BuiltinContext;

class MatchContext extends Simple_expContext {

    constructor(parser, ctx) {
        super(parser);
        this.x_sid = null; // SidContext;
        this.cs = null; // Exp_pm_clauseContext;
        super.copyFrom(ctx);
    }

	MATCH() {
	    return this.getToken(miniScillaParser.MATCH, 0);
	};

	WITH() {
	    return this.getToken(miniScillaParser.WITH, 0);
	};

	END() {
	    return this.getToken(miniScillaParser.END, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	exp_pm_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Exp_pm_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Exp_pm_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMatch(this);
		}
	}


}

miniScillaParser.MatchContext = MatchContext;

class Atomic_expContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_atomic_exp;
        this.i = null; // SidContext
        this.l = null; // LitContext
    }

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	lit() {
	    return this.getTypedRuleContext(LitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterAtomic_exp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitAtomic_exp(this);
		}
	}


}



class LitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_lit;
        this.i = null; // CidContext
        this.i_int = null; // Int_Context
        this.i_number = null; // Token
        this.n = null; // Token
        this.h = null; // Token
        this.s = null; // Token
        this.kt = null; // T_map_keyContext
        this.vt = null; // T_map_valueContext
        this.b = null; // Token
    }

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	INTTY() {
	    return this.getToken(miniScillaParser.INTTY, 0);
	};

	int_() {
	    return this.getTypedRuleContext(Int_Context,0);
	};

	BNUM() {
	    return this.getToken(miniScillaParser.BNUM, 0);
	};

	NUMBER() {
	    return this.getToken(miniScillaParser.NUMBER, 0);
	};

	HEX() {
	    return this.getToken(miniScillaParser.HEX, 0);
	};

	STRING() {
	    return this.getToken(miniScillaParser.STRING, 0);
	};

	EMP() {
	    return this.getToken(miniScillaParser.EMP, 0);
	};

	t_map_key() {
	    return this.getTypedRuleContext(T_map_keyContext,0);
	};

	t_map_value() {
	    return this.getTypedRuleContext(T_map_valueContext,0);
	};

	BOOLEAN() {
	    return this.getToken(miniScillaParser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterLit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitLit(this);
		}
	}


}



class CtargsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_ctargs;
        this.ts = null; // TargContext
    }

	LBRACE() {
	    return this.getToken(miniScillaParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(miniScillaParser.RBRACE, 0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterCtargs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitCtargs(this);
		}
	}


}



class Map_accessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_map_access;
        this.i = null; // SidContext
    }

	LSQB() {
	    return this.getToken(miniScillaParser.LSQB, 0);
	};

	RSQB() {
	    return this.getToken(miniScillaParser.RSQB, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMap_access(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMap_access(this);
		}
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_pattern;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class BinderContext extends PatternContext {

    constructor(parser, ctx) {
        super(parser);
        this.x = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterBinder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitBinder(this);
		}
	}


}

miniScillaParser.BinderContext = BinderContext;

class WildcardContext extends PatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNDERSCORE() {
	    return this.getToken(miniScillaParser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitWildcard(this);
		}
	}


}

miniScillaParser.WildcardContext = WildcardContext;

class ConstructorContext extends PatternContext {

    constructor(parser, ctx) {
        super(parser);
        this.c = null; // ScidContext;
        this.ps = null; // Arg_patternContext;
        super.copyFrom(ctx);
    }

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	arg_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Arg_patternContext);
	    } else {
	        return this.getTypedRuleContext(Arg_patternContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitConstructor(this);
		}
	}


}

miniScillaParser.ConstructorContext = ConstructorContext;

class Arg_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_arg_pattern;
        this.x = null; // IdentifierContext
        this.c = null; // ScidContext
        this.p = null; // PatternContext
    }

	UNDERSCORE() {
	    return this.getToken(miniScillaParser.UNDERSCORE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	scid() {
	    return this.getTypedRuleContext(ScidContext,0);
	};

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterArg_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitArg_pattern(this);
		}
	}


}



class Exp_pm_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_exp_pm_clause;
        this.p = null; // PatternContext
        this.e = null; // ExpContext
    }

	BAR() {
	    return this.getToken(miniScillaParser.BAR, 0);
	};

	ARROW() {
	    return this.getToken(miniScillaParser.ARROW, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterExp_pm_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitExp_pm_clause(this);
		}
	}


}



class Msg_entryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_msg_entry;
        this.i = null; // SidContext
        this.l = null; // LitContext
        this.v = null; // SidContext
    }

	COLON() {
	    return this.getToken(miniScillaParser.COLON, 0);
	};

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	lit() {
	    return this.getTypedRuleContext(LitContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMsg_entry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMsg_entry(this);
		}
	}


}



class Builtin_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_builtin_args;
        this.args = null; // SidContext
    }

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterBuiltin_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitBuiltin_args(this);
		}
	}


}



class Exp_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_exp_term;
        this.e = null; // ExpContext
    }

	EOF() {
	    return this.getToken(miniScillaParser.EOF, 0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterExp_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitExp_term(this);
		}
	}


}



class Type_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_type_term;
        this.t = null; // TypContext
    }

	EOF() {
	    return this.getToken(miniScillaParser.EOF, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterType_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitType_term(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_identifier;
    }

	ID() {
	    return this.getToken(miniScillaParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class SidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_sid;
        this.name = null; // IdentifierContext
        this.name_spid = null; // Token
        this.ns = null; // CidContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SPID() {
	    return this.getToken(miniScillaParser.SPID, 0);
	};

	PERIOD() {
	    return this.getToken(miniScillaParser.PERIOD, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterSid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitSid(this);
		}
	}


}



class ScidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_scid;
        this.name = null; // CidContext
        this.ns = null; // CidContext
        this.ns_hex = null; // Token
        this.bool = null; // Token
        this.option = null; // Token
        this.prim = null; // Prim_typesContext
    }

	cid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CidContext);
	    } else {
	        return this.getTypedRuleContext(CidContext,i);
	    }
	};

	PERIOD() {
	    return this.getToken(miniScillaParser.PERIOD, 0);
	};

	HEX() {
	    return this.getToken(miniScillaParser.HEX, 0);
	};

	BOOLEAN() {
	    return this.getToken(miniScillaParser.BOOLEAN, 0);
	};

	OPTION() {
	    return this.getToken(miniScillaParser.OPTION, 0);
	};

	prim_types() {
	    return this.getTypedRuleContext(Prim_typesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterScid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitScid(this);
		}
	}


}



class CidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_cid;
    }

	CID() {
	    return this.getToken(miniScillaParser.CID, 0);
	};

	BYSTR() {
	    return this.getToken(miniScillaParser.BYSTR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterCid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitCid(this);
		}
	}


}



class Type_annotContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_type_annot;
        this.t = null; // TypContext
    }

	COLON() {
	    return this.getToken(miniScillaParser.COLON, 0);
	};

	typ() {
	    return this.getTypedRuleContext(TypContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterType_annot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitType_annot(this);
		}
	}


}



class Id_with_typContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_id_with_typ;
        this.n = null; // IdentifierContext
        this.t = null; // Type_annotContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_annot() {
	    return this.getTypedRuleContext(Type_annotContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterId_with_typ(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitId_with_typ(this);
		}
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_stmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LoadContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // SidContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(miniScillaParser.FETCH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterLoad(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitLoad(this);
		}
	}


}

miniScillaParser.LoadContext = LoadContext;

class BindContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // ExpContext;
        super.copyFrom(ctx);
    }

	EQ() {
	    return this.getToken(miniScillaParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterBind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitBind(this);
		}
	}


}

miniScillaParser.BindContext = BindContext;

class RemoteFetchContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.r = null; // Remote_fetch_stmtContext;
        super.copyFrom(ctx);
    }

	remote_fetch_stmt() {
	    return this.getTypedRuleContext(Remote_fetch_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterRemoteFetch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitRemoteFetch(this);
		}
	}


}

miniScillaParser.RemoteFetchContext = RemoteFetchContext;

class MapUpdateContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        this.r = null; // SidContext;
        super.copyFrom(ctx);
    }

	ASSIGN() {
	    return this.getToken(miniScillaParser.ASSIGN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMapUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMapUpdate(this);
		}
	}


}

miniScillaParser.MapUpdateContext = MapUpdateContext;

class AcceptContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ACCEPT() {
	    return this.getToken(miniScillaParser.ACCEPT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterAccept(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitAccept(this);
		}
	}


}

miniScillaParser.AcceptContext = AcceptContext;

class MatchStmtContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.x = null; // SidContext;
        this._stmt_pm_clause = null; // Stmt_pm_clauseContext;
        this.cs = []; // of Stmt_pm_clauseContexts;
        super.copyFrom(ctx);
    }

	MATCH() {
	    return this.getToken(miniScillaParser.MATCH, 0);
	};

	WITH() {
	    return this.getToken(miniScillaParser.WITH, 0);
	};

	END() {
	    return this.getToken(miniScillaParser.END, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	stmt_pm_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Stmt_pm_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Stmt_pm_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMatchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMatchStmt(this);
		}
	}


}

miniScillaParser.MatchStmtContext = MatchStmtContext;

class IterateContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // SidContext;
        this.p = null; // Component_idContext;
        super.copyFrom(ctx);
    }

	FORALL() {
	    return this.getToken(miniScillaParser.FORALL, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterIterate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitIterate(this);
		}
	}


}

miniScillaParser.IterateContext = IterateContext;

class StoreContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // SidContext;
        super.copyFrom(ctx);
    }

	ASSIGN() {
	    return this.getToken(miniScillaParser.ASSIGN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterStore(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitStore(this);
		}
	}


}

miniScillaParser.StoreContext = StoreContext;

class MapGetContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(miniScillaParser.FETCH, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMapGet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMapGet(this);
		}
	}


}

miniScillaParser.MapGetContext = MapGetContext;

class SendContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.m = null; // SidContext;
        super.copyFrom(ctx);
    }

	SEND() {
	    return this.getToken(miniScillaParser.SEND, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterSend(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitSend(this);
		}
	}


}

miniScillaParser.SendContext = SendContext;

class MapGetExistsContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.r = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(miniScillaParser.FETCH, 0);
	};

	EXISTS() {
	    return this.getToken(miniScillaParser.EXISTS, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMapGetExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMapGetExists(this);
		}
	}


}

miniScillaParser.MapGetExistsContext = MapGetExistsContext;

class CreateEvntContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.m = null; // SidContext;
        super.copyFrom(ctx);
    }

	EVENT() {
	    return this.getToken(miniScillaParser.EVENT, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterCreateEvnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitCreateEvnt(this);
		}
	}


}

miniScillaParser.CreateEvntContext = CreateEvntContext;

class ReadFromBCContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this.c = null; // CidContext;
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(miniScillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(miniScillaParser.AND, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterReadFromBC(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitReadFromBC(this);
		}
	}


}

miniScillaParser.ReadFromBCContext = ReadFromBCContext;

class ThrowContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.mopt = null; // SidContext;
        super.copyFrom(ctx);
    }

	THROW() {
	    return this.getToken(miniScillaParser.THROW, 0);
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterThrow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitThrow(this);
		}
	}


}

miniScillaParser.ThrowContext = ThrowContext;

class CallProcContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.p = null; // Component_idContext;
        this._sid = null; // SidContext;
        this.args = []; // of SidContexts;
        super.copyFrom(ctx);
    }

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	sid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SidContext);
	    } else {
	        return this.getTypedRuleContext(SidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterCallProc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitCallProc(this);
		}
	}


}

miniScillaParser.CallProcContext = CallProcContext;

class MapUpdateDeleteContext extends StmtContext {

    constructor(parser, ctx) {
        super(parser);
        this.l = null; // IdentifierContext;
        this._map_access = null; // Map_accessContext;
        this.keys = []; // of Map_accessContexts;
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(miniScillaParser.DELETE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterMapUpdateDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitMapUpdateDelete(this);
		}
	}


}

miniScillaParser.MapUpdateDeleteContext = MapUpdateDeleteContext;

class Remote_fetch_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_remote_fetch_stmt;
        this.l = null; // IdentifierContext
        this.adr_id = null; // IdentifierContext
        this.r = null; // SidContext
        this.adr_spid = null; // Token
        this.r_id = null; // IdentifierContext
        this._map_access = null; // Map_accessContext
        this.keys = []; // of Map_accessContexts
        this.adr = null; // SidContext
        this.t = null; // Address_typContext
    }

	FETCH() {
	    return this.getToken(miniScillaParser.FETCH, 0);
	};

	AND() {
	    return this.getToken(miniScillaParser.AND, 0);
	};

	PERIOD() {
	    return this.getToken(miniScillaParser.PERIOD, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	sid() {
	    return this.getTypedRuleContext(SidContext,0);
	};

	SPID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.SPID);
	    } else {
	        return this.getToken(miniScillaParser.SPID, i);
	    }
	};


	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	map_access = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Map_accessContext);
	    } else {
	        return this.getTypedRuleContext(Map_accessContext,i);
	    }
	};

	EXISTS() {
	    return this.getToken(miniScillaParser.EXISTS, 0);
	};

	AS() {
	    return this.getToken(miniScillaParser.AS, 0);
	};

	address_typ() {
	    return this.getTypedRuleContext(Address_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterRemote_fetch_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitRemote_fetch_stmt(this);
		}
	}


}



class Stmt_pm_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_stmt_pm_clause;
        this.p = null; // PatternContext
        this._stmt = null; // StmtContext
        this.ss = []; // of StmtContexts
    }

	BAR() {
	    return this.getToken(miniScillaParser.BAR, 0);
	};

	ARROW() {
	    return this.getToken(miniScillaParser.ARROW, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.SEMICOLON);
	    } else {
	        return this.getToken(miniScillaParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterStmt_pm_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitStmt_pm_clause(this);
		}
	}


}



class StmtsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_stmts;
        this._stmt = null; // StmtContext
        this.ss = []; // of StmtContexts
    }

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.SEMICOLON);
	    } else {
	        return this.getToken(miniScillaParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterStmts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitStmts(this);
		}
	}


}



class Stmts_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_stmts_term;
        this.ss = null; // StmtsContext
    }

	EOF() {
	    return this.getToken(miniScillaParser.EOF, 0);
	};

	stmts() {
	    return this.getTypedRuleContext(StmtsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterStmts_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitStmts_term(this);
		}
	}


}



class Param_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_param_pair;
        this.iwt = null; // Id_with_typContext
    }

	id_with_typ() {
	    return this.getTypedRuleContext(Id_with_typContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterParam_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitParam_pair(this);
		}
	}


}



class ComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_component;
        this.t = null; // TransitionContext
        this.p = null; // ProcedureContext
    }

	transition() {
	    return this.getTypedRuleContext(TransitionContext,0);
	};

	procedure() {
	    return this.getTypedRuleContext(ProcedureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitComponent(this);
		}
	}


}



class ProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_procedure;
        this.t = null; // Component_idContext
        this.params = null; // Component_paramsContext
        this.ss = null; // Component_bodyContext
    }

	PROCEDURE() {
	    return this.getToken(miniScillaParser.PROCEDURE, 0);
	};

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	component_params() {
	    return this.getTypedRuleContext(Component_paramsContext,0);
	};

	component_body() {
	    return this.getTypedRuleContext(Component_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitProcedure(this);
		}
	}


}



class TransitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_transition;
        this.t = null; // Component_idContext
        this.params = null; // Component_paramsContext
        this.ss = null; // Component_bodyContext
    }

	TRANSITION() {
	    return this.getToken(miniScillaParser.TRANSITION, 0);
	};

	component_id() {
	    return this.getTypedRuleContext(Component_idContext,0);
	};

	component_params() {
	    return this.getTypedRuleContext(Component_paramsContext,0);
	};

	component_body() {
	    return this.getTypedRuleContext(Component_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterTransition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitTransition(this);
		}
	}


}



class Component_idContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_component_id;
        this.c = null; // CidContext
        this.i = null; // IdentifierContext
    }

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterComponent_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitComponent_id(this);
		}
	}


}



class Component_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_component_params;
        this._param_pair = null; // Param_pairContext
        this.params = []; // of Param_pairContexts
    }

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	param_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_pairContext);
	    } else {
	        return this.getTypedRuleContext(Param_pairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.COMMA);
	    } else {
	        return this.getToken(miniScillaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterComponent_params(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitComponent_params(this);
		}
	}


}



class Component_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_component_body;
        this.ss = null; // StmtsContext
    }

	END() {
	    return this.getToken(miniScillaParser.END, 0);
	};

	stmts() {
	    return this.getTypedRuleContext(StmtsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterComponent_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitComponent_body(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_field;
        this.iwt = null; // Id_with_typContext
        this.rhs = null; // ExpContext
    }

	FIELD() {
	    return this.getToken(miniScillaParser.FIELD, 0);
	};

	EQ() {
	    return this.getToken(miniScillaParser.EQ, 0);
	};

	id_with_typ() {
	    return this.getTypedRuleContext(Id_with_typContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitField(this);
		}
	}


}



class With_constraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_with_constraint;
        this.f = null; // ExpContext
    }

	WITH() {
	    return this.getToken(miniScillaParser.WITH, 0);
	};

	ARROW() {
	    return this.getToken(miniScillaParser.ARROW, 0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterWith_constraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitWith_constraint(this);
		}
	}


}



class ContractContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_contract;
        this.c = null; // CidContext
        this._param_pair = null; // Param_pairContext
        this.params = []; // of Param_pairContexts
        this.ct = null; // With_constraintContext
        this._field = null; // FieldContext
        this.fs = []; // of FieldContexts
        this._component = null; // ComponentContext
        this.comps = []; // of ComponentContexts
    }

	CONTRACT() {
	    return this.getToken(miniScillaParser.CONTRACT, 0);
	};

	LPAREN() {
	    return this.getToken(miniScillaParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(miniScillaParser.RPAREN, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	param_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_pairContext);
	    } else {
	        return this.getTypedRuleContext(Param_pairContext,i);
	    }
	};

	with_constraint() {
	    return this.getTypedRuleContext(With_constraintContext,0);
	};

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	component = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentContext);
	    } else {
	        return this.getTypedRuleContext(ComponentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(miniScillaParser.COMMA);
	    } else {
	        return this.getToken(miniScillaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterContract(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitContract(this);
		}
	}


}



class TconstrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_tconstr;
        this.tn = null; // CidContext
        this._targ = null; // TargContext
        this.t = []; // of TargContexts
    }

	BAR() {
	    return this.getToken(miniScillaParser.BAR, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	OF() {
	    return this.getToken(miniScillaParser.OF, 0);
	};

	targ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargContext);
	    } else {
	        return this.getTypedRuleContext(TargContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterTconstr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitTconstr(this);
		}
	}


}



class LibentryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_libentry;
        this.ns = null; // IdentifierContext
        this.t = null; // Type_annotContext
        this.e = null; // ExpContext
        this.tname = null; // CidContext
        this._tconstr = null; // TconstrContext
        this.constrs = []; // of TconstrContexts
    }

	LET() {
	    return this.getToken(miniScillaParser.LET, 0);
	};

	EQ() {
	    return this.getToken(miniScillaParser.EQ, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	exp() {
	    return this.getTypedRuleContext(ExpContext,0);
	};

	type_annot() {
	    return this.getTypedRuleContext(Type_annotContext,0);
	};

	TYPE() {
	    return this.getToken(miniScillaParser.TYPE, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	tconstr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TconstrContext);
	    } else {
	        return this.getTypedRuleContext(TconstrContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterLibentry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitLibentry(this);
		}
	}


}



class LibraryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_library;
        this.n = null; // CidContext
        this._libentry = null; // LibentryContext
        this.ls = []; // of LibentryContexts
    }

	LIBRARY() {
	    return this.getToken(miniScillaParser.LIBRARY, 0);
	};

	cid() {
	    return this.getTypedRuleContext(CidContext,0);
	};

	libentry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LibentryContext);
	    } else {
	        return this.getTypedRuleContext(LibentryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterLibrary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitLibrary(this);
		}
	}


}



class LmoduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_lmodule;
        this.cver = null; // Token
        this.els = null; // ImportsContext
        this.l = null; // LibraryContext
    }

	SCILLA_VERSION() {
	    return this.getToken(miniScillaParser.SCILLA_VERSION, 0);
	};

	EOF() {
	    return this.getToken(miniScillaParser.EOF, 0);
	};

	NUMBER() {
	    return this.getToken(miniScillaParser.NUMBER, 0);
	};

	imports() {
	    return this.getTypedRuleContext(ImportsContext,0);
	};

	library() {
	    return this.getTypedRuleContext(LibraryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterLmodule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitLmodule(this);
		}
	}


}



class ImportnameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_importname;
        this.c = null; // CidContext
        this.c1 = null; // CidContext
        this.c2 = null; // CidContext
    }

	cid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CidContext);
	    } else {
	        return this.getTypedRuleContext(CidContext,i);
	    }
	};

	AS() {
	    return this.getToken(miniScillaParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterImportname(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitImportname(this);
		}
	}


}



class ImportsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_imports;
        this._importname = null; // ImportnameContext
        this.els = []; // of ImportnameContexts
    }

	IMPORT() {
	    return this.getToken(miniScillaParser.IMPORT, 0);
	};

	importname = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportnameContext);
	    } else {
	        return this.getTypedRuleContext(ImportnameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterImports(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitImports(this);
		}
	}


}



class CmoduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = miniScillaParser.RULE_cmodule;
        this.cver = null; // Token
        this.els = null; // ImportsContext
        this.ls = null; // LibraryContext
        this.c = null; // ContractContext
    }

	SCILLA_VERSION() {
	    return this.getToken(miniScillaParser.SCILLA_VERSION, 0);
	};

	EOF() {
	    return this.getToken(miniScillaParser.EOF, 0);
	};

	NUMBER() {
	    return this.getToken(miniScillaParser.NUMBER, 0);
	};

	contract() {
	    return this.getTypedRuleContext(ContractContext,0);
	};

	imports() {
	    return this.getTypedRuleContext(ImportsContext,0);
	};

	library() {
	    return this.getTypedRuleContext(LibraryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.enterCmodule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof miniScillaListener ) {
	        listener.exitCmodule(this);
		}
	}


}




miniScillaParser.Int_Context = Int_Context; 
miniScillaParser.Prim_typesContext = Prim_typesContext; 
miniScillaParser.T_map_keyContext = T_map_keyContext; 
miniScillaParser.T_map_value_argsContext = T_map_value_argsContext; 
miniScillaParser.T_map_valueContext = T_map_valueContext; 
miniScillaParser.T_map_value_allow_targsContext = T_map_value_allow_targsContext; 
miniScillaParser.Address_typContext = Address_typContext; 
miniScillaParser.TypContext = TypContext; 
miniScillaParser.TargContext = TargContext; 
miniScillaParser.Address_type_fieldContext = Address_type_fieldContext; 
miniScillaParser.ExpContext = ExpContext; 
miniScillaParser.Simple_expContext = Simple_expContext; 
miniScillaParser.Atomic_expContext = Atomic_expContext; 
miniScillaParser.LitContext = LitContext; 
miniScillaParser.CtargsContext = CtargsContext; 
miniScillaParser.Map_accessContext = Map_accessContext; 
miniScillaParser.PatternContext = PatternContext; 
miniScillaParser.Arg_patternContext = Arg_patternContext; 
miniScillaParser.Exp_pm_clauseContext = Exp_pm_clauseContext; 
miniScillaParser.Msg_entryContext = Msg_entryContext; 
miniScillaParser.Builtin_argsContext = Builtin_argsContext; 
miniScillaParser.Exp_termContext = Exp_termContext; 
miniScillaParser.Type_termContext = Type_termContext; 
miniScillaParser.IdentifierContext = IdentifierContext; 
miniScillaParser.SidContext = SidContext; 
miniScillaParser.ScidContext = ScidContext; 
miniScillaParser.CidContext = CidContext; 
miniScillaParser.Type_annotContext = Type_annotContext; 
miniScillaParser.Id_with_typContext = Id_with_typContext; 
miniScillaParser.StmtContext = StmtContext; 
miniScillaParser.Remote_fetch_stmtContext = Remote_fetch_stmtContext; 
miniScillaParser.Stmt_pm_clauseContext = Stmt_pm_clauseContext; 
miniScillaParser.StmtsContext = StmtsContext; 
miniScillaParser.Stmts_termContext = Stmts_termContext; 
miniScillaParser.Param_pairContext = Param_pairContext; 
miniScillaParser.ComponentContext = ComponentContext; 
miniScillaParser.ProcedureContext = ProcedureContext; 
miniScillaParser.TransitionContext = TransitionContext; 
miniScillaParser.Component_idContext = Component_idContext; 
miniScillaParser.Component_paramsContext = Component_paramsContext; 
miniScillaParser.Component_bodyContext = Component_bodyContext; 
miniScillaParser.FieldContext = FieldContext; 
miniScillaParser.With_constraintContext = With_constraintContext; 
miniScillaParser.ContractContext = ContractContext; 
miniScillaParser.TconstrContext = TconstrContext; 
miniScillaParser.LibentryContext = LibentryContext; 
miniScillaParser.LibraryContext = LibraryContext; 
miniScillaParser.LmoduleContext = LmoduleContext; 
miniScillaParser.ImportnameContext = ImportnameContext; 
miniScillaParser.ImportsContext = ImportsContext; 
miniScillaParser.CmoduleContext = CmoduleContext; 
