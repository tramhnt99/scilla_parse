scilla_version 0

library PrimRec

let list_foldk : forall 'A. forall 'B. ('B -> 'A -> ('B -> 'B) -> 'B) -> 'B -> (List 'A) -> 'B =
  tfun 'A => tfun 'B =>
  fun (f: 'B -> 'A -> ('B -> 'B) -> 'B) =>
  fun (z : 'B) => fun (l: List 'A) =>
  let g = fun (a: 'B) => fun (b: List 'A) =>
    match b with
    | Cons h t => let partial = fun (k : 'B) => g k t in
      f a h partial
    | Nil => a
    end
  in
  g z l

let list_foldl : forall 'A. forall 'B. ( 'B -> 'A -> 'B) -> 'B -> List 'A -> 'B =
tfun 'A => tfun 'B =>
fun (f : 'B -> 'A -> 'B) =>
let left_f = fun (z: 'B) => fun (x: 'A) =>
  fun (recurse : 'B -> 'B) => let res = f z x in
  recurse res in
let folder = @list_foldk 'A 'B in
folder left_f

let list_foldr : forall 'A. forall 'B. ('A -> 'B -> 'B) -> 'B -> List 'A -> 'B =
tfun 'A => tfun 'B =>
fun (f : 'A -> 'B -> 'B) =>
let right_f = fun (z: 'B) => fun (x: 'A) =>
  fun (recurse : 'B -> 'B) => let res = recurse z in f x res in
let folder = @list_foldk 'A 'B in
folder right_f


let nat_foldk : ('T -> Nat -> ('T -> 'T) -> 'T) -> 'T -> Nat -> 'T =
  tfun 'T =>
  fun (fn : ('T -> Nat -> ('T -> 'T) -> 'T)) =>
  fun (f0 : 'T) => fun (n: Nat) =>
  let g : 'T -> Nat -> 'T =
    fun (f0 : 'T) => fun (n: Nat) =>
    match n with
      | Succ n1 => let partial = fun (k : 'T) => g k n1 in
        fn f0 n partial
      | Zero => f0
    end
  in
  g f0 n

let nat_fold : ('T -> Nat -> 'T) -> 'T -> Nat -> 'T =
tfun 'T =>
fun (fn: 'T -> Nat -> 'T) =>
fun (f0 : 'T) => fun (n: Nat) =>
let g : 'T -> Nat -> 'T =
  fun (f0: 'T) => fun (n: Nat) =>
  match n with
    | Succ n1 => let res = fn f0 n1 in
      g res n1
    | Zero => f0
  end
in
g f0 n